// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package suigraphql

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"

	"github.com/pattonkan/sui-go/sui"
)

// Filter either by the digest, or the sequence number, or neither, to get the latest checkpoint.
type CheckpointId struct {
	Digest         string `json:"digest"`
	SequenceNumber uint64 `json:"sequenceNumber"`
}

// GetDigest returns CheckpointId.Digest, and is useful for accessing the field via an interface.
func (v *CheckpointId) GetDigest() string { return v.Digest }

// GetSequenceNumber returns CheckpointId.SequenceNumber, and is useful for accessing the field via an interface.
func (v *CheckpointId) GetSequenceNumber() uint64 { return v.SequenceNumber }

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResult includes the requested fields of the GraphQL type DryRunResult.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResult struct {
	// The error that occurred during dry run execution, if any.
	Error string `json:"error"`
	// The intermediate results for each command of the dry run execution, including
	// contents of mutated references and return values.
	Results []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect `json:"results"`
	// The transaction block representing the dry run execution.
	Transaction DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock `json:"transaction"`
}

// GetError returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResult.Error, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResult) GetError() string {
	return v.Error
}

// GetResults returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResult.Results, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResult) GetResults() []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect {
	return v.Results
}

// GetTransaction returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResult.Transaction, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResult) GetTransaction() DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock {
	return v.Transaction
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect includes the requested fields of the GraphQL type DryRunEffect.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect struct {
	// Changes made to arguments that were mutably borrowed by each command in this transaction.
	MutatedReferences []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation `json:"mutatedReferences"`
	// Return results of each command in this transaction.
	ReturnValues []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn `json:"returnValues"`
}

// GetMutatedReferences returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect.MutatedReferences, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect) GetMutatedReferences() []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation {
	return v.MutatedReferences
}

// GetReturnValues returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect.ReturnValues, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffect) GetReturnValues() []DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn {
	return v.ReturnValues
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation includes the requested fields of the GraphQL type DryRunMutation.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation struct {
	Input DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument `json:"-"`
	Type  DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType             `json:"type"`
	Bcs   sui.Base64                                                                                                                             `json:"bcs"`
}

// GetInput returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation.Input, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) GetInput() DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument {
	return v.Input
}

// GetType returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation.Type, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) GetType() DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType {
	return v.Type
}

// GetBcs returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation.Bcs, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) GetBcs() sui.Base64 {
	return v.Bcs
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation
		Input json.RawMessage `json:"input"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Input
		src := firstPass.Input
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation.Input: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation struct {
	Input json.RawMessage `json:"input"`

	Type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType `json:"type"`

	Bcs sui.Base64 `json:"bcs"`
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation) __premarshalJSON() (*__premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation, error) {
	var retval __premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation

	{

		dst := &retval.Input
		src := v.Input
		var err error
		*dst, err = __marshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutation.Input: %w", err)
		}
	}
	retval.Type = v.Type
	retval.Bcs = v.Bcs
	return &retval, nil
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput includes the requested fields of the GraphQL type Input.
// The GraphQL type's documentation follows.
//
// One of the input objects or primitive values to the programmable transaction block.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput struct {
	Typename string `json:"__typename"`
	// Index of the programmable transaction block input (0-indexed).
	InputIndex int `json:"inputIndex"`
}

// GetTypename returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput.Typename, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput) GetTypename() string {
	return v.Typename
}

// GetInputIndex returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput.InputIndex, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput) GetInputIndex() int {
	return v.InputIndex
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin includes the requested fields of the GraphQL type GasCoin.
// The GraphQL type's documentation follows.
//
// Access to the gas inputs, after they have been smashed into one coin. The gas coin can only be
// used by reference, except for with `TransferObjectsTransaction` that can accept it by value.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin struct {
	Typename string `json:"__typename"`
}

// GetTypename returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin.Typename, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin) GetTypename() string {
	return v.Typename
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult includes the requested fields of the GraphQL type Result.
// The GraphQL type's documentation follows.
//
// The result of another transaction command.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult struct {
	Typename string `json:"__typename"`
	// The index of the previous command (0-indexed) that returned this result.
	Cmd int `json:"cmd"`
	// If the previous command returns multiple values, this is the index of the individual result
	// among the multiple results from that command (also 0-indexed).
	ResultIndex int `json:"resultIndex"`
}

// GetTypename returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult.Typename, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult) GetTypename() string {
	return v.Typename
}

// GetCmd returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult.Cmd, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult) GetCmd() int {
	return v.Cmd
}

// GetResultIndex returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult.ResultIndex, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult) GetResultIndex() int {
	return v.ResultIndex
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument includes the requested fields of the GraphQL interface TransactionArgument.
//
// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument is implemented by the following types:
// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin
// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput
// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult
// The GraphQL type's documentation follows.
//
// An argument to a programmable transaction command.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument interface {
	implementsGraphQLInterfaceDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin) implementsGraphQLInterfaceDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument() {
}
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput) implementsGraphQLInterfaceDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument() {
}
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult) implementsGraphQLInterfaceDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument() {
}

func __unmarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument(b []byte, v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GasCoin":
		*v = new(DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin)
		return json.Unmarshal(b, *v)
	case "Input":
		*v = new(DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput)
		return json.Unmarshal(b, *v)
	case "Result":
		*v = new(DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing TransactionArgument.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument: "%v"`, tn.TypeName)
	}
}

func __marshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument(v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin:
		typename = "GasCoin"

		result := struct {
			TypeName string `json:"__typename"`
			*DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputGasCoin
		}{typename, v}
		return json.Marshal(result)
	case *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput:
		typename = "Input"

		result := struct {
			TypeName string `json:"__typename"`
			*DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInput
		}{typename, v}
		return json.Marshal(result)
	case *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult:
		typename = "Result"

		result := struct {
			TypeName string `json:"__typename"`
			*DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputResult
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationInputTransactionArgument: "%T"`, v)
	}
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectMutatedReferencesDryRunMutationTypeMoveType) GetRepr() string {
	return v.Repr
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn includes the requested fields of the GraphQL type DryRunReturn.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn struct {
	Type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType `json:"type"`
	Bcs  sui.Base64                                                                                                          `json:"bcs"`
}

// GetType returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn.Type, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn) GetType() DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType {
	return v.Type
}

// GetBcs returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn.Bcs, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturn) GetBcs() sui.Base64 {
	return v.Bcs
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultResultsDryRunEffectReturnValuesDryRunReturnTypeMoveType) GetRepr() string {
	return v.Repr
}

// DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) __premarshalJSON() (*__premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock, error) {
	var retval __premarshalDevInspectTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// DevInspectTransactionBlockResponse is returned by DevInspectTransactionBlock on success.
type DevInspectTransactionBlockResponse struct {
	// Simulate running a transaction to inspect its effects without
	// committing to them on-chain.
	//
	// `txBytes` either a `TransactionData` struct or a `TransactionKind`
	// struct, BCS-encoded and then Base64-encoded.  The expected
	// type is controlled by the presence or absence of `txMeta`: If
	// present, `txBytes` is assumed to be a `TransactionKind`, if
	// absent, then `TransactionData`.
	//
	// `txMeta` the data that is missing from a `TransactionKind` to make
	// a `TransactionData` (sender address and gas information).  All
	// its fields are nullable.
	//
	// `skipChecks` optional flag to disable the usual verification
	// checks that prevent access to objects that are owned by
	// addresses other than the sender, and calling non-public,
	// non-entry functions, and some other checks.  Defaults to false.
	DryRunTransactionBlock DevInspectTransactionBlockDryRunTransactionBlockDryRunResult `json:"dryRunTransactionBlock"`
}

// GetDryRunTransactionBlock returns DevInspectTransactionBlockResponse.DryRunTransactionBlock, and is useful for accessing the field via an interface.
func (v *DevInspectTransactionBlockResponse) GetDryRunTransactionBlock() DevInspectTransactionBlockDryRunTransactionBlockDryRunResult {
	return v.DryRunTransactionBlock
}

// DryRunTransactionBlockDryRunTransactionBlockDryRunResult includes the requested fields of the GraphQL type DryRunResult.
type DryRunTransactionBlockDryRunTransactionBlockDryRunResult struct {
	// The error that occurred during dry run execution, if any.
	Error string `json:"error"`
	// The transaction block representing the dry run execution.
	Transaction DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock `json:"transaction"`
}

// GetError returns DryRunTransactionBlockDryRunTransactionBlockDryRunResult.Error, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResult) GetError() string { return v.Error }

// GetTransaction returns DryRunTransactionBlockDryRunTransactionBlockDryRunResult.Transaction, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResult) GetTransaction() DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock {
	return v.Transaction
}

// DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock) __premarshalJSON() (*__premarshalDryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock, error) {
	var retval __premarshalDryRunTransactionBlockDryRunTransactionBlockDryRunResultTransactionTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// DryRunTransactionBlockResponse is returned by DryRunTransactionBlock on success.
type DryRunTransactionBlockResponse struct {
	// Simulate running a transaction to inspect its effects without
	// committing to them on-chain.
	//
	// `txBytes` either a `TransactionData` struct or a `TransactionKind`
	// struct, BCS-encoded and then Base64-encoded.  The expected
	// type is controlled by the presence or absence of `txMeta`: If
	// present, `txBytes` is assumed to be a `TransactionKind`, if
	// absent, then `TransactionData`.
	//
	// `txMeta` the data that is missing from a `TransactionKind` to make
	// a `TransactionData` (sender address and gas information).  All
	// its fields are nullable.
	//
	// `skipChecks` optional flag to disable the usual verification
	// checks that prevent access to objects that are owned by
	// addresses other than the sender, and calling non-public,
	// non-entry functions, and some other checks.  Defaults to false.
	DryRunTransactionBlock DryRunTransactionBlockDryRunTransactionBlockDryRunResult `json:"dryRunTransactionBlock"`
}

// GetDryRunTransactionBlock returns DryRunTransactionBlockResponse.DryRunTransactionBlock, and is useful for accessing the field via an interface.
func (v *DryRunTransactionBlockResponse) GetDryRunTransactionBlock() DryRunTransactionBlockDryRunTransactionBlockDryRunResult {
	return v.DryRunTransactionBlock
}

type DynamicFieldName struct {
	// The string type of the DynamicField's 'name' field.
	// A string representation of a Move primitive like 'u64', or a struct type like '0x2::kiosk::Listing'
	Type string `json:"type"`
	// The Base64 encoded bcs serialization of the DynamicField's 'name' field.
	Bcs sui.Base64 `json:"bcs"`
}

// GetType returns DynamicFieldName.Type, and is useful for accessing the field via an interface.
func (v *DynamicFieldName) GetType() string { return v.Type }

// GetBcs returns DynamicFieldName.Bcs, and is useful for accessing the field via an interface.
func (v *DynamicFieldName) GetBcs() sui.Base64 { return v.Bcs }

type EventFilter struct {
	// Filter down to events from transactions sent by this address.
	Sender sui.Address `json:"sender"`
	// Filter down to the events from this transaction (given by its transaction digest).
	TransactionDigest string `json:"transactionDigest"`
	// Events emitted by a particular module. An event is emitted by a
	// particular module if some function in the module is called by a
	// PTB and emits an event.
	//
	// Modules can be filtered by their package, or package::module.
	// We currently do not support filtering by emitting module and event type
	// at the same time so if both are provided in one filter, the query will error.
	EmittingModule string `json:"emittingModule"`
	// This field is used to specify the type of event emitted.
	//
	// Events can be filtered by their type's package, package::module,
	// or their fully qualified type name.
	//
	// Generic types can be queried by either the generic type name, e.g.
	// `0x2::coin::Coin`, or by the full type name, such as
	// `0x2::coin::Coin<0x2::sui::SUI>`.
	EventType string `json:"eventType"`
}

// GetSender returns EventFilter.Sender, and is useful for accessing the field via an interface.
func (v *EventFilter) GetSender() sui.Address { return v.Sender }

// GetTransactionDigest returns EventFilter.TransactionDigest, and is useful for accessing the field via an interface.
func (v *EventFilter) GetTransactionDigest() string { return v.TransactionDigest }

// GetEmittingModule returns EventFilter.EmittingModule, and is useful for accessing the field via an interface.
func (v *EventFilter) GetEmittingModule() string { return v.EmittingModule }

// GetEventType returns EventFilter.EventType, and is useful for accessing the field via an interface.
func (v *EventFilter) GetEventType() string { return v.EventType }

// ExecuteTransactionBlockExecuteTransactionBlockExecutionResult includes the requested fields of the GraphQL type ExecutionResult.
// The GraphQL type's documentation follows.
//
// The result of an execution, including errors that occurred during said execution.
type ExecuteTransactionBlockExecuteTransactionBlockExecutionResult struct {
	// The errors field captures any errors that occurred during execution
	Errors []string `json:"errors"`
	// The effects of the executed transaction. Since the transaction was just executed
	// and not indexed yet, fields including `balance_changes`, `timestamp` and `checkpoint`
	// are not available.
	Effects ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects `json:"effects"`
}

// GetErrors returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResult.Errors, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResult) GetErrors() []string {
	return v.Errors
}

// GetEffects returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResult.Effects, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResult) GetEffects() ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects {
	return v.Effects
}

// ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects includes the requested fields of the GraphQL type TransactionBlockEffects.
// The GraphQL type's documentation follows.
//
// The effects representing the result of executing a transaction block.
type ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects struct {
	// The transaction that ran to produce these effects.
	TransactionBlock ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock `json:"transactionBlock"`
}

// GetTransactionBlock returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects.TransactionBlock, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffects) GetTransactionBlock() ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock {
	return v.TransactionBlock
}

// ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock) __premarshalJSON() (*__premarshalExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock, error) {
	var retval __premarshalExecuteTransactionBlockExecuteTransactionBlockExecutionResultEffectsTransactionBlockEffectsTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// ExecuteTransactionBlockResponse is returned by ExecuteTransactionBlock on success.
type ExecuteTransactionBlockResponse struct {
	// Execute a transaction, committing its effects on chain.
	//
	// - `txBytes` is a `TransactionData` struct that has been BCS-encoded and then Base64-encoded.
	// - `signatures` are a list of `flag || signature || pubkey` bytes, Base64-encoded.
	//
	// Waits until the transaction has reached finality on chain to return its transaction digest,
	// or returns the error that prevented finality if that was not possible. A transaction is
	// final when its effects are guaranteed on chain (it cannot be revoked).
	//
	// There may be a delay between transaction finality and when GraphQL requests (including the
	// request that issued the transaction) reflect its effects. As a result, queries that depend
	// on indexing the state of the chain (e.g. contents of output objects, address-level balance
	// information at the time of the transaction), must wait for indexing to catch up by polling
	// for the transaction digest using `Query.transactionBlock`.
	ExecuteTransactionBlock ExecuteTransactionBlockExecuteTransactionBlockExecutionResult `json:"executeTransactionBlock"`
}

// GetExecuteTransactionBlock returns ExecuteTransactionBlockResponse.ExecuteTransactionBlock, and is useful for accessing the field via an interface.
func (v *ExecuteTransactionBlockResponse) GetExecuteTransactionBlock() ExecuteTransactionBlockExecuteTransactionBlockExecutionResult {
	return v.ExecuteTransactionBlock
}

// GetAllBalancesAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetAllBalancesAddress struct {
	// The balances of all coin types owned by this address.
	Balances GetAllBalancesAddressBalancesBalanceConnection `json:"balances"`
}

// GetBalances returns GetAllBalancesAddress.Balances, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddress) GetBalances() GetAllBalancesAddressBalancesBalanceConnection {
	return v.Balances
}

// GetAllBalancesAddressBalancesBalanceConnection includes the requested fields of the GraphQL type BalanceConnection.
type GetAllBalancesAddressBalancesBalanceConnection struct {
	// Information to aid in pagination.
	PageInfo GetAllBalancesAddressBalancesBalanceConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetAllBalancesAddressBalancesBalanceConnectionNodesBalance `json:"nodes"`
}

// GetPageInfo returns GetAllBalancesAddressBalancesBalanceConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnection) GetPageInfo() GetAllBalancesAddressBalancesBalanceConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetAllBalancesAddressBalancesBalanceConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnection) GetNodes() []GetAllBalancesAddressBalancesBalanceConnectionNodesBalance {
	return v.Nodes
}

// GetAllBalancesAddressBalancesBalanceConnectionNodesBalance includes the requested fields of the GraphQL type Balance.
// The GraphQL type's documentation follows.
//
// The total balance for a particular coin type.
type GetAllBalancesAddressBalancesBalanceConnectionNodesBalance struct {
	// Coin type for the balance, such as 0x2::sui::SUI
	CoinType GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType `json:"coinType"`
	// How many coins of this type constitute the balance
	CoinObjectCount uint64 `json:"coinObjectCount"`
	// Total balance across all coin objects of the coin type
	TotalBalance sui.BigInt `json:"totalBalance"`
}

// GetCoinType returns GetAllBalancesAddressBalancesBalanceConnectionNodesBalance.CoinType, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionNodesBalance) GetCoinType() GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType {
	return v.CoinType
}

// GetCoinObjectCount returns GetAllBalancesAddressBalancesBalanceConnectionNodesBalance.CoinObjectCount, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionNodesBalance) GetCoinObjectCount() uint64 {
	return v.CoinObjectCount
}

// GetTotalBalance returns GetAllBalancesAddressBalancesBalanceConnectionNodesBalance.TotalBalance, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionNodesBalance) GetTotalBalance() sui.BigInt {
	return v.TotalBalance
}

// GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionNodesBalanceCoinTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetAllBalancesAddressBalancesBalanceConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetAllBalancesAddressBalancesBalanceConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetAllBalancesAddressBalancesBalanceConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetAllBalancesAddressBalancesBalanceConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetAllBalancesAddressBalancesBalanceConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetAllBalancesResponse is returned by GetAllBalances on success.
type GetAllBalancesResponse struct {
	// Look-up an Account by its SuiAddress.
	Address GetAllBalancesAddress `json:"address"`
}

// GetAddress returns GetAllBalancesResponse.Address, and is useful for accessing the field via an interface.
func (v *GetAllBalancesResponse) GetAddress() GetAllBalancesAddress { return v.Address }

// GetBalanceAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetBalanceAddress struct {
	// Total balance of all coins with marker type owned by this address. If type is not supplied,
	// it defaults to `0x2::sui::SUI`.
	Balance GetBalanceAddressBalance `json:"balance"`
}

// GetBalance returns GetBalanceAddress.Balance, and is useful for accessing the field via an interface.
func (v *GetBalanceAddress) GetBalance() GetBalanceAddressBalance { return v.Balance }

// GetBalanceAddressBalance includes the requested fields of the GraphQL type Balance.
// The GraphQL type's documentation follows.
//
// The total balance for a particular coin type.
type GetBalanceAddressBalance struct {
	// Coin type for the balance, such as 0x2::sui::SUI
	CoinType GetBalanceAddressBalanceCoinTypeMoveType `json:"coinType"`
	// How many coins of this type constitute the balance
	CoinObjectCount uint64 `json:"coinObjectCount"`
	// Total balance across all coin objects of the coin type
	TotalBalance sui.BigInt `json:"totalBalance"`
}

// GetCoinType returns GetBalanceAddressBalance.CoinType, and is useful for accessing the field via an interface.
func (v *GetBalanceAddressBalance) GetCoinType() GetBalanceAddressBalanceCoinTypeMoveType {
	return v.CoinType
}

// GetCoinObjectCount returns GetBalanceAddressBalance.CoinObjectCount, and is useful for accessing the field via an interface.
func (v *GetBalanceAddressBalance) GetCoinObjectCount() uint64 { return v.CoinObjectCount }

// GetTotalBalance returns GetBalanceAddressBalance.TotalBalance, and is useful for accessing the field via an interface.
func (v *GetBalanceAddressBalance) GetTotalBalance() sui.BigInt { return v.TotalBalance }

// GetBalanceAddressBalanceCoinTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetBalanceAddressBalanceCoinTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetBalanceAddressBalanceCoinTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetBalanceAddressBalanceCoinTypeMoveType) GetRepr() string { return v.Repr }

// GetBalanceResponse is returned by GetBalance on success.
type GetBalanceResponse struct {
	// Look-up an Account by its SuiAddress.
	Address GetBalanceAddress `json:"address"`
}

// GetAddress returns GetBalanceResponse.Address, and is useful for accessing the field via an interface.
func (v *GetBalanceResponse) GetAddress() GetBalanceAddress { return v.Address }

// GetChainIdentifierResponse is returned by GetChainIdentifier on success.
type GetChainIdentifierResponse struct {
	// First four bytes of the network's genesis checkpoint digest (uniquely identifies the
	// network).
	ChainIdentifier string `json:"chainIdentifier"`
}

// GetChainIdentifier returns GetChainIdentifierResponse.ChainIdentifier, and is useful for accessing the field via an interface.
func (v *GetChainIdentifierResponse) GetChainIdentifier() string { return v.ChainIdentifier }

// GetCheckpointCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type GetCheckpointCheckpoint struct {
	RPC_Checkpoint_Fields `json:"-"`
}

// GetDigest returns GetCheckpointCheckpoint.Digest, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetDigest() string { return v.RPC_Checkpoint_Fields.Digest }

// GetEpoch returns GetCheckpointCheckpoint.Epoch, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetEpoch() RPC_Checkpoint_FieldsEpoch {
	return v.RPC_Checkpoint_Fields.Epoch
}

// GetRollingGasSummary returns GetCheckpointCheckpoint.RollingGasSummary, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetRollingGasSummary() RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary {
	return v.RPC_Checkpoint_Fields.RollingGasSummary
}

// GetNetworkTotalTransactions returns GetCheckpointCheckpoint.NetworkTotalTransactions, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetNetworkTotalTransactions() uint64 {
	return v.RPC_Checkpoint_Fields.NetworkTotalTransactions
}

// GetPreviousCheckpointDigest returns GetCheckpointCheckpoint.PreviousCheckpointDigest, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetPreviousCheckpointDigest() string {
	return v.RPC_Checkpoint_Fields.PreviousCheckpointDigest
}

// GetSequenceNumber returns GetCheckpointCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetSequenceNumber() uint64 {
	return v.RPC_Checkpoint_Fields.SequenceNumber
}

// GetTimestamp returns GetCheckpointCheckpoint.Timestamp, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetTimestamp() time.Time { return v.RPC_Checkpoint_Fields.Timestamp }

// GetValidatorSignatures returns GetCheckpointCheckpoint.ValidatorSignatures, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetValidatorSignatures() sui.Base64 {
	return v.RPC_Checkpoint_Fields.ValidatorSignatures
}

// GetTransactionBlocks returns GetCheckpointCheckpoint.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetTransactionBlocks() RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection {
	return v.RPC_Checkpoint_Fields.TransactionBlocks
}

// GetEndOfEpoch returns GetCheckpointCheckpoint.EndOfEpoch, and is useful for accessing the field via an interface.
func (v *GetCheckpointCheckpoint) GetEndOfEpoch() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection {
	return v.RPC_Checkpoint_Fields.EndOfEpoch
}

func (v *GetCheckpointCheckpoint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCheckpointCheckpoint
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCheckpointCheckpoint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_Checkpoint_Fields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetCheckpointCheckpoint struct {
	Digest string `json:"digest"`

	Epoch RPC_Checkpoint_FieldsEpoch `json:"epoch"`

	RollingGasSummary RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary `json:"rollingGasSummary"`

	NetworkTotalTransactions uint64 `json:"networkTotalTransactions"`

	PreviousCheckpointDigest string `json:"previousCheckpointDigest"`

	SequenceNumber uint64 `json:"sequenceNumber"`

	Timestamp time.Time `json:"timestamp"`

	ValidatorSignatures sui.Base64 `json:"validatorSignatures"`

	TransactionBlocks RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`

	EndOfEpoch RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection `json:"endOfEpoch"`
}

func (v *GetCheckpointCheckpoint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCheckpointCheckpoint) __premarshalJSON() (*__premarshalGetCheckpointCheckpoint, error) {
	var retval __premarshalGetCheckpointCheckpoint

	retval.Digest = v.RPC_Checkpoint_Fields.Digest
	retval.Epoch = v.RPC_Checkpoint_Fields.Epoch
	retval.RollingGasSummary = v.RPC_Checkpoint_Fields.RollingGasSummary
	retval.NetworkTotalTransactions = v.RPC_Checkpoint_Fields.NetworkTotalTransactions
	retval.PreviousCheckpointDigest = v.RPC_Checkpoint_Fields.PreviousCheckpointDigest
	retval.SequenceNumber = v.RPC_Checkpoint_Fields.SequenceNumber
	retval.Timestamp = v.RPC_Checkpoint_Fields.Timestamp
	retval.ValidatorSignatures = v.RPC_Checkpoint_Fields.ValidatorSignatures
	retval.TransactionBlocks = v.RPC_Checkpoint_Fields.TransactionBlocks
	retval.EndOfEpoch = v.RPC_Checkpoint_Fields.EndOfEpoch
	return &retval, nil
}

// GetCheckpointResponse is returned by GetCheckpoint on success.
type GetCheckpointResponse struct {
	// Fetch checkpoint information by sequence number or digest (defaults to the latest available
	// checkpoint).
	Checkpoint GetCheckpointCheckpoint `json:"checkpoint"`
}

// GetCheckpoint returns GetCheckpointResponse.Checkpoint, and is useful for accessing the field via an interface.
func (v *GetCheckpointResponse) GetCheckpoint() GetCheckpointCheckpoint { return v.Checkpoint }

// GetCheckpointsCheckpointsCheckpointConnection includes the requested fields of the GraphQL type CheckpointConnection.
type GetCheckpointsCheckpointsCheckpointConnection struct {
	// Information to aid in pagination.
	PageInfo GetCheckpointsCheckpointsCheckpointConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint `json:"nodes"`
}

// GetPageInfo returns GetCheckpointsCheckpointsCheckpointConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnection) GetPageInfo() GetCheckpointsCheckpointsCheckpointConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetCheckpointsCheckpointsCheckpointConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnection) GetNodes() []GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint {
	return v.Nodes
}

// GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint struct {
	RPC_Checkpoint_Fields `json:"-"`
}

// GetDigest returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.Digest, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetDigest() string {
	return v.RPC_Checkpoint_Fields.Digest
}

// GetEpoch returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.Epoch, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetEpoch() RPC_Checkpoint_FieldsEpoch {
	return v.RPC_Checkpoint_Fields.Epoch
}

// GetRollingGasSummary returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.RollingGasSummary, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetRollingGasSummary() RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary {
	return v.RPC_Checkpoint_Fields.RollingGasSummary
}

// GetNetworkTotalTransactions returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.NetworkTotalTransactions, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetNetworkTotalTransactions() uint64 {
	return v.RPC_Checkpoint_Fields.NetworkTotalTransactions
}

// GetPreviousCheckpointDigest returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.PreviousCheckpointDigest, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetPreviousCheckpointDigest() string {
	return v.RPC_Checkpoint_Fields.PreviousCheckpointDigest
}

// GetSequenceNumber returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetSequenceNumber() uint64 {
	return v.RPC_Checkpoint_Fields.SequenceNumber
}

// GetTimestamp returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.Timestamp, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetTimestamp() time.Time {
	return v.RPC_Checkpoint_Fields.Timestamp
}

// GetValidatorSignatures returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.ValidatorSignatures, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetValidatorSignatures() sui.Base64 {
	return v.RPC_Checkpoint_Fields.ValidatorSignatures
}

// GetTransactionBlocks returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetTransactionBlocks() RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection {
	return v.RPC_Checkpoint_Fields.TransactionBlocks
}

// GetEndOfEpoch returns GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint.EndOfEpoch, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) GetEndOfEpoch() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection {
	return v.RPC_Checkpoint_Fields.EndOfEpoch
}

func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_Checkpoint_Fields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint struct {
	Digest string `json:"digest"`

	Epoch RPC_Checkpoint_FieldsEpoch `json:"epoch"`

	RollingGasSummary RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary `json:"rollingGasSummary"`

	NetworkTotalTransactions uint64 `json:"networkTotalTransactions"`

	PreviousCheckpointDigest string `json:"previousCheckpointDigest"`

	SequenceNumber uint64 `json:"sequenceNumber"`

	Timestamp time.Time `json:"timestamp"`

	ValidatorSignatures sui.Base64 `json:"validatorSignatures"`

	TransactionBlocks RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`

	EndOfEpoch RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection `json:"endOfEpoch"`
}

func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint) __premarshalJSON() (*__premarshalGetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint, error) {
	var retval __premarshalGetCheckpointsCheckpointsCheckpointConnectionNodesCheckpoint

	retval.Digest = v.RPC_Checkpoint_Fields.Digest
	retval.Epoch = v.RPC_Checkpoint_Fields.Epoch
	retval.RollingGasSummary = v.RPC_Checkpoint_Fields.RollingGasSummary
	retval.NetworkTotalTransactions = v.RPC_Checkpoint_Fields.NetworkTotalTransactions
	retval.PreviousCheckpointDigest = v.RPC_Checkpoint_Fields.PreviousCheckpointDigest
	retval.SequenceNumber = v.RPC_Checkpoint_Fields.SequenceNumber
	retval.Timestamp = v.RPC_Checkpoint_Fields.Timestamp
	retval.ValidatorSignatures = v.RPC_Checkpoint_Fields.ValidatorSignatures
	retval.TransactionBlocks = v.RPC_Checkpoint_Fields.TransactionBlocks
	retval.EndOfEpoch = v.RPC_Checkpoint_Fields.EndOfEpoch
	return &retval, nil
}

// GetCheckpointsCheckpointsCheckpointConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetCheckpointsCheckpointsCheckpointConnectionPageInfo struct {
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
}

// GetStartCursor returns GetCheckpointsCheckpointsCheckpointConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns GetCheckpointsCheckpointsCheckpointConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetHasNextPage returns GetCheckpointsCheckpointsCheckpointConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns GetCheckpointsCheckpointsCheckpointConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *GetCheckpointsCheckpointsCheckpointConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetCheckpointsResponse is returned by GetCheckpoints on success.
type GetCheckpointsResponse struct {
	// The checkpoints that exist in the network.
	Checkpoints GetCheckpointsCheckpointsCheckpointConnection `json:"checkpoints"`
}

// GetCheckpoints returns GetCheckpointsResponse.Checkpoints, and is useful for accessing the field via an interface.
func (v *GetCheckpointsResponse) GetCheckpoints() GetCheckpointsCheckpointsCheckpointConnection {
	return v.Checkpoints
}

// GetCoinMetadataCoinMetadata includes the requested fields of the GraphQL type CoinMetadata.
// The GraphQL type's documentation follows.
//
// The metadata for a coin type.
type GetCoinMetadataCoinMetadata struct {
	// The number of decimal places used to represent the token.
	Decimals int `json:"decimals"`
	// Full, official name of the token.
	Name string `json:"name"`
	// The token's identifying abbreviation.
	Symbol string `json:"symbol"`
	// Optional description of the token, provided by the creator of the token.
	Description string      `json:"description"`
	IconUrl     string      `json:"iconUrl"`
	Address     sui.Address `json:"address"`
}

// GetDecimals returns GetCoinMetadataCoinMetadata.Decimals, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetDecimals() int { return v.Decimals }

// GetName returns GetCoinMetadataCoinMetadata.Name, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetName() string { return v.Name }

// GetSymbol returns GetCoinMetadataCoinMetadata.Symbol, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetSymbol() string { return v.Symbol }

// GetDescription returns GetCoinMetadataCoinMetadata.Description, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetDescription() string { return v.Description }

// GetIconUrl returns GetCoinMetadataCoinMetadata.IconUrl, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetIconUrl() string { return v.IconUrl }

// GetAddress returns GetCoinMetadataCoinMetadata.Address, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataCoinMetadata) GetAddress() sui.Address { return v.Address }

// GetCoinMetadataResponse is returned by GetCoinMetadata on success.
type GetCoinMetadataResponse struct {
	// The coin metadata associated with the given coin type. Note that if the latest version of
	// the coin's metadata is wrapped or deleted, it will not be found.
	CoinMetadata GetCoinMetadataCoinMetadata `json:"coinMetadata"`
}

// GetCoinMetadata returns GetCoinMetadataResponse.CoinMetadata, and is useful for accessing the field via an interface.
func (v *GetCoinMetadataResponse) GetCoinMetadata() GetCoinMetadataCoinMetadata {
	return v.CoinMetadata
}

// GetCoinsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetCoinsAddress struct {
	Address sui.Address `json:"address"`
	// The coin objects for this address.
	//
	// `type` is a filter on the coin's type parameter, defaulting to `0x2::sui::SUI`.
	Coins GetCoinsAddressCoinsCoinConnection `json:"coins"`
}

// GetAddress returns GetCoinsAddress.Address, and is useful for accessing the field via an interface.
func (v *GetCoinsAddress) GetAddress() sui.Address { return v.Address }

// GetCoins returns GetCoinsAddress.Coins, and is useful for accessing the field via an interface.
func (v *GetCoinsAddress) GetCoins() GetCoinsAddressCoinsCoinConnection { return v.Coins }

// GetCoinsAddressCoinsCoinConnection includes the requested fields of the GraphQL type CoinConnection.
type GetCoinsAddressCoinsCoinConnection struct {
	// Information to aid in pagination.
	PageInfo GetCoinsAddressCoinsCoinConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetCoinsAddressCoinsCoinConnectionNodesCoin `json:"nodes"`
}

// GetPageInfo returns GetCoinsAddressCoinsCoinConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnection) GetPageInfo() GetCoinsAddressCoinsCoinConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetCoinsAddressCoinsCoinConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnection) GetNodes() []GetCoinsAddressCoinsCoinConnectionNodesCoin {
	return v.Nodes
}

// GetCoinsAddressCoinsCoinConnectionNodesCoin includes the requested fields of the GraphQL type Coin.
// The GraphQL type's documentation follows.
//
// Some 0x2::coin::Coin Move object.
type GetCoinsAddressCoinsCoinConnectionNodesCoin struct {
	// Balance of this coin object.
	CoinBalance sui.BigInt `json:"coinBalance"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue `json:"contents"`
	Address  sui.Address                                                  `json:"address"`
	Version  uint64                                                       `json:"version"`
	// 32-byte hash that identifies the object's contents, encoded as a Base58 string.
	Digest string `json:"digest"`
	// The transaction block that created this version of the object.
	PreviousTransactionBlock GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock `json:"previousTransactionBlock"`
}

// GetCoinBalance returns GetCoinsAddressCoinsCoinConnectionNodesCoin.CoinBalance, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetCoinBalance() sui.BigInt {
	return v.CoinBalance
}

// GetContents returns GetCoinsAddressCoinsCoinConnectionNodesCoin.Contents, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetContents() GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue {
	return v.Contents
}

// GetAddress returns GetCoinsAddressCoinsCoinConnectionNodesCoin.Address, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetAddress() sui.Address { return v.Address }

// GetVersion returns GetCoinsAddressCoinsCoinConnectionNodesCoin.Version, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetVersion() uint64 { return v.Version }

// GetDigest returns GetCoinsAddressCoinsCoinConnectionNodesCoin.Digest, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetDigest() string { return v.Digest }

// GetPreviousTransactionBlock returns GetCoinsAddressCoinsCoinConnectionNodesCoin.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoin) GetPreviousTransactionBlock() GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock {
	return v.PreviousTransactionBlock
}

// GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue struct {
	// The value's Move type.
	Type GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValue) GetType() GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType {
	return v.Type
}

// GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoinContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionNodesCoinPreviousTransactionBlock) GetDigest() string {
	return v.Digest
}

// GetCoinsAddressCoinsCoinConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetCoinsAddressCoinsCoinConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetCoinsAddressCoinsCoinConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns GetCoinsAddressCoinsCoinConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCoinsAddressCoinsCoinConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetCoinsResponse is returned by GetCoins on success.
type GetCoinsResponse struct {
	// Look-up an Account by its SuiAddress.
	Address GetCoinsAddress `json:"address"`
}

// GetAddress returns GetCoinsResponse.Address, and is useful for accessing the field via an interface.
func (v *GetCoinsResponse) GetAddress() GetCoinsAddress { return v.Address }

// GetCommitteeInfoEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type GetCommitteeInfoEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
	// Validator related properties, including the active validators.
	ValidatorSet GetCommitteeInfoEpochValidatorSet `json:"validatorSet"`
}

// GetEpochId returns GetCommitteeInfoEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpoch) GetEpochId() uint64 { return v.EpochId }

// GetValidatorSet returns GetCommitteeInfoEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpoch) GetValidatorSet() GetCommitteeInfoEpochValidatorSet {
	return v.ValidatorSet
}

// GetCommitteeInfoEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type GetCommitteeInfoEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
}

// GetActiveValidators returns GetCommitteeInfoEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSet) GetActiveValidators() GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	// Validator's set of credentials such as public keys, network addresses and others.
	Credentials GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials `json:"credentials"`
	// The voting power of this validator in basis points (e.g., 100 = 1% voting power).
	VotingPower int `json:"votingPower"`
}

// GetCredentials returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Credentials, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCredentials() GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials {
	return v.Credentials
}

// GetVotingPower returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.VotingPower, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetVotingPower() int {
	return v.VotingPower
}

// GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials includes the requested fields of the GraphQL type ValidatorCredentials.
// The GraphQL type's documentation follows.
//
// The credentials related fields associated with a validator.
type GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials struct {
	ProtocolPubKey sui.Base64 `json:"protocolPubKey"`
}

// GetProtocolPubKey returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials.ProtocolPubKey, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials) GetProtocolPubKey() sui.Base64 {
	return v.ProtocolPubKey
}

// GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetCommitteeInfoResponse is returned by GetCommitteeInfo on success.
type GetCommitteeInfoResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch GetCommitteeInfoEpoch `json:"epoch"`
}

// GetEpoch returns GetCommitteeInfoResponse.Epoch, and is useful for accessing the field via an interface.
func (v *GetCommitteeInfoResponse) GetEpoch() GetCommitteeInfoEpoch { return v.Epoch }

// GetCurrentEpochEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type GetCurrentEpochEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
	// Validator related properties, including the active validators.
	ValidatorSet GetCurrentEpochEpochValidatorSet `json:"validatorSet"`
	// The total number of transaction blocks in this epoch.
	TotalTransactions uint64 `json:"totalTransactions"`
	// The epoch's corresponding checkpoints.
	FirstCheckpoint GetCurrentEpochEpochFirstCheckpointCheckpointConnection `json:"firstCheckpoint"`
	// The epoch's starting timestamp.
	StartTimestamp time.Time `json:"startTimestamp"`
	// The epoch's ending timestamp.
	EndTimestamp time.Time `json:"endTimestamp"`
	// The minimum gas price that a quorum of validators are guaranteed to sign a transaction for.
	ReferenceGasPrice sui.BigInt `json:"referenceGasPrice"`
}

// GetEpochId returns GetCurrentEpochEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetEpochId() uint64 { return v.EpochId }

// GetValidatorSet returns GetCurrentEpochEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetValidatorSet() GetCurrentEpochEpochValidatorSet {
	return v.ValidatorSet
}

// GetTotalTransactions returns GetCurrentEpochEpoch.TotalTransactions, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetTotalTransactions() uint64 { return v.TotalTransactions }

// GetFirstCheckpoint returns GetCurrentEpochEpoch.FirstCheckpoint, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetFirstCheckpoint() GetCurrentEpochEpochFirstCheckpointCheckpointConnection {
	return v.FirstCheckpoint
}

// GetStartTimestamp returns GetCurrentEpochEpoch.StartTimestamp, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetStartTimestamp() time.Time { return v.StartTimestamp }

// GetEndTimestamp returns GetCurrentEpochEpoch.EndTimestamp, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetEndTimestamp() time.Time { return v.EndTimestamp }

// GetReferenceGasPrice returns GetCurrentEpochEpoch.ReferenceGasPrice, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpoch) GetReferenceGasPrice() sui.BigInt { return v.ReferenceGasPrice }

// GetCurrentEpochEpochFirstCheckpointCheckpointConnection includes the requested fields of the GraphQL type CheckpointConnection.
type GetCurrentEpochEpochFirstCheckpointCheckpointConnection struct {
	// A list of nodes.
	Nodes []GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint `json:"nodes"`
}

// GetNodes returns GetCurrentEpochEpochFirstCheckpointCheckpointConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochFirstCheckpointCheckpointConnection) GetNodes() []GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint {
	return v.Nodes
}

// GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint struct {
	// This checkpoint's position in the total order of finalized checkpoints, agreed upon by
	// consensus.
	SequenceNumber uint64 `json:"sequenceNumber"`
}

// GetSequenceNumber returns GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochFirstCheckpointCheckpointConnectionNodesCheckpoint) GetSequenceNumber() uint64 {
	return v.SequenceNumber
}

// GetCurrentEpochEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type GetCurrentEpochEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
}

// GetActiveValidators returns GetCurrentEpochEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSet) GetActiveValidators() GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	RPC_VALIDATOR_FIELDS `json:"-"`
}

// GetAtRisk returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.AtRisk, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAtRisk() uint64 {
	return v.RPC_VALIDATOR_FIELDS.AtRisk
}

// GetCommissionRate returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.CommissionRate, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.CommissionRate
}

// GetExchangeRatesSize returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRatesSize, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRatesSize() uint64 {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
}

// GetExchangeRates returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRates, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRates() RPC_VALIDATOR_FIELDSExchangeRatesMoveObject {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRates
}

// GetDescription returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Description, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetDescription() string {
	return v.RPC_VALIDATOR_FIELDS.Description
}

// GetGasPrice returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.GasPrice, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.GasPrice
}

// GetImageUrl returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ImageUrl, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetImageUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ImageUrl
}

// GetName returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Name, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetName() string {
	return v.RPC_VALIDATOR_FIELDS.Name
}

// GetCredentials returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Credentials, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCredentials() RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.Credentials
}

// GetNextEpochCommissionRate returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCommissionRate, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
}

// GetNextEpochGasPrice returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochGasPrice, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
}

// GetNextEpochCredentials returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCredentials, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCredentials() RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
}

// GetNextEpochStake returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochStake, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochStake
}

// GetOperationCap returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.OperationCap, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetOperationCap() RPC_VALIDATOR_FIELDSOperationCapMoveObject {
	return v.RPC_VALIDATOR_FIELDS.OperationCap
}

// GetPendingPoolTokenWithdraw returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingPoolTokenWithdraw, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingPoolTokenWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
}

// GetPendingStake returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingStake, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingStake
}

// GetPendingTotalSuiWithdraw returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingTotalSuiWithdraw, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingTotalSuiWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
}

// GetPoolTokenBalance returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PoolTokenBalance, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPoolTokenBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
}

// GetProjectUrl returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ProjectUrl, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetProjectUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ProjectUrl
}

// GetRewardsPool returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.RewardsPool, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetRewardsPool() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.RewardsPool
}

// GetStakingPool returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPool, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPool() RPC_VALIDATOR_FIELDSStakingPoolMoveObject {
	return v.RPC_VALIDATOR_FIELDS.StakingPool
}

// GetStakingPoolActivationEpoch returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolActivationEpoch, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolActivationEpoch() uint64 {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
}

// GetStakingPoolSuiBalance returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolSuiBalance, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolSuiBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
}

// GetAddress returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Address, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAddress() RPC_VALIDATOR_FIELDSAddress {
	return v.RPC_VALIDATOR_FIELDS.Address
}

// GetVotingPower returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.VotingPower, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetVotingPower() int {
	return v.RPC_VALIDATOR_FIELDS.VotingPower
}

func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_VALIDATOR_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	AtRisk uint64 `json:"atRisk"`

	CommissionRate int `json:"commissionRate"`

	ExchangeRatesSize uint64 `json:"exchangeRatesSize"`

	ExchangeRates RPC_VALIDATOR_FIELDSExchangeRatesMoveObject `json:"exchangeRates"`

	Description string `json:"description"`

	GasPrice sui.BigInt `json:"gasPrice"`

	ImageUrl string `json:"imageUrl"`

	Name string `json:"name"`

	Credentials RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials `json:"credentials"`

	NextEpochCommissionRate int `json:"nextEpochCommissionRate"`

	NextEpochGasPrice sui.BigInt `json:"nextEpochGasPrice"`

	NextEpochCredentials RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials `json:"nextEpochCredentials"`

	NextEpochStake sui.BigInt `json:"nextEpochStake"`

	OperationCap RPC_VALIDATOR_FIELDSOperationCapMoveObject `json:"operationCap"`

	PendingPoolTokenWithdraw sui.BigInt `json:"pendingPoolTokenWithdraw"`

	PendingStake sui.BigInt `json:"pendingStake"`

	PendingTotalSuiWithdraw sui.BigInt `json:"pendingTotalSuiWithdraw"`

	PoolTokenBalance sui.BigInt `json:"poolTokenBalance"`

	ProjectUrl string `json:"projectUrl"`

	RewardsPool sui.BigInt `json:"rewardsPool"`

	StakingPool RPC_VALIDATOR_FIELDSStakingPoolMoveObject `json:"stakingPool"`

	StakingPoolActivationEpoch uint64 `json:"stakingPoolActivationEpoch"`

	StakingPoolSuiBalance sui.BigInt `json:"stakingPoolSuiBalance"`

	Address RPC_VALIDATOR_FIELDSAddress `json:"address"`

	VotingPower int `json:"votingPower"`
}

func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) __premarshalJSON() (*__premarshalGetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator, error) {
	var retval __premarshalGetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator

	retval.AtRisk = v.RPC_VALIDATOR_FIELDS.AtRisk
	retval.CommissionRate = v.RPC_VALIDATOR_FIELDS.CommissionRate
	retval.ExchangeRatesSize = v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
	retval.ExchangeRates = v.RPC_VALIDATOR_FIELDS.ExchangeRates
	retval.Description = v.RPC_VALIDATOR_FIELDS.Description
	retval.GasPrice = v.RPC_VALIDATOR_FIELDS.GasPrice
	retval.ImageUrl = v.RPC_VALIDATOR_FIELDS.ImageUrl
	retval.Name = v.RPC_VALIDATOR_FIELDS.Name
	retval.Credentials = v.RPC_VALIDATOR_FIELDS.Credentials
	retval.NextEpochCommissionRate = v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
	retval.NextEpochGasPrice = v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
	retval.NextEpochCredentials = v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
	retval.NextEpochStake = v.RPC_VALIDATOR_FIELDS.NextEpochStake
	retval.OperationCap = v.RPC_VALIDATOR_FIELDS.OperationCap
	retval.PendingPoolTokenWithdraw = v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
	retval.PendingStake = v.RPC_VALIDATOR_FIELDS.PendingStake
	retval.PendingTotalSuiWithdraw = v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
	retval.PoolTokenBalance = v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
	retval.ProjectUrl = v.RPC_VALIDATOR_FIELDS.ProjectUrl
	retval.RewardsPool = v.RPC_VALIDATOR_FIELDS.RewardsPool
	retval.StakingPool = v.RPC_VALIDATOR_FIELDS.StakingPool
	retval.StakingPoolActivationEpoch = v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
	retval.StakingPoolSuiBalance = v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
	retval.Address = v.RPC_VALIDATOR_FIELDS.Address
	retval.VotingPower = v.RPC_VALIDATOR_FIELDS.VotingPower
	return &retval, nil
}

// GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetCurrentEpochResponse is returned by GetCurrentEpoch on success.
type GetCurrentEpochResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch GetCurrentEpochEpoch `json:"epoch"`
}

// GetEpoch returns GetCurrentEpochResponse.Epoch, and is useful for accessing the field via an interface.
func (v *GetCurrentEpochResponse) GetEpoch() GetCurrentEpochEpoch { return v.Epoch }

// GetDynamicFieldObjectOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type GetDynamicFieldObjectOwner struct {
	// Access a dynamic object field on an object using its name. Names are arbitrary Move values
	// whose type have `copy`, `drop`, and `store`, and are specified using their type, and their
	// BCS contents, Base64 encoded. The value of a dynamic object field can also be accessed
	// off-chain directly via its address (e.g. using `Query.object`).
	//
	// This field exists as a convenience when accessing a dynamic field on a wrapped object.
	DynamicObjectField GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField `json:"dynamicObjectField"`
}

// GetDynamicObjectField returns GetDynamicFieldObjectOwner.DynamicObjectField, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwner) GetDynamicObjectField() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField {
	return v.DynamicObjectField
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField includes the requested fields of the GraphQL type DynamicField.
// The GraphQL type's documentation follows.
//
// Dynamic fields are heterogeneous fields that can be added or removed at runtime,
// and can have arbitrary user-assigned names. There are two sub-types of dynamic
// fields:
//
// 1) Dynamic Fields can store any value that has the `store` ability, however an object
// stored in this kind of field will be considered wrapped and will not be accessible
// directly via its ID by external tools (explorers, wallets, etc) accessing storage.
// 2) Dynamic Object Fields values must be Sui objects (have the `key` and `store`
// abilities, and id: UID as the first field), but will still be directly accessible off-chain
// via their object ID after being attached.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField struct {
	// The returned dynamic field is an object if its return type is `MoveObject`,
	// in which case it is also accessible off-chain via its address. Its contents
	// will be from the latest version that is at most equal to its parent object's
	// version
	Value GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue `json:"-"`
}

// GetValue returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField.Value, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField) GetValue() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue {
	return v.Value
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField
		Value json.RawMessage `json:"value"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Value
		src := firstPass.Value
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField.Value: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField struct {
	Value json.RawMessage `json:"value"`
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField) __premarshalJSON() (*__premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField, error) {
	var retval __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField

	{

		dst := &retval.Value
		src := v.Value
		var err error
		*dst, err = __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicField.Value: %w", err)
		}
	}
	return &retval, nil
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue includes the requested fields of the GraphQL interface DynamicFieldValue.
//
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue is implemented by the following types:
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue interface {
	implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue() {
}

func __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue(b []byte, v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "MoveObject":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject)
		return json.Unmarshal(b, *v)
	case "MoveValue":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DynamicFieldValue.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue: "%v"`, tn.TypeName)
	}
}

func __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue(v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject:
		typename = "MoveObject"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject
		}{typename, premarshaled}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue:
		typename = "MoveValue"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValue: "%T"`, v)
	}
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject struct {
	Typename string `json:"__typename"`
	// The owner type of this object: Immutable, Shared, Parent, Address
	Owner GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner `json:"-"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) GetTypename() string {
	return v.Typename
}

// GetOwner returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject.Owner, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) GetOwner() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner {
	return v.Owner
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject struct {
	Typename string `json:"__typename"`

	Owner json.RawMessage `json:"owner"`
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject) __premarshalJSON() (*__premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject, error) {
	var retval __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject

	retval.Typename = v.Typename
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObject.Owner: %w", err)
		}
	}
	return &retval, nil
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner includes the requested fields of the GraphQL interface ObjectOwner.
//
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner is implemented by the following types:
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner interface {
	implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner() {
}

func __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner(b []byte, v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddressOwner":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner)
		return json.Unmarshal(b, *v)
	case "ConsensusV2":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2)
		return json.Unmarshal(b, *v)
	case "Immutable":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable)
		return json.Unmarshal(b, *v)
	case "Parent":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent)
		return json.Unmarshal(b, *v)
	case "Shared":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ObjectOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner: "%v"`, tn.TypeName)
	}
}

func __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner(v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner:
		typename = "AddressOwner"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2:
		typename = "ConsensusV2"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable:
		typename = "Immutable"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent:
		typename = "Parent"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared:
		typename = "Shared"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwner: "%T"`, v)
	}
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner includes the requested fields of the GraphQL type AddressOwner.
// The GraphQL type's documentation follows.
//
// An address-owned object is owned by a specific 32-byte address that is
// either an account address (derived from a particular signature scheme) or
// an object ID. An address-owned object is accessible only to its owner and no others.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerAddressOwner) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2 includes the requested fields of the GraphQL type ConsensusV2.
// The GraphQL type's documentation follows.
//
// A ConsensusV2 object is an object that is automatically versioned by the consensus protocol
// and allows different authentication modes based on the chosen authenticator.
// (Initially, only single-owner authentication is supported.)
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2 struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerConsensusV2) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable includes the requested fields of the GraphQL type Immutable.
// The GraphQL type's documentation follows.
//
// An immutable object is an object that can't be mutated, transferred, or deleted.
// Immutable objects have no owner, so anyone can use them.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerImmutable) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent includes the requested fields of the GraphQL type Parent.
// The GraphQL type's documentation follows.
//
// If the object's owner is a Parent, this object is part of a dynamic field (it is the value of
// the dynamic field, or the intermediate Field object itself), and it is owned by another object.
//
// Although its owner is guaranteed to be an object, it is exposed as an Owner, as the parent
// object could be wrapped and therefore not directly accessible.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent struct {
	Typename string                                                                                        `json:"__typename"`
	Parent   GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner `json:"parent"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent) GetTypename() string {
	return v.Typename
}

// GetParent returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent.Parent, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParent) GetParent() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner {
	return v.Parent
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner struct {
	AsObject GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject `json:"asObject"`
}

// GetAsObject returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner.AsObject, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwner) GetAsObject() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject {
	return v.AsObject
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject struct {
	Address sui.Address `json:"address"`
	// 32-byte hash that identifies the object's current contents, encoded as a Base58 string.
	Digest  string `json:"digest"`
	Version uint64 `json:"version"`
	// The amount of SUI we would rebate if this object gets deleted or mutated. This number is
	// recalculated based on the present storage gas price.
	StorageRebate sui.BigInt `json:"storageRebate"`
	// The owner type of this object: Immutable, Shared, Parent, Address
	// Immutable and Shared Objects do not have owners.
	Owner GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner `json:"-"`
	// The transaction block that created this version of the object.
	PreviousTransactionBlock GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock `json:"previousTransactionBlock"`
	// Attempts to convert the object into a MoveObject
	AsMoveObject GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject `json:"asMoveObject"`
}

// GetAddress returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Address, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetAddress() sui.Address {
	return v.Address
}

// GetDigest returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Digest, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetDigest() string {
	return v.Digest
}

// GetVersion returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Version, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetVersion() uint64 {
	return v.Version
}

// GetStorageRebate returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.StorageRebate, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetStorageRebate() sui.BigInt {
	return v.StorageRebate
}

// GetOwner returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Owner, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetOwner() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner {
	return v.Owner
}

// GetPreviousTransactionBlock returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetPreviousTransactionBlock() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock {
	return v.PreviousTransactionBlock
}

// GetAsMoveObject returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) GetAsMoveObject() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject {
	return v.AsMoveObject
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject struct {
	Address sui.Address `json:"address"`

	Digest string `json:"digest"`

	Version uint64 `json:"version"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock `json:"previousTransactionBlock"`

	AsMoveObject GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject `json:"asMoveObject"`
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject) __premarshalJSON() (*__premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject, error) {
	var retval __premarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject

	retval.Address = v.Address
	retval.Digest = v.Digest
	retval.Version = v.Version
	retval.StorageRebate = v.StorageRebate
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObject.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.PreviousTransactionBlock
	retval.AsMoveObject = v.AsMoveObject
	return &retval, nil
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue `json:"contents"`
	// Determines whether a transaction can transfer this object, using the TransferObjects
	// transaction command or `sui::transfer::public_transfer`, both of which require the object to
	// have the `key` and `store` abilities.
	HasPublicTransfer bool `json:"hasPublicTransfer"`
}

// GetContents returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject) GetContents() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue {
	return v.Contents
}

// GetHasPublicTransfer returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject.HasPublicTransfer, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObject) GetHasPublicTransfer() bool {
	return v.HasPublicTransfer
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue struct {
	// Structured contents of a Move value.
	Data json.RawMessage `json:"data"`
	// The value's Move type.
	Type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetData returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue.Data, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue) GetData() json.RawMessage {
	return v.Data
}

// GetType returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValue) GetType() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
	// Structured representation of the "shape" of values that match this type. May return no
	// layout if the type is invalid.
	Layout string `json:"layout"`
}

// GetRepr returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetLayout returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType.Layout, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectAsMoveObjectContentsMoveValueTypeMoveType) GetLayout() string {
	return v.Layout
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner includes the requested fields of the GraphQL interface ObjectOwner.
//
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner is implemented by the following types:
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent
// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner interface {
	implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner() {
}
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared) implementsGraphQLInterfaceGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner() {
}

func __unmarshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner(b []byte, v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddressOwner":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner)
		return json.Unmarshal(b, *v)
	case "ConsensusV2":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2)
		return json.Unmarshal(b, *v)
	case "Immutable":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable)
		return json.Unmarshal(b, *v)
	case "Parent":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent)
		return json.Unmarshal(b, *v)
	case "Shared":
		*v = new(GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ObjectOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner: "%v"`, tn.TypeName)
	}
}

func __marshalGetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner(v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner:
		typename = "AddressOwner"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2:
		typename = "ConsensusV2"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable:
		typename = "Immutable"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent:
		typename = "Parent"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared:
		typename = "Shared"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwner: "%T"`, v)
	}
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner includes the requested fields of the GraphQL type AddressOwner.
// The GraphQL type's documentation follows.
//
// An address-owned object is owned by a specific 32-byte address that is
// either an account address (derived from a particular signature scheme) or
// an object ID. An address-owned object is accessible only to its owner and no others.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerAddressOwner) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2 includes the requested fields of the GraphQL type ConsensusV2.
// The GraphQL type's documentation follows.
//
// A ConsensusV2 object is an object that is automatically versioned by the consensus protocol
// and allows different authentication modes based on the chosen authenticator.
// (Initially, only single-owner authentication is supported.)
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2 struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerConsensusV2) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable includes the requested fields of the GraphQL type Immutable.
// The GraphQL type's documentation follows.
//
// An immutable object is an object that can't be mutated, transferred, or deleted.
// Immutable objects have no owner, so anyone can use them.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerImmutable) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent includes the requested fields of the GraphQL type Parent.
// The GraphQL type's documentation follows.
//
// If the object's owner is a Parent, this object is part of a dynamic field (it is the value of
// the dynamic field, or the intermediate Field object itself), and it is owned by another object.
//
// Although its owner is guaranteed to be an object, it is exposed as an Owner, as the parent
// object could be wrapped and therefore not directly accessible.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent struct {
	Typename string                                                                                                                      `json:"__typename"`
	Parent   GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner `json:"parent"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent) GetTypename() string {
	return v.Typename
}

// GetParent returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent.Parent, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParent) GetParent() GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner {
	return v.Parent
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner.Address, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerParentParentOwner) GetAddress() sui.Address {
	return v.Address
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared includes the requested fields of the GraphQL type Shared.
// The GraphQL type's documentation follows.
//
// A shared object is an object that is shared using the 0x2::transfer::share_object function.
// Unlike owned objects, once an object is shared, it stays mutable and is accessible by anyone.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectOwnerShared) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerParentParentOwnerAsObjectPreviousTransactionBlock) GetDigest() string {
	return v.Digest
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared includes the requested fields of the GraphQL type Shared.
// The GraphQL type's documentation follows.
//
// A shared object is an object that is shared using the 0x2::transfer::share_object function.
// Unlike owned objects, once an object is shared, it stays mutable and is accessible by anyone.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveObjectOwnerShared) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectOwnerDynamicObjectFieldDynamicFieldValueMoveValue) GetTypename() string {
	return v.Typename
}

// GetDynamicFieldObjectResponse is returned by GetDynamicFieldObject on success.
type GetDynamicFieldObjectResponse struct {
	// Look up an Owner by its SuiAddress.
	//
	// `rootVersion` represents the version of the root object in some nested chain of dynamic
	// fields. It allows consistent historical queries for the case of wrapped objects, which don't
	// have a version. For example, if querying the dynamic field of a table wrapped in a parent
	// object, passing the parent object's version here will ensure we get the dynamic field's
	// state at the moment that parent's version was created.
	//
	// Also, if this Owner is an object itself, `rootVersion` will be used to bound its version
	// from above when querying `Owner.asObject`. This can be used, for example, to get the
	// contents of a dynamic object field when its parent was at `rootVersion`.
	//
	// If `rootVersion` is omitted, dynamic fields will be from a consistent snapshot of the Sui
	// state at the latest checkpoint known to the GraphQL RPC. Similarly, `Owner.asObject` will
	// return the object's version at the latest checkpoint.
	Owner GetDynamicFieldObjectOwner `json:"owner"`
}

// GetOwner returns GetDynamicFieldObjectResponse.Owner, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldObjectResponse) GetOwner() GetDynamicFieldObjectOwner { return v.Owner }

// GetDynamicFieldsOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type GetDynamicFieldsOwner struct {
	// The dynamic fields and dynamic object fields on an object.
	//
	// This field exists as a convenience when accessing a dynamic field on a wrapped object.
	DynamicFields GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection `json:"dynamicFields"`
}

// GetDynamicFields returns GetDynamicFieldsOwner.DynamicFields, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwner) GetDynamicFields() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection {
	return v.DynamicFields
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection includes the requested fields of the GraphQL type DynamicFieldConnection.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection struct {
	// Information to aid in pagination.
	PageInfo GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField `json:"nodes"`
}

// GetPageInfo returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection) GetPageInfo() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnection) GetNodes() []GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField {
	return v.Nodes
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField includes the requested fields of the GraphQL type DynamicField.
// The GraphQL type's documentation follows.
//
// Dynamic fields are heterogeneous fields that can be added or removed at runtime,
// and can have arbitrary user-assigned names. There are two sub-types of dynamic
// fields:
//
// 1) Dynamic Fields can store any value that has the `store` ability, however an object
// stored in this kind of field will be considered wrapped and will not be accessible
// directly via its ID by external tools (explorers, wallets, etc) accessing storage.
// 2) Dynamic Object Fields values must be Sui objects (have the `key` and `store`
// abilities, and id: UID as the first field), but will still be directly accessible off-chain
// via their object ID after being attached.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField struct {
	// The string type, data, and serialized value of the DynamicField's 'name' field.
	// This field is used to uniquely identify a child of the parent object.
	Name GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue `json:"name"`
	// The returned dynamic field is an object if its return type is `MoveObject`,
	// in which case it is also accessible off-chain via its address. Its contents
	// will be from the latest version that is at most equal to its parent object's
	// version
	Value GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue `json:"-"`
}

// GetName returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Name, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) GetName() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue {
	return v.Name
}

// GetValue returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) GetValue() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue {
	return v.Value
}

func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField
		Value json.RawMessage `json:"value"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Value
		src := firstPass.Value
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField struct {
	Name GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue `json:"name"`

	Value json.RawMessage `json:"value"`
}

func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField) __premarshalJSON() (*__premarshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField, error) {
	var retval __premarshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField

	retval.Name = v.Name
	{

		dst := &retval.Value
		src := v.Value
		var err error
		*dst, err = __marshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicField.Value: %w", err)
		}
	}
	return &retval, nil
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue struct {
	// The BCS representation of this value, Base64 encoded.
	Bcs sui.Base64 `json:"bcs"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
	// The value's Move type.
	Type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType `json:"type"`
}

// GetBcs returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue.Bcs, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) GetBcs() sui.Base64 {
	return v.Bcs
}

// GetJson returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue.Json, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) GetJson() json.RawMessage {
	return v.Json
}

// GetType returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValue) GetType() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType {
	return v.Type
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType struct {
	// Structured representation of the "shape" of values that match this type. May return no
	// layout if the type is invalid.
	Layout string `json:"layout"`
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetLayout returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType.Layout, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType) GetLayout() string {
	return v.Layout
}

// GetRepr returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldNameMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue includes the requested fields of the GraphQL interface DynamicFieldValue.
//
// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue is implemented by the following types:
// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject
// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue interface {
	implementsGraphQLInterfaceGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) implementsGraphQLInterfaceGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue() {
}
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) implementsGraphQLInterfaceGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue() {
}

func __unmarshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(b []byte, v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "MoveObject":
		*v = new(GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject)
		return json.Unmarshal(b, *v)
	case "MoveValue":
		*v = new(GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DynamicFieldValue.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue: "%v"`, tn.TypeName)
	}
}

func __marshalGetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue(v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject:
		typename = "MoveObject"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject
		}{typename, v}
		return json.Marshal(result)
	case *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue:
		typename = "MoveValue"

		result := struct {
			TypeName string `json:"__typename"`
			*GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValue: "%T"`, v)
	}
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject struct {
	Typename string `json:"__typename"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue `json:"contents"`
	Address  sui.Address                                                                                               `json:"address"`
	// 32-byte hash that identifies the object's contents, encoded as a Base58 string.
	Digest  string `json:"digest"`
	Version uint64 `json:"version"`
}

// GetTypename returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetTypename() string {
	return v.Typename
}

// GetContents returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetContents() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue {
	return v.Contents
}

// GetAddress returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Address, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetAddress() sui.Address {
	return v.Address
}

// GetDigest returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Digest, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetDigest() string {
	return v.Digest
}

// GetVersion returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject.Version, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObject) GetVersion() uint64 {
	return v.Version
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType `json:"type"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
}

// GetType returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue) GetType() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// GetJson returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue.Json, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValue) GetJson() json.RawMessage {
	return v.Json
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue includes the requested fields of the GraphQL type MoveValue.
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue struct {
	Typename string `json:"__typename"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
	// The value's Move type.
	Type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType `json:"type"`
}

// GetTypename returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Typename, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetTypename() string {
	return v.Typename
}

// GetJson returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Json, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetJson() json.RawMessage {
	return v.Json
}

// GetType returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue.Type, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValue) GetType() GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType {
	return v.Type
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionNodesDynamicFieldValueMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsOwnerDynamicFieldsDynamicFieldConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetDynamicFieldsResponse is returned by GetDynamicFields on success.
type GetDynamicFieldsResponse struct {
	// Look up an Owner by its SuiAddress.
	//
	// `rootVersion` represents the version of the root object in some nested chain of dynamic
	// fields. It allows consistent historical queries for the case of wrapped objects, which don't
	// have a version. For example, if querying the dynamic field of a table wrapped in a parent
	// object, passing the parent object's version here will ensure we get the dynamic field's
	// state at the moment that parent's version was created.
	//
	// Also, if this Owner is an object itself, `rootVersion` will be used to bound its version
	// from above when querying `Owner.asObject`. This can be used, for example, to get the
	// contents of a dynamic object field when its parent was at `rootVersion`.
	//
	// If `rootVersion` is omitted, dynamic fields will be from a consistent snapshot of the Sui
	// state at the latest checkpoint known to the GraphQL RPC. Similarly, `Owner.asObject` will
	// return the object's version at the latest checkpoint.
	Owner GetDynamicFieldsOwner `json:"owner"`
}

// GetOwner returns GetDynamicFieldsResponse.Owner, and is useful for accessing the field via an interface.
func (v *GetDynamicFieldsResponse) GetOwner() GetDynamicFieldsOwner { return v.Owner }

// GetLatestCheckpointSequenceNumberCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type GetLatestCheckpointSequenceNumberCheckpoint struct {
	// This checkpoint's position in the total order of finalized checkpoints, agreed upon by
	// consensus.
	SequenceNumber uint64 `json:"sequenceNumber"`
}

// GetSequenceNumber returns GetLatestCheckpointSequenceNumberCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *GetLatestCheckpointSequenceNumberCheckpoint) GetSequenceNumber() uint64 {
	return v.SequenceNumber
}

// GetLatestCheckpointSequenceNumberResponse is returned by GetLatestCheckpointSequenceNumber on success.
type GetLatestCheckpointSequenceNumberResponse struct {
	// Fetch checkpoint information by sequence number or digest (defaults to the latest available
	// checkpoint).
	Checkpoint GetLatestCheckpointSequenceNumberCheckpoint `json:"checkpoint"`
}

// GetCheckpoint returns GetLatestCheckpointSequenceNumberResponse.Checkpoint, and is useful for accessing the field via an interface.
func (v *GetLatestCheckpointSequenceNumberResponse) GetCheckpoint() GetLatestCheckpointSequenceNumberCheckpoint {
	return v.Checkpoint
}

// GetLatestSuiSystemStateEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type GetLatestSuiSystemStateEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
	// The epoch's starting timestamp.
	StartTimestamp time.Time `json:"startTimestamp"`
	// The epoch's ending timestamp.
	EndTimestamp time.Time `json:"endTimestamp"`
	// The minimum gas price that a quorum of validators are guaranteed to sign a transaction for.
	ReferenceGasPrice sui.BigInt `json:"referenceGasPrice"`
	// Information about whether this epoch was started in safe mode, which happens if the full epoch
	// change logic fails for some reason.
	SafeMode GetLatestSuiSystemStateEpochSafeMode `json:"safeMode"`
	// Parameters related to the subsidy that supplements staking rewards
	SystemStakeSubsidy GetLatestSuiSystemStateEpochSystemStakeSubsidy `json:"systemStakeSubsidy"`
	// SUI set aside to account for objects stored on-chain, at the start of the epoch.
	// This is also used for storage rebates.
	StorageFund GetLatestSuiSystemStateEpochStorageFund `json:"storageFund"`
	// The value of the `version` field of `0x5`, the `0x3::sui::SuiSystemState` object.  This
	// version changes whenever the fields contained in the system state object (held in a dynamic
	// field attached to `0x5`) change.
	SystemStateVersion uint64 `json:"systemStateVersion"`
	// Details of the system that are decided during genesis.
	SystemParameters GetLatestSuiSystemStateEpochSystemParameters `json:"systemParameters"`
	// The epoch's corresponding protocol configuration, including the feature flags and the
	// configuration options.
	ProtocolConfigs GetLatestSuiSystemStateEpochProtocolConfigs `json:"protocolConfigs"`
	// Validator related properties, including the active validators.
	ValidatorSet GetLatestSuiSystemStateEpochValidatorSet `json:"validatorSet"`
}

// GetEpochId returns GetLatestSuiSystemStateEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetEpochId() uint64 { return v.EpochId }

// GetStartTimestamp returns GetLatestSuiSystemStateEpoch.StartTimestamp, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetStartTimestamp() time.Time { return v.StartTimestamp }

// GetEndTimestamp returns GetLatestSuiSystemStateEpoch.EndTimestamp, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetEndTimestamp() time.Time { return v.EndTimestamp }

// GetReferenceGasPrice returns GetLatestSuiSystemStateEpoch.ReferenceGasPrice, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetReferenceGasPrice() sui.BigInt { return v.ReferenceGasPrice }

// GetSafeMode returns GetLatestSuiSystemStateEpoch.SafeMode, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetSafeMode() GetLatestSuiSystemStateEpochSafeMode {
	return v.SafeMode
}

// GetSystemStakeSubsidy returns GetLatestSuiSystemStateEpoch.SystemStakeSubsidy, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetSystemStakeSubsidy() GetLatestSuiSystemStateEpochSystemStakeSubsidy {
	return v.SystemStakeSubsidy
}

// GetStorageFund returns GetLatestSuiSystemStateEpoch.StorageFund, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetStorageFund() GetLatestSuiSystemStateEpochStorageFund {
	return v.StorageFund
}

// GetSystemStateVersion returns GetLatestSuiSystemStateEpoch.SystemStateVersion, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetSystemStateVersion() uint64 { return v.SystemStateVersion }

// GetSystemParameters returns GetLatestSuiSystemStateEpoch.SystemParameters, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetSystemParameters() GetLatestSuiSystemStateEpochSystemParameters {
	return v.SystemParameters
}

// GetProtocolConfigs returns GetLatestSuiSystemStateEpoch.ProtocolConfigs, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetProtocolConfigs() GetLatestSuiSystemStateEpochProtocolConfigs {
	return v.ProtocolConfigs
}

// GetValidatorSet returns GetLatestSuiSystemStateEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpoch) GetValidatorSet() GetLatestSuiSystemStateEpochValidatorSet {
	return v.ValidatorSet
}

// GetLatestSuiSystemStateEpochProtocolConfigs includes the requested fields of the GraphQL type ProtocolConfigs.
// The GraphQL type's documentation follows.
//
// Constants that control how the chain operates.
//
// These can only change during protocol upgrades which happen on epoch boundaries.
type GetLatestSuiSystemStateEpochProtocolConfigs struct {
	// The protocol is not required to change on every epoch boundary, so the protocol version
	// tracks which change to the protocol these configs are from.
	ProtocolVersion uint64 `json:"protocolVersion"`
}

// GetProtocolVersion returns GetLatestSuiSystemStateEpochProtocolConfigs.ProtocolVersion, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochProtocolConfigs) GetProtocolVersion() uint64 {
	return v.ProtocolVersion
}

// GetLatestSuiSystemStateEpochSafeMode includes the requested fields of the GraphQL type SafeMode.
// The GraphQL type's documentation follows.
//
// Information about whether epoch changes are using safe mode.
type GetLatestSuiSystemStateEpochSafeMode struct {
	// Whether safe mode was used for the last epoch change.  The system will retry a full epoch
	// change on every epoch boundary and automatically reset this flag if so.
	Enabled bool `json:"enabled"`
	// Accumulated fees for computation and cost that have not been added to the various reward
	// pools, because the full epoch change did not happen.
	GasSummary GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary `json:"gasSummary"`
}

// GetEnabled returns GetLatestSuiSystemStateEpochSafeMode.Enabled, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeMode) GetEnabled() bool { return v.Enabled }

// GetGasSummary returns GetLatestSuiSystemStateEpochSafeMode.GasSummary, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeMode) GetGasSummary() GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary {
	return v.GasSummary
}

// GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary includes the requested fields of the GraphQL type GasCostSummary.
// The GraphQL type's documentation follows.
//
// Breakdown of gas costs in effects.
type GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary struct {
	// Gas paid for executing this transaction (in MIST).
	ComputationCost sui.BigInt `json:"computationCost"`
	// Part of storage cost that is not reclaimed when data created by this transaction is cleaned
	// up (in MIST).
	NonRefundableStorageFee sui.BigInt `json:"nonRefundableStorageFee"`
	// Gas paid for the data stored on-chain by this transaction (in MIST).
	StorageCost sui.BigInt `json:"storageCost"`
	// Part of storage cost that can be reclaimed by cleaning up data created by this transaction
	// (when objects are deleted or an object is modified, which is treated as a deletion followed
	// by a creation) (in MIST).
	StorageRebate sui.BigInt `json:"storageRebate"`
}

// GetComputationCost returns GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary.ComputationCost, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary) GetComputationCost() sui.BigInt {
	return v.ComputationCost
}

// GetNonRefundableStorageFee returns GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary.NonRefundableStorageFee, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary) GetNonRefundableStorageFee() sui.BigInt {
	return v.NonRefundableStorageFee
}

// GetStorageCost returns GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary.StorageCost, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary) GetStorageCost() sui.BigInt {
	return v.StorageCost
}

// GetStorageRebate returns GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary.StorageRebate, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSafeModeGasSummaryGasCostSummary) GetStorageRebate() sui.BigInt {
	return v.StorageRebate
}

// GetLatestSuiSystemStateEpochStorageFund includes the requested fields of the GraphQL type StorageFund.
// The GraphQL type's documentation follows.
//
// SUI set aside to account for objects stored on-chain.
type GetLatestSuiSystemStateEpochStorageFund struct {
	// The portion of the storage fund that will never be refunded through storage rebates.
	//
	// The system maintains an invariant that the sum of all storage fees into the storage fund is
	// equal to the sum of of all storage rebates out, the total storage rebates remaining, and the
	// non-refundable balance.
	NonRefundableBalance sui.BigInt `json:"nonRefundableBalance"`
	// Sum of storage rebates of live objects on chain.
	TotalObjectStorageRebates sui.BigInt `json:"totalObjectStorageRebates"`
}

// GetNonRefundableBalance returns GetLatestSuiSystemStateEpochStorageFund.NonRefundableBalance, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochStorageFund) GetNonRefundableBalance() sui.BigInt {
	return v.NonRefundableBalance
}

// GetTotalObjectStorageRebates returns GetLatestSuiSystemStateEpochStorageFund.TotalObjectStorageRebates, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochStorageFund) GetTotalObjectStorageRebates() sui.BigInt {
	return v.TotalObjectStorageRebates
}

// GetLatestSuiSystemStateEpochSystemParameters includes the requested fields of the GraphQL type SystemParameters.
// The GraphQL type's documentation follows.
//
// Details of the system that are decided during genesis.
type GetLatestSuiSystemStateEpochSystemParameters struct {
	// The minimum number of active validators that the system supports.
	MinValidatorCount int `json:"minValidatorCount"`
	// The maximum number of active validators that the system supports.
	MaxValidatorCount int `json:"maxValidatorCount"`
	// Minimum stake needed to become a new validator.
	MinValidatorJoiningStake sui.BigInt `json:"minValidatorJoiningStake"`
	// Target duration of an epoch, in milliseconds.
	DurationMs sui.BigInt `json:"durationMs"`
	// Validators with stake below this threshold will enter the grace period (see
	// `validatorLowStakeGracePeriod`), after which they are removed from the active validator set.
	ValidatorLowStakeThreshold sui.BigInt `json:"validatorLowStakeThreshold"`
	// The number of epochs that a validator has to recover from having less than
	// `validatorLowStakeThreshold` stake.
	ValidatorLowStakeGracePeriod sui.BigInt `json:"validatorLowStakeGracePeriod"`
	// Validators with stake below this threshold will be removed from the active validator set
	// at the next epoch boundary, without a grace period.
	ValidatorVeryLowStakeThreshold sui.BigInt `json:"validatorVeryLowStakeThreshold"`
	// The epoch at which stake subsidies start being paid out.
	StakeSubsidyStartEpoch uint64 `json:"stakeSubsidyStartEpoch"`
}

// GetMinValidatorCount returns GetLatestSuiSystemStateEpochSystemParameters.MinValidatorCount, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetMinValidatorCount() int {
	return v.MinValidatorCount
}

// GetMaxValidatorCount returns GetLatestSuiSystemStateEpochSystemParameters.MaxValidatorCount, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetMaxValidatorCount() int {
	return v.MaxValidatorCount
}

// GetMinValidatorJoiningStake returns GetLatestSuiSystemStateEpochSystemParameters.MinValidatorJoiningStake, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetMinValidatorJoiningStake() sui.BigInt {
	return v.MinValidatorJoiningStake
}

// GetDurationMs returns GetLatestSuiSystemStateEpochSystemParameters.DurationMs, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetDurationMs() sui.BigInt {
	return v.DurationMs
}

// GetValidatorLowStakeThreshold returns GetLatestSuiSystemStateEpochSystemParameters.ValidatorLowStakeThreshold, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetValidatorLowStakeThreshold() sui.BigInt {
	return v.ValidatorLowStakeThreshold
}

// GetValidatorLowStakeGracePeriod returns GetLatestSuiSystemStateEpochSystemParameters.ValidatorLowStakeGracePeriod, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetValidatorLowStakeGracePeriod() sui.BigInt {
	return v.ValidatorLowStakeGracePeriod
}

// GetValidatorVeryLowStakeThreshold returns GetLatestSuiSystemStateEpochSystemParameters.ValidatorVeryLowStakeThreshold, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetValidatorVeryLowStakeThreshold() sui.BigInt {
	return v.ValidatorVeryLowStakeThreshold
}

// GetStakeSubsidyStartEpoch returns GetLatestSuiSystemStateEpochSystemParameters.StakeSubsidyStartEpoch, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemParameters) GetStakeSubsidyStartEpoch() uint64 {
	return v.StakeSubsidyStartEpoch
}

// GetLatestSuiSystemStateEpochSystemStakeSubsidy includes the requested fields of the GraphQL type StakeSubsidy.
// The GraphQL type's documentation follows.
//
// Parameters that control the distribution of the stake subsidy.
type GetLatestSuiSystemStateEpochSystemStakeSubsidy struct {
	// SUI set aside for stake subsidies -- reduces over time as stake subsidies are paid out over
	// time.
	Balance sui.BigInt `json:"balance"`
	// Amount of stake subsidy deducted from the balance per distribution -- decays over time.
	CurrentDistributionAmount sui.BigInt `json:"currentDistributionAmount"`
	// Percentage of the current distribution amount to deduct at the end of the current subsidy
	// period, expressed in basis points.
	DecreaseRate int `json:"decreaseRate"`
	// Number of times stake subsidies have been distributed subsidies are distributed with other
	// staking rewards, at the end of the epoch.
	DistributionCounter int `json:"distributionCounter"`
	// Maximum number of stake subsidy distributions that occur with the same distribution amount
	// (before the amount is reduced).
	PeriodLength int `json:"periodLength"`
}

// GetBalance returns GetLatestSuiSystemStateEpochSystemStakeSubsidy.Balance, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemStakeSubsidy) GetBalance() sui.BigInt { return v.Balance }

// GetCurrentDistributionAmount returns GetLatestSuiSystemStateEpochSystemStakeSubsidy.CurrentDistributionAmount, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemStakeSubsidy) GetCurrentDistributionAmount() sui.BigInt {
	return v.CurrentDistributionAmount
}

// GetDecreaseRate returns GetLatestSuiSystemStateEpochSystemStakeSubsidy.DecreaseRate, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemStakeSubsidy) GetDecreaseRate() int { return v.DecreaseRate }

// GetDistributionCounter returns GetLatestSuiSystemStateEpochSystemStakeSubsidy.DistributionCounter, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemStakeSubsidy) GetDistributionCounter() int {
	return v.DistributionCounter
}

// GetPeriodLength returns GetLatestSuiSystemStateEpochSystemStakeSubsidy.PeriodLength, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochSystemStakeSubsidy) GetPeriodLength() int { return v.PeriodLength }

// GetLatestSuiSystemStateEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type GetLatestSuiSystemStateEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
	// Size of the inactive pools `Table`.
	InactivePoolsSize int `json:"inactivePoolsSize"`
	// Size of the pending active validators table.
	PendingActiveValidatorsSize int `json:"pendingActiveValidatorsSize"`
	// Size of the stake pool mappings `Table`.
	StakingPoolMappingsSize int `json:"stakingPoolMappingsSize"`
	// Size of the validator candidates `Table`.
	ValidatorCandidatesSize int `json:"validatorCandidatesSize"`
	// Validators that are pending removal from the active validator set, expressed as indices in
	// to `activeValidators`.
	PendingRemovals []int `json:"pendingRemovals"`
	// Total amount of stake for all active validators at the beginning of the epoch.
	TotalStake sui.BigInt `json:"totalStake"`
	// Object ID of the `Table` storing the mapping from staking pool ids to the addresses
	// of the corresponding validators. This is needed because a validator's address
	// can potentially change but the object ID of its pool will not.
	StakingPoolMappingsId sui.Address `json:"stakingPoolMappingsId"`
	// Object ID of the wrapped object `TableVec` storing the pending active validators.
	PendingActiveValidatorsId sui.Address `json:"pendingActiveValidatorsId"`
	// Object ID of the `Table` storing the validator candidates.
	ValidatorCandidatesId sui.Address `json:"validatorCandidatesId"`
	// Object ID of the `Table` storing the inactive staking pools.
	InactivePoolsId sui.Address `json:"inactivePoolsId"`
}

// GetActiveValidators returns GetLatestSuiSystemStateEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetActiveValidators() GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// GetInactivePoolsSize returns GetLatestSuiSystemStateEpochValidatorSet.InactivePoolsSize, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetInactivePoolsSize() int {
	return v.InactivePoolsSize
}

// GetPendingActiveValidatorsSize returns GetLatestSuiSystemStateEpochValidatorSet.PendingActiveValidatorsSize, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetPendingActiveValidatorsSize() int {
	return v.PendingActiveValidatorsSize
}

// GetStakingPoolMappingsSize returns GetLatestSuiSystemStateEpochValidatorSet.StakingPoolMappingsSize, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetStakingPoolMappingsSize() int {
	return v.StakingPoolMappingsSize
}

// GetValidatorCandidatesSize returns GetLatestSuiSystemStateEpochValidatorSet.ValidatorCandidatesSize, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetValidatorCandidatesSize() int {
	return v.ValidatorCandidatesSize
}

// GetPendingRemovals returns GetLatestSuiSystemStateEpochValidatorSet.PendingRemovals, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetPendingRemovals() []int {
	return v.PendingRemovals
}

// GetTotalStake returns GetLatestSuiSystemStateEpochValidatorSet.TotalStake, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetTotalStake() sui.BigInt { return v.TotalStake }

// GetStakingPoolMappingsId returns GetLatestSuiSystemStateEpochValidatorSet.StakingPoolMappingsId, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetStakingPoolMappingsId() sui.Address {
	return v.StakingPoolMappingsId
}

// GetPendingActiveValidatorsId returns GetLatestSuiSystemStateEpochValidatorSet.PendingActiveValidatorsId, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetPendingActiveValidatorsId() sui.Address {
	return v.PendingActiveValidatorsId
}

// GetValidatorCandidatesId returns GetLatestSuiSystemStateEpochValidatorSet.ValidatorCandidatesId, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetValidatorCandidatesId() sui.Address {
	return v.ValidatorCandidatesId
}

// GetInactivePoolsId returns GetLatestSuiSystemStateEpochValidatorSet.InactivePoolsId, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSet) GetInactivePoolsId() sui.Address {
	return v.InactivePoolsId
}

// GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	RPC_VALIDATOR_FIELDS `json:"-"`
}

// GetAtRisk returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.AtRisk, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAtRisk() uint64 {
	return v.RPC_VALIDATOR_FIELDS.AtRisk
}

// GetCommissionRate returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.CommissionRate, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.CommissionRate
}

// GetExchangeRatesSize returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRatesSize, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRatesSize() uint64 {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
}

// GetExchangeRates returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRates, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRates() RPC_VALIDATOR_FIELDSExchangeRatesMoveObject {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRates
}

// GetDescription returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Description, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetDescription() string {
	return v.RPC_VALIDATOR_FIELDS.Description
}

// GetGasPrice returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.GasPrice, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.GasPrice
}

// GetImageUrl returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ImageUrl, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetImageUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ImageUrl
}

// GetName returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Name, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetName() string {
	return v.RPC_VALIDATOR_FIELDS.Name
}

// GetCredentials returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Credentials, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCredentials() RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.Credentials
}

// GetNextEpochCommissionRate returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCommissionRate, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
}

// GetNextEpochGasPrice returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochGasPrice, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
}

// GetNextEpochCredentials returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCredentials, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCredentials() RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
}

// GetNextEpochStake returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochStake, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochStake
}

// GetOperationCap returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.OperationCap, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetOperationCap() RPC_VALIDATOR_FIELDSOperationCapMoveObject {
	return v.RPC_VALIDATOR_FIELDS.OperationCap
}

// GetPendingPoolTokenWithdraw returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingPoolTokenWithdraw, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingPoolTokenWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
}

// GetPendingStake returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingStake, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingStake
}

// GetPendingTotalSuiWithdraw returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingTotalSuiWithdraw, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingTotalSuiWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
}

// GetPoolTokenBalance returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PoolTokenBalance, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPoolTokenBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
}

// GetProjectUrl returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ProjectUrl, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetProjectUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ProjectUrl
}

// GetRewardsPool returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.RewardsPool, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetRewardsPool() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.RewardsPool
}

// GetStakingPool returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPool, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPool() RPC_VALIDATOR_FIELDSStakingPoolMoveObject {
	return v.RPC_VALIDATOR_FIELDS.StakingPool
}

// GetStakingPoolActivationEpoch returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolActivationEpoch, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolActivationEpoch() uint64 {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
}

// GetStakingPoolSuiBalance returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolSuiBalance, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolSuiBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
}

// GetAddress returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Address, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAddress() RPC_VALIDATOR_FIELDSAddress {
	return v.RPC_VALIDATOR_FIELDS.Address
}

// GetVotingPower returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.VotingPower, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetVotingPower() int {
	return v.RPC_VALIDATOR_FIELDS.VotingPower
}

func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator
		graphql.NoUnmarshalJSON
	}
	firstPass.GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_VALIDATOR_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	AtRisk uint64 `json:"atRisk"`

	CommissionRate int `json:"commissionRate"`

	ExchangeRatesSize uint64 `json:"exchangeRatesSize"`

	ExchangeRates RPC_VALIDATOR_FIELDSExchangeRatesMoveObject `json:"exchangeRates"`

	Description string `json:"description"`

	GasPrice sui.BigInt `json:"gasPrice"`

	ImageUrl string `json:"imageUrl"`

	Name string `json:"name"`

	Credentials RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials `json:"credentials"`

	NextEpochCommissionRate int `json:"nextEpochCommissionRate"`

	NextEpochGasPrice sui.BigInt `json:"nextEpochGasPrice"`

	NextEpochCredentials RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials `json:"nextEpochCredentials"`

	NextEpochStake sui.BigInt `json:"nextEpochStake"`

	OperationCap RPC_VALIDATOR_FIELDSOperationCapMoveObject `json:"operationCap"`

	PendingPoolTokenWithdraw sui.BigInt `json:"pendingPoolTokenWithdraw"`

	PendingStake sui.BigInt `json:"pendingStake"`

	PendingTotalSuiWithdraw sui.BigInt `json:"pendingTotalSuiWithdraw"`

	PoolTokenBalance sui.BigInt `json:"poolTokenBalance"`

	ProjectUrl string `json:"projectUrl"`

	RewardsPool sui.BigInt `json:"rewardsPool"`

	StakingPool RPC_VALIDATOR_FIELDSStakingPoolMoveObject `json:"stakingPool"`

	StakingPoolActivationEpoch uint64 `json:"stakingPoolActivationEpoch"`

	StakingPoolSuiBalance sui.BigInt `json:"stakingPoolSuiBalance"`

	Address RPC_VALIDATOR_FIELDSAddress `json:"address"`

	VotingPower int `json:"votingPower"`
}

func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) __premarshalJSON() (*__premarshalGetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator, error) {
	var retval __premarshalGetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator

	retval.AtRisk = v.RPC_VALIDATOR_FIELDS.AtRisk
	retval.CommissionRate = v.RPC_VALIDATOR_FIELDS.CommissionRate
	retval.ExchangeRatesSize = v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
	retval.ExchangeRates = v.RPC_VALIDATOR_FIELDS.ExchangeRates
	retval.Description = v.RPC_VALIDATOR_FIELDS.Description
	retval.GasPrice = v.RPC_VALIDATOR_FIELDS.GasPrice
	retval.ImageUrl = v.RPC_VALIDATOR_FIELDS.ImageUrl
	retval.Name = v.RPC_VALIDATOR_FIELDS.Name
	retval.Credentials = v.RPC_VALIDATOR_FIELDS.Credentials
	retval.NextEpochCommissionRate = v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
	retval.NextEpochGasPrice = v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
	retval.NextEpochCredentials = v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
	retval.NextEpochStake = v.RPC_VALIDATOR_FIELDS.NextEpochStake
	retval.OperationCap = v.RPC_VALIDATOR_FIELDS.OperationCap
	retval.PendingPoolTokenWithdraw = v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
	retval.PendingStake = v.RPC_VALIDATOR_FIELDS.PendingStake
	retval.PendingTotalSuiWithdraw = v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
	retval.PoolTokenBalance = v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
	retval.ProjectUrl = v.RPC_VALIDATOR_FIELDS.ProjectUrl
	retval.RewardsPool = v.RPC_VALIDATOR_FIELDS.RewardsPool
	retval.StakingPool = v.RPC_VALIDATOR_FIELDS.StakingPool
	retval.StakingPoolActivationEpoch = v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
	retval.StakingPoolSuiBalance = v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
	retval.Address = v.RPC_VALIDATOR_FIELDS.Address
	retval.VotingPower = v.RPC_VALIDATOR_FIELDS.VotingPower
	return &retval, nil
}

// GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetLatestSuiSystemStateResponse is returned by GetLatestSuiSystemState on success.
type GetLatestSuiSystemStateResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch GetLatestSuiSystemStateEpoch `json:"epoch"`
}

// GetEpoch returns GetLatestSuiSystemStateResponse.Epoch, and is useful for accessing the field via an interface.
func (v *GetLatestSuiSystemStateResponse) GetEpoch() GetLatestSuiSystemStateEpoch { return v.Epoch }

// GetMoveFunctionArgTypesObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetMoveFunctionArgTypesObject struct {
	// Attempts to convert the object into a MovePackage
	AsMovePackage GetMoveFunctionArgTypesObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMovePackage returns GetMoveFunctionArgTypesObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObject) GetAsMovePackage() GetMoveFunctionArgTypesObjectAsMovePackage {
	return v.AsMovePackage
}

// GetMoveFunctionArgTypesObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type GetMoveFunctionArgTypesObjectAsMovePackage struct {
	// A representation of the module called `name` in this package, including the
	// structs and functions it defines.
	Module GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule `json:"module"`
}

// GetModule returns GetMoveFunctionArgTypesObjectAsMovePackage.Module, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObjectAsMovePackage) GetModule() GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule {
	return v.Module
}

// GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule struct {
	// Format version of this module's bytecode.
	FileFormatVersion int `json:"fileFormatVersion"`
	// Look-up the signature of a function defined in this module, by its name.
	Function GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction `json:"function"`
}

// GetFileFormatVersion returns GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule) GetFileFormatVersion() int {
	return v.FileFormatVersion
}

// GetFunction returns GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule.Function, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModule) GetFunction() GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction {
	return v.Function
}

// GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction includes the requested fields of the GraphQL type MoveFunction.
// The GraphQL type's documentation follows.
//
// Signature of a function, defined in a Move module.
type GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction struct {
	// The function's parameter types.  These types can reference type parameters introduce by this
	// function (see `typeParameters`).
	Parameters []GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType `json:"parameters"`
}

// GetParameters returns GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.Parameters, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetParameters() []GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType {
	return v.Parameters
}

// GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType includes the requested fields of the GraphQL type OpenMoveType.
// The GraphQL type's documentation follows.
//
// Represents types that could contain references or free type parameters.  Such types can appear
// as function parameters, in fields of structs, or as actual type parameter.
type GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType struct {
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetSignature returns GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType.Signature, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesObjectAsMovePackageModuleMoveModuleFunctionMoveFunctionParametersOpenMoveType) GetSignature() string {
	return v.Signature
}

// GetMoveFunctionArgTypesResponse is returned by GetMoveFunctionArgTypes on success.
type GetMoveFunctionArgTypesResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetMoveFunctionArgTypesObject `json:"object"`
}

// GetObject returns GetMoveFunctionArgTypesResponse.Object, and is useful for accessing the field via an interface.
func (v *GetMoveFunctionArgTypesResponse) GetObject() GetMoveFunctionArgTypesObject { return v.Object }

// GetNormalizedMoveFunctionObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetNormalizedMoveFunctionObject struct {
	Address sui.Address `json:"address"`
	// Attempts to convert the object into a MovePackage
	AsMovePackage GetNormalizedMoveFunctionObjectAsMovePackage `json:"asMovePackage"`
}

// GetAddress returns GetNormalizedMoveFunctionObject.Address, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObject) GetAddress() sui.Address { return v.Address }

// GetAsMovePackage returns GetNormalizedMoveFunctionObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObject) GetAsMovePackage() GetNormalizedMoveFunctionObjectAsMovePackage {
	return v.AsMovePackage
}

// GetNormalizedMoveFunctionObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type GetNormalizedMoveFunctionObjectAsMovePackage struct {
	// A representation of the module called `name` in this package, including the
	// structs and functions it defines.
	Module GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule `json:"module"`
}

// GetModule returns GetNormalizedMoveFunctionObjectAsMovePackage.Module, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackage) GetModule() GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule {
	return v.Module
}

// GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule struct {
	// Format version of this module's bytecode.
	FileFormatVersion int `json:"fileFormatVersion"`
	// Look-up the signature of a function defined in this module, by its name.
	Function GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction `json:"function"`
}

// GetFileFormatVersion returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule) GetFileFormatVersion() int {
	return v.FileFormatVersion
}

// GetFunction returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule.Function, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModule) GetFunction() GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction {
	return v.Function
}

// GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction includes the requested fields of the GraphQL type MoveFunction.
// The GraphQL type's documentation follows.
//
// Signature of a function, defined in a Move module.
type GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction struct {
	RPC_MOVE_FUNCTION_FIELDS `json:"-"`
}

// GetName returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.Name, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetName() string {
	return v.RPC_MOVE_FUNCTION_FIELDS.Name
}

// GetVisibility returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.Visibility, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetVisibility() MoveVisibility {
	return v.RPC_MOVE_FUNCTION_FIELDS.Visibility
}

// GetIsEntry returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.IsEntry, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetIsEntry() bool {
	return v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
}

// GetParameters returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.Parameters, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetParameters() []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Parameters
}

// GetTypeParameters returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.TypeParameters, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetTypeParameters() []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter {
	return v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
}

// GetReturn returns GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction.Return, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) GetReturn() []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Return
}

func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_FUNCTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction struct {
	Name string `json:"name"`

	Visibility MoveVisibility `json:"visibility"`

	IsEntry bool `json:"isEntry"`

	Parameters []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType `json:"parameters"`

	TypeParameters []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter `json:"typeParameters"`

	Return []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType `json:"return"`
}

func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction) __premarshalJSON() (*__premarshalGetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction, error) {
	var retval __premarshalGetNormalizedMoveFunctionObjectAsMovePackageModuleMoveModuleFunctionMoveFunction

	retval.Name = v.RPC_MOVE_FUNCTION_FIELDS.Name
	retval.Visibility = v.RPC_MOVE_FUNCTION_FIELDS.Visibility
	retval.IsEntry = v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
	retval.Parameters = v.RPC_MOVE_FUNCTION_FIELDS.Parameters
	retval.TypeParameters = v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
	retval.Return = v.RPC_MOVE_FUNCTION_FIELDS.Return
	return &retval, nil
}

// GetNormalizedMoveFunctionResponse is returned by GetNormalizedMoveFunction on success.
type GetNormalizedMoveFunctionResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetNormalizedMoveFunctionObject `json:"object"`
}

// GetObject returns GetNormalizedMoveFunctionResponse.Object, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveFunctionResponse) GetObject() GetNormalizedMoveFunctionObject {
	return v.Object
}

// GetNormalizedMoveModuleObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetNormalizedMoveModuleObject struct {
	// Attempts to convert the object into a MovePackage
	AsMovePackage GetNormalizedMoveModuleObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMovePackage returns GetNormalizedMoveModuleObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObject) GetAsMovePackage() GetNormalizedMoveModuleObjectAsMovePackage {
	return v.AsMovePackage
}

// GetNormalizedMoveModuleObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type GetNormalizedMoveModuleObjectAsMovePackage struct {
	// A representation of the module called `name` in this package, including the
	// structs and functions it defines.
	Module GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule `json:"module"`
}

// GetModule returns GetNormalizedMoveModuleObjectAsMovePackage.Module, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackage) GetModule() GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule {
	return v.Module
}

// GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule struct {
	RPC_MOVE_MODULE_FIELDS `json:"-"`
}

// GetName returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.Name, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetName() string {
	return v.RPC_MOVE_MODULE_FIELDS.Name
}

// GetFriends returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.Friends, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetFriends() RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Friends
}

// GetStructs returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.Structs, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetStructs() RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Structs
}

// GetEnums returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.Enums, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetEnums() RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Enums
}

// GetFileFormatVersion returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetFileFormatVersion() int {
	return v.RPC_MOVE_MODULE_FIELDS.FileFormatVersion
}

// GetFunctions returns GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule.Functions, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) GetFunctions() RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Functions
}

func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule
		graphql.NoUnmarshalJSON
	}
	firstPass.GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_MODULE_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule struct {
	Name string `json:"name"`

	Friends RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection `json:"friends"`

	Structs RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection `json:"structs"`

	Enums RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection `json:"enums"`

	FileFormatVersion int `json:"fileFormatVersion"`

	Functions RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection `json:"functions"`
}

func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule) __premarshalJSON() (*__premarshalGetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule, error) {
	var retval __premarshalGetNormalizedMoveModuleObjectAsMovePackageModuleMoveModule

	retval.Name = v.RPC_MOVE_MODULE_FIELDS.Name
	retval.Friends = v.RPC_MOVE_MODULE_FIELDS.Friends
	retval.Structs = v.RPC_MOVE_MODULE_FIELDS.Structs
	retval.Enums = v.RPC_MOVE_MODULE_FIELDS.Enums
	retval.FileFormatVersion = v.RPC_MOVE_MODULE_FIELDS.FileFormatVersion
	retval.Functions = v.RPC_MOVE_MODULE_FIELDS.Functions
	return &retval, nil
}

// GetNormalizedMoveModuleResponse is returned by GetNormalizedMoveModule on success.
type GetNormalizedMoveModuleResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetNormalizedMoveModuleObject `json:"object"`
}

// GetObject returns GetNormalizedMoveModuleResponse.Object, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModuleResponse) GetObject() GetNormalizedMoveModuleObject { return v.Object }

// GetNormalizedMoveModulesByPackageObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetNormalizedMoveModulesByPackageObject struct {
	// Attempts to convert the object into a MovePackage
	AsMovePackage GetNormalizedMoveModulesByPackageObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMovePackage returns GetNormalizedMoveModulesByPackageObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObject) GetAsMovePackage() GetNormalizedMoveModulesByPackageObjectAsMovePackage {
	return v.AsMovePackage
}

// GetNormalizedMoveModulesByPackageObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type GetNormalizedMoveModulesByPackageObjectAsMovePackage struct {
	Address sui.Address `json:"address"`
	// Paginate through the MoveModules defined in this package.
	Modules GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection `json:"modules"`
}

// GetAddress returns GetNormalizedMoveModulesByPackageObjectAsMovePackage.Address, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackage) GetAddress() sui.Address {
	return v.Address
}

// GetModules returns GetNormalizedMoveModulesByPackageObjectAsMovePackage.Modules, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackage) GetModules() GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection {
	return v.Modules
}

// GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection includes the requested fields of the GraphQL type MoveModuleConnection.
type GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection struct {
	// Information to aid in pagination.
	PageInfo GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule `json:"nodes"`
}

// GetPageInfo returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection) GetPageInfo() GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnection) GetNodes() []GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule {
	return v.Nodes
}

// GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule struct {
	RPC_MOVE_MODULE_FIELDS `json:"-"`
}

// GetName returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Name, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetName() string {
	return v.RPC_MOVE_MODULE_FIELDS.Name
}

// GetFriends returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Friends, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetFriends() RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Friends
}

// GetStructs returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Structs, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetStructs() RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Structs
}

// GetEnums returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Enums, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetEnums() RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Enums
}

// GetFileFormatVersion returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetFileFormatVersion() int {
	return v.RPC_MOVE_MODULE_FIELDS.FileFormatVersion
}

// GetFunctions returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Functions, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetFunctions() RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection {
	return v.RPC_MOVE_MODULE_FIELDS.Functions
}

func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule
		graphql.NoUnmarshalJSON
	}
	firstPass.GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_MODULE_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule struct {
	Name string `json:"name"`

	Friends RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection `json:"friends"`

	Structs RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection `json:"structs"`

	Enums RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection `json:"enums"`

	FileFormatVersion int `json:"fileFormatVersion"`

	Functions RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection `json:"functions"`
}

func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) __premarshalJSON() (*__premarshalGetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule, error) {
	var retval __premarshalGetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule

	retval.Name = v.RPC_MOVE_MODULE_FIELDS.Name
	retval.Friends = v.RPC_MOVE_MODULE_FIELDS.Friends
	retval.Structs = v.RPC_MOVE_MODULE_FIELDS.Structs
	retval.Enums = v.RPC_MOVE_MODULE_FIELDS.Enums
	retval.FileFormatVersion = v.RPC_MOVE_MODULE_FIELDS.FileFormatVersion
	retval.Functions = v.RPC_MOVE_MODULE_FIELDS.Functions
	return &retval, nil
}

// GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageObjectAsMovePackageModulesMoveModuleConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetNormalizedMoveModulesByPackageResponse is returned by GetNormalizedMoveModulesByPackage on success.
type GetNormalizedMoveModulesByPackageResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetNormalizedMoveModulesByPackageObject `json:"object"`
}

// GetObject returns GetNormalizedMoveModulesByPackageResponse.Object, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveModulesByPackageResponse) GetObject() GetNormalizedMoveModulesByPackageObject {
	return v.Object
}

// GetNormalizedMoveStructObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetNormalizedMoveStructObject struct {
	// Attempts to convert the object into a MovePackage
	AsMovePackage GetNormalizedMoveStructObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMovePackage returns GetNormalizedMoveStructObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObject) GetAsMovePackage() GetNormalizedMoveStructObjectAsMovePackage {
	return v.AsMovePackage
}

// GetNormalizedMoveStructObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type GetNormalizedMoveStructObjectAsMovePackage struct {
	Address sui.Address `json:"address"`
	// A representation of the module called `name` in this package, including the
	// structs and functions it defines.
	Module GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule `json:"module"`
}

// GetAddress returns GetNormalizedMoveStructObjectAsMovePackage.Address, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackage) GetAddress() sui.Address { return v.Address }

// GetModule returns GetNormalizedMoveStructObjectAsMovePackage.Module, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackage) GetModule() GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule {
	return v.Module
}

// GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule struct {
	// Format version of this module's bytecode.
	FileFormatVersion int `json:"fileFormatVersion"`
	// Look-up the definition of a struct defined in this module, by its name.
	Struct GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct `json:"struct"`
}

// GetFileFormatVersion returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule) GetFileFormatVersion() int {
	return v.FileFormatVersion
}

// GetStruct returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule.Struct, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModule) GetStruct() GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct {
	return v.Struct
}

// GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct includes the requested fields of the GraphQL type MoveStruct.
// The GraphQL type's documentation follows.
//
// Description of a struct type, defined in a Move module.
type GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct struct {
	RPC_MOVE_STRUCT_FIELDS `json:"-"`
}

// GetName returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct.Name, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) GetName() string {
	return v.RPC_MOVE_STRUCT_FIELDS.Name
}

// GetAbilities returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct.Abilities, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) GetAbilities() []MoveAbility {
	return v.RPC_MOVE_STRUCT_FIELDS.Abilities
}

// GetFields returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct.Fields, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) GetFields() []RPC_MOVE_STRUCT_FIELDSFieldsMoveField {
	return v.RPC_MOVE_STRUCT_FIELDS.Fields
}

// GetTypeParameters returns GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct.TypeParameters, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) GetTypeParameters() []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter {
	return v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
}

func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct
		graphql.NoUnmarshalJSON
	}
	firstPass.GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_STRUCT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct struct {
	Name string `json:"name"`

	Abilities []MoveAbility `json:"abilities"`

	Fields []RPC_MOVE_STRUCT_FIELDSFieldsMoveField `json:"fields"`

	TypeParameters []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`
}

func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct) __premarshalJSON() (*__premarshalGetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct, error) {
	var retval __premarshalGetNormalizedMoveStructObjectAsMovePackageModuleMoveModuleStructMoveStruct

	retval.Name = v.RPC_MOVE_STRUCT_FIELDS.Name
	retval.Abilities = v.RPC_MOVE_STRUCT_FIELDS.Abilities
	retval.Fields = v.RPC_MOVE_STRUCT_FIELDS.Fields
	retval.TypeParameters = v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
	return &retval, nil
}

// GetNormalizedMoveStructResponse is returned by GetNormalizedMoveStruct on success.
type GetNormalizedMoveStructResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetNormalizedMoveStructObject `json:"object"`
}

// GetObject returns GetNormalizedMoveStructResponse.Object, and is useful for accessing the field via an interface.
func (v *GetNormalizedMoveStructResponse) GetObject() GetNormalizedMoveStructObject { return v.Object }

// GetObjectObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetObjectObject struct {
	RPC_OBJECT_FIELDS `json:"-"`
}

// GetObjectId returns GetObjectObject.ObjectId, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetObjectId() sui.Address { return v.RPC_OBJECT_FIELDS.ObjectId }

// GetVersion returns GetObjectObject.Version, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetVersion() uint64 { return v.RPC_OBJECT_FIELDS.Version }

// GetAsMoveObjectType returns GetObjectObject.AsMoveObjectType, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetAsMoveObjectType() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectType
}

// GetAsMoveObjectContent returns GetObjectObject.AsMoveObjectContent, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetAsMoveObjectContent() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectContent
}

// GetAsMoveObject returns GetObjectObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetAsMoveObject() RPC_OBJECT_FIELDSAsMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObject
}

// GetOwner returns GetObjectObject.Owner, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetOwner() RPC_OBJECT_FIELDSOwnerObjectOwner {
	return v.RPC_OBJECT_FIELDS.Owner
}

// GetPreviousTransactionBlock returns GetObjectObject.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetPreviousTransactionBlock() RPC_OBJECT_FIELDSPreviousTransactionBlock {
	return v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
}

// GetStorageRebate returns GetObjectObject.StorageRebate, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetStorageRebate() sui.BigInt { return v.RPC_OBJECT_FIELDS.StorageRebate }

// GetDigest returns GetObjectObject.Digest, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetDigest() string { return v.RPC_OBJECT_FIELDS.Digest }

// GetDisplay returns GetObjectObject.Display, and is useful for accessing the field via an interface.
func (v *GetObjectObject) GetDisplay() []RPC_OBJECT_FIELDSDisplayDisplayEntry {
	return v.RPC_OBJECT_FIELDS.Display
}

func (v *GetObjectObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetObjectObject
		graphql.NoUnmarshalJSON
	}
	firstPass.GetObjectObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetObjectObject struct {
	ObjectId sui.Address `json:"objectId"`

	Version uint64 `json:"version"`

	AsMoveObjectType RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject `json:"asMoveObjectType"`

	AsMoveObjectContent RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject `json:"asMoveObjectContent"`

	AsMoveObject RPC_OBJECT_FIELDSAsMoveObject `json:"asMoveObject"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Display []RPC_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *GetObjectObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetObjectObject) __premarshalJSON() (*__premarshalGetObjectObject, error) {
	var retval __premarshalGetObjectObject

	retval.ObjectId = v.RPC_OBJECT_FIELDS.ObjectId
	retval.Version = v.RPC_OBJECT_FIELDS.Version
	retval.AsMoveObjectType = v.RPC_OBJECT_FIELDS.AsMoveObjectType
	retval.AsMoveObjectContent = v.RPC_OBJECT_FIELDS.AsMoveObjectContent
	retval.AsMoveObject = v.RPC_OBJECT_FIELDS.AsMoveObject
	{

		dst := &retval.Owner
		src := v.RPC_OBJECT_FIELDS.Owner
		var err error
		*dst, err = __marshalRPC_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetObjectObject.RPC_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
	retval.StorageRebate = v.RPC_OBJECT_FIELDS.StorageRebate
	retval.Digest = v.RPC_OBJECT_FIELDS.Digest
	retval.Display = v.RPC_OBJECT_FIELDS.Display
	return &retval, nil
}

// GetObjectResponse is returned by GetObject on success.
type GetObjectResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object GetObjectObject `json:"object"`
}

// GetObject returns GetObjectResponse.Object, and is useful for accessing the field via an interface.
func (v *GetObjectResponse) GetObject() GetObjectObject { return v.Object }

// GetOwnedObjectsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetOwnedObjectsAddress struct {
	// Objects owned by this address, optionally `filter`-ed.
	Objects GetOwnedObjectsAddressObjectsMoveObjectConnection `json:"objects"`
}

// GetObjects returns GetOwnedObjectsAddress.Objects, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddress) GetObjects() GetOwnedObjectsAddressObjectsMoveObjectConnection {
	return v.Objects
}

// GetOwnedObjectsAddressObjectsMoveObjectConnection includes the requested fields of the GraphQL type MoveObjectConnection.
type GetOwnedObjectsAddressObjectsMoveObjectConnection struct {
	// Information to aid in pagination.
	PageInfo GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject `json:"nodes"`
}

// GetPageInfo returns GetOwnedObjectsAddressObjectsMoveObjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnection) GetPageInfo() GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetOwnedObjectsAddressObjectsMoveObjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnection) GetNodes() []GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject {
	return v.Nodes
}

// GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject struct {
	RPC_MOVE_OBJECT_FIELDS `json:"-"`
}

// GetObjectId returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.ObjectId, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetObjectId() sui.Address {
	return v.RPC_MOVE_OBJECT_FIELDS.ObjectId
}

// GetBcs returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Bcs, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetBcs() sui.Base64 {
	return v.RPC_MOVE_OBJECT_FIELDS.Bcs
}

// GetContents_type returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Contents_type, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetContents_type() RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue {
	return v.RPC_MOVE_OBJECT_FIELDS.Contents_type
}

// GetHasPublicTransfer returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.HasPublicTransfer, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetHasPublicTransfer() bool {
	return v.RPC_MOVE_OBJECT_FIELDS.HasPublicTransfer
}

// GetContents_content returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Contents_content, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetContents_content() RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue {
	return v.RPC_MOVE_OBJECT_FIELDS.Contents_content
}

// GetContents returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetContents() RPC_MOVE_OBJECT_FIELDSContentsMoveValue {
	return v.RPC_MOVE_OBJECT_FIELDS.Contents
}

// GetOwner returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Owner, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetOwner() RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner {
	return v.RPC_MOVE_OBJECT_FIELDS.Owner
}

// GetPreviousTransactionBlock returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetPreviousTransactionBlock() RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock {
	return v.RPC_MOVE_OBJECT_FIELDS.PreviousTransactionBlock
}

// GetStorageRebate returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.StorageRebate, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetStorageRebate() sui.BigInt {
	return v.RPC_MOVE_OBJECT_FIELDS.StorageRebate
}

// GetDigest returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Digest, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetDigest() string {
	return v.RPC_MOVE_OBJECT_FIELDS.Digest
}

// GetVersion returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Version, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetVersion() uint64 {
	return v.RPC_MOVE_OBJECT_FIELDS.Version
}

// GetDisplay returns GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.Display, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) GetDisplay() []RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry {
	return v.RPC_MOVE_OBJECT_FIELDS.Display
}

func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject
		graphql.NoUnmarshalJSON
	}
	firstPass.GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_OBJECT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject struct {
	ObjectId sui.Address `json:"objectId"`

	Bcs sui.Base64 `json:"bcs"`

	Contents_type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue `json:"contents_type"`

	HasPublicTransfer bool `json:"hasPublicTransfer"`

	Contents_content RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue `json:"contents_content"`

	Contents RPC_MOVE_OBJECT_FIELDSContentsMoveValue `json:"contents"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Version uint64 `json:"version"`

	Display []RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject) __premarshalJSON() (*__premarshalGetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject, error) {
	var retval __premarshalGetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject

	retval.ObjectId = v.RPC_MOVE_OBJECT_FIELDS.ObjectId
	retval.Bcs = v.RPC_MOVE_OBJECT_FIELDS.Bcs
	retval.Contents_type = v.RPC_MOVE_OBJECT_FIELDS.Contents_type
	retval.HasPublicTransfer = v.RPC_MOVE_OBJECT_FIELDS.HasPublicTransfer
	retval.Contents_content = v.RPC_MOVE_OBJECT_FIELDS.Contents_content
	retval.Contents = v.RPC_MOVE_OBJECT_FIELDS.Contents
	{

		dst := &retval.Owner
		src := v.RPC_MOVE_OBJECT_FIELDS.Owner
		var err error
		*dst, err = __marshalRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal GetOwnedObjectsAddressObjectsMoveObjectConnectionNodesMoveObject.RPC_MOVE_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.RPC_MOVE_OBJECT_FIELDS.PreviousTransactionBlock
	retval.StorageRebate = v.RPC_MOVE_OBJECT_FIELDS.StorageRebate
	retval.Digest = v.RPC_MOVE_OBJECT_FIELDS.Digest
	retval.Version = v.RPC_MOVE_OBJECT_FIELDS.Version
	retval.Display = v.RPC_MOVE_OBJECT_FIELDS.Display
	return &retval, nil
}

// GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsAddressObjectsMoveObjectConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetOwnedObjectsResponse is returned by GetOwnedObjects on success.
type GetOwnedObjectsResponse struct {
	// Look-up an Account by its SuiAddress.
	Address GetOwnedObjectsAddress `json:"address"`
}

// GetAddress returns GetOwnedObjectsResponse.Address, and is useful for accessing the field via an interface.
func (v *GetOwnedObjectsResponse) GetAddress() GetOwnedObjectsAddress { return v.Address }

// GetProtocolConfigProtocolConfigProtocolConfigs includes the requested fields of the GraphQL type ProtocolConfigs.
// The GraphQL type's documentation follows.
//
// Constants that control how the chain operates.
//
// These can only change during protocol upgrades which happen on epoch boundaries.
type GetProtocolConfigProtocolConfigProtocolConfigs struct {
	// The protocol is not required to change on every epoch boundary, so the protocol version
	// tracks which change to the protocol these configs are from.
	ProtocolVersion uint64 `json:"protocolVersion"`
	// List all available configurations and their values.  These configurations can take any value
	// (but they will all be represented in string form), and do not include feature flags.
	Configs []GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr `json:"configs"`
	// List all available feature flags and their values.  Feature flags are a form of boolean
	// configuration that are usually used to gate features while they are in development.  Once a
	// flag has been enabled, it is rare for it to be disabled.
	FeatureFlags []GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag `json:"featureFlags"`
}

// GetProtocolVersion returns GetProtocolConfigProtocolConfigProtocolConfigs.ProtocolVersion, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigs) GetProtocolVersion() uint64 {
	return v.ProtocolVersion
}

// GetConfigs returns GetProtocolConfigProtocolConfigProtocolConfigs.Configs, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigs) GetConfigs() []GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr {
	return v.Configs
}

// GetFeatureFlags returns GetProtocolConfigProtocolConfigProtocolConfigs.FeatureFlags, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigs) GetFeatureFlags() []GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag {
	return v.FeatureFlags
}

// GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr includes the requested fields of the GraphQL type ProtocolConfigAttr.
// The GraphQL type's documentation follows.
//
// A single protocol configuration value.
type GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr.Key, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr) GetKey() string {
	return v.Key
}

// GetValue returns GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr.Value, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigsConfigsProtocolConfigAttr) GetValue() string {
	return v.Value
}

// GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag includes the requested fields of the GraphQL type ProtocolConfigFeatureFlag.
// The GraphQL type's documentation follows.
//
// Whether or not a single feature is enabled in the protocol config.
type GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag struct {
	Key   string `json:"key"`
	Value bool   `json:"value"`
}

// GetKey returns GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag.Key, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag) GetKey() string {
	return v.Key
}

// GetValue returns GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag.Value, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigProtocolConfigProtocolConfigsFeatureFlagsProtocolConfigFeatureFlag) GetValue() bool {
	return v.Value
}

// GetProtocolConfigResponse is returned by GetProtocolConfig on success.
type GetProtocolConfigResponse struct {
	// Fetch the protocol config by protocol version (defaults to the latest protocol
	// version known to the GraphQL service).
	ProtocolConfig GetProtocolConfigProtocolConfigProtocolConfigs `json:"protocolConfig"`
}

// GetProtocolConfig returns GetProtocolConfigResponse.ProtocolConfig, and is useful for accessing the field via an interface.
func (v *GetProtocolConfigResponse) GetProtocolConfig() GetProtocolConfigProtocolConfigProtocolConfigs {
	return v.ProtocolConfig
}

// GetReferenceGasPriceEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type GetReferenceGasPriceEpoch struct {
	// The minimum gas price that a quorum of validators are guaranteed to sign a transaction for.
	ReferenceGasPrice sui.BigInt `json:"referenceGasPrice"`
}

// GetReferenceGasPrice returns GetReferenceGasPriceEpoch.ReferenceGasPrice, and is useful for accessing the field via an interface.
func (v *GetReferenceGasPriceEpoch) GetReferenceGasPrice() sui.BigInt { return v.ReferenceGasPrice }

// GetReferenceGasPriceResponse is returned by GetReferenceGasPrice on success.
type GetReferenceGasPriceResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch GetReferenceGasPriceEpoch `json:"epoch"`
}

// GetEpoch returns GetReferenceGasPriceResponse.Epoch, and is useful for accessing the field via an interface.
func (v *GetReferenceGasPriceResponse) GetEpoch() GetReferenceGasPriceEpoch { return v.Epoch }

// GetStakesAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetStakesAddress struct {
	// The `0x3::staking_pool::StakedSui` objects owned by this address.
	StakedSuis GetStakesAddressStakedSuisStakedSuiConnection `json:"stakedSuis"`
}

// GetStakedSuis returns GetStakesAddress.StakedSuis, and is useful for accessing the field via an interface.
func (v *GetStakesAddress) GetStakedSuis() GetStakesAddressStakedSuisStakedSuiConnection {
	return v.StakedSuis
}

// GetStakesAddressStakedSuisStakedSuiConnection includes the requested fields of the GraphQL type StakedSuiConnection.
type GetStakesAddressStakedSuisStakedSuiConnection struct {
	// Information to aid in pagination.
	PageInfo GetStakesAddressStakedSuisStakedSuiConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui `json:"nodes"`
}

// GetPageInfo returns GetStakesAddressStakedSuisStakedSuiConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnection) GetPageInfo() GetStakesAddressStakedSuisStakedSuiConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetStakesAddressStakedSuisStakedSuiConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnection) GetNodes() []GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui {
	return v.Nodes
}

// GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui includes the requested fields of the GraphQL type StakedSui.
// The GraphQL type's documentation follows.
//
// Represents a `0x3::staking_pool::StakedSui` Move object on-chain.
type GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui struct {
	RPC_STAKE_FIELDS `json:"-"`
}

// GetPrincipal returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.Principal, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetPrincipal() sui.BigInt {
	return v.RPC_STAKE_FIELDS.Principal
}

// GetActivatedEpoch returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.ActivatedEpoch, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetActivatedEpoch() RPC_STAKE_FIELDSActivatedEpoch {
	return v.RPC_STAKE_FIELDS.ActivatedEpoch
}

// GetStakeStatus returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.StakeStatus, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetStakeStatus() StakeStatus {
	return v.RPC_STAKE_FIELDS.StakeStatus
}

// GetRequestedEpoch returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.RequestedEpoch, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetRequestedEpoch() RPC_STAKE_FIELDSRequestedEpoch {
	return v.RPC_STAKE_FIELDS.RequestedEpoch
}

// GetContents returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.Contents, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetContents() RPC_STAKE_FIELDSContentsMoveValue {
	return v.RPC_STAKE_FIELDS.Contents
}

// GetAddress returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.Address, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetAddress() sui.Address {
	return v.RPC_STAKE_FIELDS.Address
}

// GetEstimatedReward returns GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui.EstimatedReward, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) GetEstimatedReward() sui.BigInt {
	return v.RPC_STAKE_FIELDS.EstimatedReward
}

func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui
		graphql.NoUnmarshalJSON
	}
	firstPass.GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_STAKE_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui struct {
	Principal sui.BigInt `json:"principal"`

	ActivatedEpoch RPC_STAKE_FIELDSActivatedEpoch `json:"activatedEpoch"`

	StakeStatus StakeStatus `json:"stakeStatus"`

	RequestedEpoch RPC_STAKE_FIELDSRequestedEpoch `json:"requestedEpoch"`

	Contents RPC_STAKE_FIELDSContentsMoveValue `json:"contents"`

	Address sui.Address `json:"address"`

	EstimatedReward sui.BigInt `json:"estimatedReward"`
}

func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui) __premarshalJSON() (*__premarshalGetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui, error) {
	var retval __premarshalGetStakesAddressStakedSuisStakedSuiConnectionNodesStakedSui

	retval.Principal = v.RPC_STAKE_FIELDS.Principal
	retval.ActivatedEpoch = v.RPC_STAKE_FIELDS.ActivatedEpoch
	retval.StakeStatus = v.RPC_STAKE_FIELDS.StakeStatus
	retval.RequestedEpoch = v.RPC_STAKE_FIELDS.RequestedEpoch
	retval.Contents = v.RPC_STAKE_FIELDS.Contents
	retval.Address = v.RPC_STAKE_FIELDS.Address
	retval.EstimatedReward = v.RPC_STAKE_FIELDS.EstimatedReward
	return &retval, nil
}

// GetStakesAddressStakedSuisStakedSuiConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetStakesAddressStakedSuisStakedSuiConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetStakesAddressStakedSuisStakedSuiConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetStakesAddressStakedSuisStakedSuiConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetStakesAddressStakedSuisStakedSuiConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetStakesByIdsObjectsObjectConnection includes the requested fields of the GraphQL type ObjectConnection.
type GetStakesByIdsObjectsObjectConnection struct {
	// Information to aid in pagination.
	PageInfo GetStakesByIdsObjectsObjectConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetStakesByIdsObjectsObjectConnectionNodesObject `json:"nodes"`
}

// GetPageInfo returns GetStakesByIdsObjectsObjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnection) GetPageInfo() GetStakesByIdsObjectsObjectConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetStakesByIdsObjectsObjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnection) GetNodes() []GetStakesByIdsObjectsObjectConnectionNodesObject {
	return v.Nodes
}

// GetStakesByIdsObjectsObjectConnectionNodesObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type GetStakesByIdsObjectsObjectConnectionNodesObject struct {
	// Attempts to convert the object into a MoveObject
	AsMoveObject GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject `json:"asMoveObject"`
}

// GetAsMoveObject returns GetStakesByIdsObjectsObjectConnectionNodesObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObject) GetAsMoveObject() GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject {
	return v.AsMoveObject
}

// GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject struct {
	// Attempts to convert the Move object into a `0x3::staking_pool::StakedSui`.
	AsStakedSui GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui `json:"asStakedSui"`
}

// GetAsStakedSui returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject.AsStakedSui, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObject) GetAsStakedSui() GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui {
	return v.AsStakedSui
}

// GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui includes the requested fields of the GraphQL type StakedSui.
// The GraphQL type's documentation follows.
//
// Represents a `0x3::staking_pool::StakedSui` Move object on-chain.
type GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui struct {
	RPC_STAKE_FIELDS `json:"-"`
}

// GetPrincipal returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.Principal, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetPrincipal() sui.BigInt {
	return v.RPC_STAKE_FIELDS.Principal
}

// GetActivatedEpoch returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.ActivatedEpoch, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetActivatedEpoch() RPC_STAKE_FIELDSActivatedEpoch {
	return v.RPC_STAKE_FIELDS.ActivatedEpoch
}

// GetStakeStatus returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.StakeStatus, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetStakeStatus() StakeStatus {
	return v.RPC_STAKE_FIELDS.StakeStatus
}

// GetRequestedEpoch returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.RequestedEpoch, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetRequestedEpoch() RPC_STAKE_FIELDSRequestedEpoch {
	return v.RPC_STAKE_FIELDS.RequestedEpoch
}

// GetContents returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.Contents, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetContents() RPC_STAKE_FIELDSContentsMoveValue {
	return v.RPC_STAKE_FIELDS.Contents
}

// GetAddress returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.Address, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetAddress() sui.Address {
	return v.RPC_STAKE_FIELDS.Address
}

// GetEstimatedReward returns GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui.EstimatedReward, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) GetEstimatedReward() sui.BigInt {
	return v.RPC_STAKE_FIELDS.EstimatedReward
}

func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui
		graphql.NoUnmarshalJSON
	}
	firstPass.GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_STAKE_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui struct {
	Principal sui.BigInt `json:"principal"`

	ActivatedEpoch RPC_STAKE_FIELDSActivatedEpoch `json:"activatedEpoch"`

	StakeStatus StakeStatus `json:"stakeStatus"`

	RequestedEpoch RPC_STAKE_FIELDSRequestedEpoch `json:"requestedEpoch"`

	Contents RPC_STAKE_FIELDSContentsMoveValue `json:"contents"`

	Address sui.Address `json:"address"`

	EstimatedReward sui.BigInt `json:"estimatedReward"`
}

func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui) __premarshalJSON() (*__premarshalGetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui, error) {
	var retval __premarshalGetStakesByIdsObjectsObjectConnectionNodesObjectAsMoveObjectAsStakedSui

	retval.Principal = v.RPC_STAKE_FIELDS.Principal
	retval.ActivatedEpoch = v.RPC_STAKE_FIELDS.ActivatedEpoch
	retval.StakeStatus = v.RPC_STAKE_FIELDS.StakeStatus
	retval.RequestedEpoch = v.RPC_STAKE_FIELDS.RequestedEpoch
	retval.Contents = v.RPC_STAKE_FIELDS.Contents
	retval.Address = v.RPC_STAKE_FIELDS.Address
	retval.EstimatedReward = v.RPC_STAKE_FIELDS.EstimatedReward
	return &retval, nil
}

// GetStakesByIdsObjectsObjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetStakesByIdsObjectsObjectConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetStakesByIdsObjectsObjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns GetStakesByIdsObjectsObjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsObjectsObjectConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetStakesByIdsResponse is returned by GetStakesByIds on success.
type GetStakesByIdsResponse struct {
	// The objects that exist in the network.
	Objects GetStakesByIdsObjectsObjectConnection `json:"objects"`
}

// GetObjects returns GetStakesByIdsResponse.Objects, and is useful for accessing the field via an interface.
func (v *GetStakesByIdsResponse) GetObjects() GetStakesByIdsObjectsObjectConnection { return v.Objects }

// GetStakesResponse is returned by GetStakes on success.
type GetStakesResponse struct {
	// Look-up an Account by its SuiAddress.
	Address GetStakesAddress `json:"address"`
}

// GetAddress returns GetStakesResponse.Address, and is useful for accessing the field via an interface.
func (v *GetStakesResponse) GetAddress() GetStakesAddress { return v.Address }

// GetTotalSupplyCoinMetadata includes the requested fields of the GraphQL type CoinMetadata.
// The GraphQL type's documentation follows.
//
// The metadata for a coin type.
type GetTotalSupplyCoinMetadata struct {
	// The overall quantity of tokens that will be issued.
	Supply sui.BigInt `json:"supply"`
	// The number of decimal places used to represent the token.
	Decimals int `json:"decimals"`
}

// GetSupply returns GetTotalSupplyCoinMetadata.Supply, and is useful for accessing the field via an interface.
func (v *GetTotalSupplyCoinMetadata) GetSupply() sui.BigInt { return v.Supply }

// GetDecimals returns GetTotalSupplyCoinMetadata.Decimals, and is useful for accessing the field via an interface.
func (v *GetTotalSupplyCoinMetadata) GetDecimals() int { return v.Decimals }

// GetTotalSupplyResponse is returned by GetTotalSupply on success.
type GetTotalSupplyResponse struct {
	// The coin metadata associated with the given coin type. Note that if the latest version of
	// the coin's metadata is wrapped or deleted, it will not be found.
	CoinMetadata GetTotalSupplyCoinMetadata `json:"coinMetadata"`
}

// GetCoinMetadata returns GetTotalSupplyResponse.CoinMetadata, and is useful for accessing the field via an interface.
func (v *GetTotalSupplyResponse) GetCoinMetadata() GetTotalSupplyCoinMetadata { return v.CoinMetadata }

// GetTotalTransactionBlocksCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type GetTotalTransactionBlocksCheckpoint struct {
	// The total number of transaction blocks in the network by the end of this checkpoint.
	NetworkTotalTransactions uint64 `json:"networkTotalTransactions"`
}

// GetNetworkTotalTransactions returns GetTotalTransactionBlocksCheckpoint.NetworkTotalTransactions, and is useful for accessing the field via an interface.
func (v *GetTotalTransactionBlocksCheckpoint) GetNetworkTotalTransactions() uint64 {
	return v.NetworkTotalTransactions
}

// GetTotalTransactionBlocksResponse is returned by GetTotalTransactionBlocks on success.
type GetTotalTransactionBlocksResponse struct {
	// Fetch checkpoint information by sequence number or digest (defaults to the latest available
	// checkpoint).
	Checkpoint GetTotalTransactionBlocksCheckpoint `json:"checkpoint"`
}

// GetCheckpoint returns GetTotalTransactionBlocksResponse.Checkpoint, and is useful for accessing the field via an interface.
func (v *GetTotalTransactionBlocksResponse) GetCheckpoint() GetTotalTransactionBlocksCheckpoint {
	return v.Checkpoint
}

// GetTransactionBlockResponse is returned by GetTransactionBlock on success.
type GetTransactionBlockResponse struct {
	// Fetch a transaction block by its transaction digest.
	TransactionBlock GetTransactionBlockTransactionBlock `json:"transactionBlock"`
}

// GetTransactionBlock returns GetTransactionBlockResponse.TransactionBlock, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockResponse) GetTransactionBlock() GetTransactionBlockTransactionBlock {
	return v.TransactionBlock
}

// GetTransactionBlockTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type GetTransactionBlockTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns GetTransactionBlockTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns GetTransactionBlockTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns GetTransactionBlockTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns GetTransactionBlockTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns GetTransactionBlockTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *GetTransactionBlockTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *GetTransactionBlockTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTransactionBlockTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTransactionBlockTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetTransactionBlockTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *GetTransactionBlockTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTransactionBlockTransactionBlock) __premarshalJSON() (*__premarshalGetTransactionBlockTransactionBlock, error) {
	var retval __premarshalGetTransactionBlockTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// GetTypeLayoutResponse is returned by GetTypeLayout on success.
type GetTypeLayoutResponse struct {
	// Fetch a structured representation of a concrete type, including its layout information.
	// Fails if the type is malformed.
	Type GetTypeLayoutTypeMoveType `json:"type"`
}

// GetType returns GetTypeLayoutResponse.Type, and is useful for accessing the field via an interface.
func (v *GetTypeLayoutResponse) GetType() GetTypeLayoutTypeMoveType { return v.Type }

// GetTypeLayoutTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type GetTypeLayoutTypeMoveType struct {
	// Structured representation of the "shape" of values that match this type. May return no
	// layout if the type is invalid.
	Layout string `json:"layout"`
}

// GetLayout returns GetTypeLayoutTypeMoveType.Layout, and is useful for accessing the field via an interface.
func (v *GetTypeLayoutTypeMoveType) GetLayout() string { return v.Layout }

// GetValidatorsApyEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type GetValidatorsApyEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
	// Validator related properties, including the active validators.
	ValidatorSet GetValidatorsApyEpochValidatorSet `json:"validatorSet"`
}

// GetEpochId returns GetValidatorsApyEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpoch) GetEpochId() uint64 { return v.EpochId }

// GetValidatorSet returns GetValidatorsApyEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpoch) GetValidatorSet() GetValidatorsApyEpochValidatorSet {
	return v.ValidatorSet
}

// GetValidatorsApyEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type GetValidatorsApyEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
}

// GetActiveValidators returns GetValidatorsApyEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSet) GetActiveValidators() GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	// The validator's address.
	Address GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress `json:"address"`
	// The APY of this validator in basis points.
	// To get the APY in percentage, divide by 100.
	Apy int `json:"apy"`
}

// GetAddress returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Address, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAddress() GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress {
	return v.Address
}

// GetApy returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Apy, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetApy() int {
	return v.Apy
}

// GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress.Address, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorAddress) GetAddress() sui.Address {
	return v.Address
}

// GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetValidatorsApyResponse is returned by GetValidatorsApy on success.
type GetValidatorsApyResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch GetValidatorsApyEpoch `json:"epoch"`
}

// GetEpoch returns GetValidatorsApyResponse.Epoch, and is useful for accessing the field via an interface.
func (v *GetValidatorsApyResponse) GetEpoch() GetValidatorsApyEpoch { return v.Epoch }

// Abilities are keywords in Sui Move that define how types behave at the compiler level.
type MoveAbility string

const (
	// Enables values to be copied.
	MoveAbilityCopy MoveAbility = "COPY"
	// Enables values to be popped/dropped.
	MoveAbilityDrop MoveAbility = "DROP"
	// Enables values to be held directly in global storage.
	MoveAbilityKey MoveAbility = "KEY"
	// Enables values to be held inside a struct in global storage.
	MoveAbilityStore MoveAbility = "STORE"
)

var AllMoveAbility = []MoveAbility{
	MoveAbilityCopy,
	MoveAbilityDrop,
	MoveAbilityKey,
	MoveAbilityStore,
}

// The visibility modifier describes which modules can access this module member.
// By default, a module member can be called only within the same module.
type MoveVisibility string

const (
	// A public member can be accessed by any module.
	MoveVisibilityPublic MoveVisibility = "PUBLIC"
	// A private member can be accessed in the module it is defined in.
	MoveVisibilityPrivate MoveVisibility = "PRIVATE"
	// A friend member can be accessed in the module it is defined in and any other module in
	// its package that is explicitly specified in its friend list.
	MoveVisibilityFriend MoveVisibility = "FRIEND"
)

var AllMoveVisibility = []MoveVisibility{
	MoveVisibilityPublic,
	MoveVisibilityPrivate,
	MoveVisibilityFriend,
}

// MultiGetObjectsObjectsObjectConnection includes the requested fields of the GraphQL type ObjectConnection.
type MultiGetObjectsObjectsObjectConnection struct {
	// Information to aid in pagination.
	PageInfo MultiGetObjectsObjectsObjectConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []MultiGetObjectsObjectsObjectConnectionNodesObject `json:"nodes"`
}

// GetPageInfo returns MultiGetObjectsObjectsObjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnection) GetPageInfo() MultiGetObjectsObjectsObjectConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns MultiGetObjectsObjectsObjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnection) GetNodes() []MultiGetObjectsObjectsObjectConnectionNodesObject {
	return v.Nodes
}

// MultiGetObjectsObjectsObjectConnectionNodesObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type MultiGetObjectsObjectsObjectConnectionNodesObject struct {
	RPC_OBJECT_FIELDS `json:"-"`
}

// GetObjectId returns MultiGetObjectsObjectsObjectConnectionNodesObject.ObjectId, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetObjectId() sui.Address {
	return v.RPC_OBJECT_FIELDS.ObjectId
}

// GetVersion returns MultiGetObjectsObjectsObjectConnectionNodesObject.Version, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetVersion() uint64 {
	return v.RPC_OBJECT_FIELDS.Version
}

// GetAsMoveObjectType returns MultiGetObjectsObjectsObjectConnectionNodesObject.AsMoveObjectType, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetAsMoveObjectType() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectType
}

// GetAsMoveObjectContent returns MultiGetObjectsObjectsObjectConnectionNodesObject.AsMoveObjectContent, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetAsMoveObjectContent() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectContent
}

// GetAsMoveObject returns MultiGetObjectsObjectsObjectConnectionNodesObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetAsMoveObject() RPC_OBJECT_FIELDSAsMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObject
}

// GetOwner returns MultiGetObjectsObjectsObjectConnectionNodesObject.Owner, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetOwner() RPC_OBJECT_FIELDSOwnerObjectOwner {
	return v.RPC_OBJECT_FIELDS.Owner
}

// GetPreviousTransactionBlock returns MultiGetObjectsObjectsObjectConnectionNodesObject.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetPreviousTransactionBlock() RPC_OBJECT_FIELDSPreviousTransactionBlock {
	return v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
}

// GetStorageRebate returns MultiGetObjectsObjectsObjectConnectionNodesObject.StorageRebate, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetStorageRebate() sui.BigInt {
	return v.RPC_OBJECT_FIELDS.StorageRebate
}

// GetDigest returns MultiGetObjectsObjectsObjectConnectionNodesObject.Digest, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetDigest() string {
	return v.RPC_OBJECT_FIELDS.Digest
}

// GetDisplay returns MultiGetObjectsObjectsObjectConnectionNodesObject.Display, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) GetDisplay() []RPC_OBJECT_FIELDSDisplayDisplayEntry {
	return v.RPC_OBJECT_FIELDS.Display
}

func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MultiGetObjectsObjectsObjectConnectionNodesObject
		graphql.NoUnmarshalJSON
	}
	firstPass.MultiGetObjectsObjectsObjectConnectionNodesObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMultiGetObjectsObjectsObjectConnectionNodesObject struct {
	ObjectId sui.Address `json:"objectId"`

	Version uint64 `json:"version"`

	AsMoveObjectType RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject `json:"asMoveObjectType"`

	AsMoveObjectContent RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject `json:"asMoveObjectContent"`

	AsMoveObject RPC_OBJECT_FIELDSAsMoveObject `json:"asMoveObject"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Display []RPC_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MultiGetObjectsObjectsObjectConnectionNodesObject) __premarshalJSON() (*__premarshalMultiGetObjectsObjectsObjectConnectionNodesObject, error) {
	var retval __premarshalMultiGetObjectsObjectsObjectConnectionNodesObject

	retval.ObjectId = v.RPC_OBJECT_FIELDS.ObjectId
	retval.Version = v.RPC_OBJECT_FIELDS.Version
	retval.AsMoveObjectType = v.RPC_OBJECT_FIELDS.AsMoveObjectType
	retval.AsMoveObjectContent = v.RPC_OBJECT_FIELDS.AsMoveObjectContent
	retval.AsMoveObject = v.RPC_OBJECT_FIELDS.AsMoveObject
	{

		dst := &retval.Owner
		src := v.RPC_OBJECT_FIELDS.Owner
		var err error
		*dst, err = __marshalRPC_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal MultiGetObjectsObjectsObjectConnectionNodesObject.RPC_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
	retval.StorageRebate = v.RPC_OBJECT_FIELDS.StorageRebate
	retval.Digest = v.RPC_OBJECT_FIELDS.Digest
	retval.Display = v.RPC_OBJECT_FIELDS.Display
	return &retval, nil
}

// MultiGetObjectsObjectsObjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type MultiGetObjectsObjectsObjectConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns MultiGetObjectsObjectsObjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns MultiGetObjectsObjectsObjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsObjectsObjectConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// MultiGetObjectsResponse is returned by MultiGetObjects on success.
type MultiGetObjectsResponse struct {
	// The objects that exist in the network.
	Objects MultiGetObjectsObjectsObjectConnection `json:"objects"`
}

// GetObjects returns MultiGetObjectsResponse.Objects, and is useful for accessing the field via an interface.
func (v *MultiGetObjectsResponse) GetObjects() MultiGetObjectsObjectsObjectConnection {
	return v.Objects
}

// MultiGetTransactionBlocksResponse is returned by MultiGetTransactionBlocks on success.
type MultiGetTransactionBlocksResponse struct {
	// The transaction blocks that exist in the network.
	//
	// `scanLimit` restricts the number of candidate transactions scanned when gathering a page of
	// results. It is required for queries that apply more than two complex filters (on function,
	// kind, sender, recipient, input object, changed object, or ids), and can be at most
	// `serviceConfig.maxScanLimit`.
	//
	// When the scan limit is reached the page will be returned even if it has fewer than `first`
	// results when paginating forward (`last` when paginating backwards). If there are more
	// transactions to scan, `pageInfo.hasNextPage` (or `pageInfo.hasPreviousPage`) will be set to
	// `true`, and `PageInfo.endCursor` (or `PageInfo.startCursor`) will be set to the last
	// transaction that was scanned as opposed to the last (or first) transaction in the page.
	//
	// Requesting the next (or previous) page after this cursor will resume the search, scanning
	// the next `scanLimit` many transactions in the direction of pagination, and so on until all
	// transactions in the scanning range have been visited.
	//
	// By default, the scanning range includes all transactions known to GraphQL, but it can be
	// restricted by the `after` and `before` cursors, and the `beforeCheckpoint`,
	// `afterCheckpoint` and `atCheckpoint` filters.
	TransactionBlocks MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`
}

// GetTransactionBlocks returns MultiGetTransactionBlocksResponse.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksResponse) GetTransactionBlocks() MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection {
	return v.TransactionBlocks
}

// MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection struct {
	// Information to aid in pagination.
	PageInfo MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetPageInfo returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection) GetPageInfo() MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnection) GetNodes() []MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) __premarshalJSON() (*__premarshalMultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock, error) {
	var retval __premarshalMultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *MultiGetTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// Constrains the set of objects returned. All filters are optional, and the resulting set of
// objects are ones whose
//
// - Type matches the `type` filter,
// - AND, whose owner matches the `owner` filter,
// - AND, whose ID is in `objectIds`.
type ObjectFilter struct {
	// Filter objects by their type's `package`, `package::module`, or their fully qualified type
	// name.
	//
	// Generic types can be queried by either the generic type name, e.g. `0x2::coin::Coin`, or by
	// the full type name, such as `0x2::coin::Coin<0x2::sui::SUI>`.
	Type string `json:"type"`
	// Filter for live objects by their current owners.
	Owner sui.Address `json:"owner"`
	// Filter for live objects by their IDs.
	ObjectIds []sui.Address `json:"objectIds"`
}

// GetType returns ObjectFilter.Type, and is useful for accessing the field via an interface.
func (v *ObjectFilter) GetType() string { return v.Type }

// GetOwner returns ObjectFilter.Owner, and is useful for accessing the field via an interface.
func (v *ObjectFilter) GetOwner() sui.Address { return v.Owner }

// GetObjectIds returns ObjectFilter.ObjectIds, and is useful for accessing the field via an interface.
func (v *ObjectFilter) GetObjectIds() []sui.Address { return v.ObjectIds }

type ObjectRef struct {
	// ID of the object.
	Address sui.Address `json:"address"`
	// Version or sequence number of the object.
	Version uint64 `json:"version"`
	// Digest of the object.
	Digest string `json:"digest"`
}

// GetAddress returns ObjectRef.Address, and is useful for accessing the field via an interface.
func (v *ObjectRef) GetAddress() sui.Address { return v.Address }

// GetVersion returns ObjectRef.Version, and is useful for accessing the field via an interface.
func (v *ObjectRef) GetVersion() uint64 { return v.Version }

// GetDigest returns ObjectRef.Digest, and is useful for accessing the field via an interface.
func (v *ObjectRef) GetDigest() string { return v.Digest }

// PAGINATE_TRANSACTION_LISTS includes the GraphQL fields of TransactionBlock requested by the fragment PAGINATE_TRANSACTION_LISTS.
type PAGINATE_TRANSACTION_LISTS struct {
	// The effects field captures the results to the chain of executing this transaction.
	Effects PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects `json:"effects"`
}

// GetEffects returns PAGINATE_TRANSACTION_LISTS.Effects, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTS) GetEffects() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects {
	return v.Effects
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects includes the requested fields of the GraphQL type TransactionBlockEffects.
// The GraphQL type's documentation follows.
//
// The effects representing the result of executing a transaction block.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects struct {
	// Events emitted by this transaction block.
	Events PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection `json:"events"`
	// The effect this transaction had on the balances (sum of coin values per coin type) of
	// addresses and objects.
	BalanceChanges PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection `json:"balanceChanges"`
	// The effect this transaction had on objects on-chain.
	ObjectChanges PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection `json:"objectChanges"`
}

// GetEvents returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects.Events, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects) GetEvents() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection {
	return v.Events
}

// GetBalanceChanges returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects.BalanceChanges, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects) GetBalanceChanges() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection {
	return v.BalanceChanges
}

// GetObjectChanges returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects.ObjectChanges, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects) GetObjectChanges() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection {
	return v.ObjectChanges
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection includes the requested fields of the GraphQL type BalanceChangeConnection.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection struct {
	// Information to aid in pagination.
	PageInfo PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange `json:"nodes"`
}

// GetPageInfo returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection) GetPageInfo() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection) GetNodes() []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange {
	return v.Nodes
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange includes the requested fields of the GraphQL type BalanceChange.
// The GraphQL type's documentation follows.
//
// Effects to the balance (sum of coin values per coin type) owned by an address or object.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange struct {
	// The inner type of the coin whose balance has changed (e.g. `0x2::sui::SUI`).
	CoinType PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType `json:"coinType"`
	// The address or object whose balance has changed.
	Owner PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner `json:"owner"`
	// The signed balance change.
	Amount sui.BigInt `json:"amount"`
}

// GetCoinType returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.CoinType, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetCoinType() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType {
	return v.CoinType
}

// GetOwner returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.Owner, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetOwner() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner {
	return v.Owner
}

// GetAmount returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.Amount, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetAmount() sui.BigInt {
	return v.Amount
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType) GetRepr() string {
	return v.Repr
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner struct {
	AsObject  PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject  `json:"asObject"`
	AsAddress PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress `json:"asAddress"`
}

// GetAsObject returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner.AsObject, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner) GetAsObject() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject {
	return v.AsObject
}

// GetAsAddress returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner.AsAddress, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner) GetAsAddress() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress {
	return v.AsAddress
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress.Address, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress) GetAddress() sui.Address {
	return v.Address
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject.Address, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject) GetAddress() sui.Address {
	return v.Address
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection includes the requested fields of the GraphQL type EventConnection.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection struct {
	// Information to aid in pagination.
	PageInfo PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent `json:"nodes"`
}

// GetPageInfo returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection) GetPageInfo() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnection) GetNodes() []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent {
	return v.Nodes
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent includes the requested fields of the GraphQL type Event.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent struct {
	RPC_EVENTS_FIELDS `json:"-"`
}

// GetSendingModule returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.SendingModule, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetSendingModule() RPC_EVENTS_FIELDSSendingModuleMoveModule {
	return v.RPC_EVENTS_FIELDS.SendingModule
}

// GetSender returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Sender, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetSender() RPC_EVENTS_FIELDSSenderAddress {
	return v.RPC_EVENTS_FIELDS.Sender
}

// GetContents returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Contents, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetContents() RPC_EVENTS_FIELDSContentsMoveValue {
	return v.RPC_EVENTS_FIELDS.Contents
}

// GetTimestamp returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Timestamp, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetTimestamp() time.Time {
	return v.RPC_EVENTS_FIELDS.Timestamp
}

func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent
		graphql.NoUnmarshalJSON
	}
	firstPass.PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_EVENTS_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent struct {
	SendingModule RPC_EVENTS_FIELDSSendingModuleMoveModule `json:"sendingModule"`

	Sender RPC_EVENTS_FIELDSSenderAddress `json:"sender"`

	Contents RPC_EVENTS_FIELDSContentsMoveValue `json:"contents"`

	Timestamp time.Time `json:"timestamp"`
}

func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) __premarshalJSON() (*__premarshalPAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent, error) {
	var retval __premarshalPAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent

	retval.SendingModule = v.RPC_EVENTS_FIELDS.SendingModule
	retval.Sender = v.RPC_EVENTS_FIELDS.Sender
	retval.Contents = v.RPC_EVENTS_FIELDS.Contents
	retval.Timestamp = v.RPC_EVENTS_FIELDS.Timestamp
	return &retval, nil
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection includes the requested fields of the GraphQL type ObjectChangeConnection.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection struct {
	// Information to aid in pagination.
	PageInfo PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange `json:"nodes"`
}

// GetPageInfo returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection) GetPageInfo() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection) GetNodes() []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange {
	return v.Nodes
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange includes the requested fields of the GraphQL type ObjectChange.
// The GraphQL type's documentation follows.
//
// Effect on an individual Object (keyed by its ID).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange struct {
	// The address of the object that has changed.
	Address sui.Address `json:"address"`
	// The contents of the object immediately before the transaction.
	InputState PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject `json:"inputState"`
	// The contents of the object immediately after the transaction.
	OutputState PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject `json:"outputState"`
}

// GetAddress returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.Address, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetAddress() sui.Address {
	return v.Address
}

// GetInputState returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.InputState, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetInputState() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject {
	return v.InputState
}

// GetOutputState returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.OutputState, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetOutputState() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject {
	return v.OutputState
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject struct {
	Version uint64 `json:"version"`
	// Attempts to convert the object into a MoveObject
	AsMoveObject PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject `json:"asMoveObject"`
}

// GetVersion returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject.Version, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject) GetVersion() uint64 {
	return v.Version
}

// GetAsMoveObject returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject) GetAsMoveObject() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject {
	return v.AsMoveObject
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue `json:"contents"`
}

// GetContents returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject) GetContents() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue {
	return v.Contents
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue) GetType() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject struct {
	// Attempts to convert the object into a MoveObject
	AsMoveObject PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject `json:"asMoveObject"`
	// Attempts to convert the object into a MovePackage
	AsMovePackage PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMoveObject returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject) GetAsMoveObject() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject {
	return v.AsMoveObject
}

// GetAsMovePackage returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject) GetAsMovePackage() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage {
	return v.AsMovePackage
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue `json:"contents"`
}

// GetContents returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject) GetContents() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue {
	return v.Contents
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue) GetType() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage struct {
	// Paginate through the MoveModules defined in this package.
	Modules PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection `json:"modules"`
}

// GetModules returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage.Modules, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage) GetModules() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection {
	return v.Modules
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection includes the requested fields of the GraphQL type MoveModuleConnection.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection struct {
	// A list of nodes.
	Nodes []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule `json:"nodes"`
}

// GetNodes returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection) GetNodes() []PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule {
	return v.Nodes
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule struct {
	// The module's (unqualified) name.
	Name string `json:"name"`
}

// GetName returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Name, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetName() string {
	return v.Name
}

// PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateCheckpointTransactionBlocksCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type PaginateCheckpointTransactionBlocksCheckpoint struct {
	// Transactions in this checkpoint.
	//
	// `scanLimit` restricts the number of candidate transactions scanned when gathering a page of
	// results. It is required for queries that apply more than two complex filters (on function,
	// kind, sender, recipient, input object, changed object, or ids), and can be at most
	// `serviceConfig.maxScanLimit`.
	//
	// When the scan limit is reached the page will be returned even if it has fewer than `first`
	// results when paginating forward (`last` when paginating backwards). If there are more
	// transactions to scan, `pageInfo.hasNextPage` (or `pageInfo.hasPreviousPage`) will be set to
	// `true`, and `PageInfo.endCursor` (or `PageInfo.startCursor`) will be set to the last
	// transaction that was scanned as opposed to the last (or first) transaction in the page.
	//
	// Requesting the next (or previous) page after this cursor will resume the search, scanning
	// the next `scanLimit` many transactions in the direction of pagination, and so on until all
	// transactions in the scanning range have been visited.
	//
	// By default, the scanning range consists of all transactions in this checkpoint.
	TransactionBlocks PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`
}

// GetTransactionBlocks returns PaginateCheckpointTransactionBlocksCheckpoint.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpoint) GetTransactionBlocks() PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection {
	return v.TransactionBlocks
}

// PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetPageInfo returns PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection) GetPageInfo() PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnection) GetNodes() []PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetDigest() string {
	return v.Digest
}

// PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksCheckpointTransactionBlocksTransactionBlockConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateCheckpointTransactionBlocksResponse is returned by PaginateCheckpointTransactionBlocks on success.
type PaginateCheckpointTransactionBlocksResponse struct {
	// Fetch checkpoint information by sequence number or digest (defaults to the latest available
	// checkpoint).
	Checkpoint PaginateCheckpointTransactionBlocksCheckpoint `json:"checkpoint"`
}

// GetCheckpoint returns PaginateCheckpointTransactionBlocksResponse.Checkpoint, and is useful for accessing the field via an interface.
func (v *PaginateCheckpointTransactionBlocksResponse) GetCheckpoint() PaginateCheckpointTransactionBlocksCheckpoint {
	return v.Checkpoint
}

// PaginateEpochValidatorsEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type PaginateEpochValidatorsEpoch struct {
	// Validator related properties, including the active validators.
	ValidatorSet PaginateEpochValidatorsEpochValidatorSet `json:"validatorSet"`
}

// GetValidatorSet returns PaginateEpochValidatorsEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpoch) GetValidatorSet() PaginateEpochValidatorsEpochValidatorSet {
	return v.ValidatorSet
}

// PaginateEpochValidatorsEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type PaginateEpochValidatorsEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
}

// GetActiveValidators returns PaginateEpochValidatorsEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSet) GetActiveValidators() PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	RPC_VALIDATOR_FIELDS `json:"-"`
}

// GetAtRisk returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.AtRisk, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAtRisk() uint64 {
	return v.RPC_VALIDATOR_FIELDS.AtRisk
}

// GetCommissionRate returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.CommissionRate, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.CommissionRate
}

// GetExchangeRatesSize returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRatesSize, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRatesSize() uint64 {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
}

// GetExchangeRates returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ExchangeRates, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetExchangeRates() RPC_VALIDATOR_FIELDSExchangeRatesMoveObject {
	return v.RPC_VALIDATOR_FIELDS.ExchangeRates
}

// GetDescription returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Description, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetDescription() string {
	return v.RPC_VALIDATOR_FIELDS.Description
}

// GetGasPrice returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.GasPrice, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.GasPrice
}

// GetImageUrl returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ImageUrl, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetImageUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ImageUrl
}

// GetName returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Name, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetName() string {
	return v.RPC_VALIDATOR_FIELDS.Name
}

// GetCredentials returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Credentials, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCredentials() RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.Credentials
}

// GetNextEpochCommissionRate returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCommissionRate, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCommissionRate() int {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
}

// GetNextEpochGasPrice returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochGasPrice, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochGasPrice() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
}

// GetNextEpochCredentials returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochCredentials, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochCredentials() RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials {
	return v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
}

// GetNextEpochStake returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.NextEpochStake, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetNextEpochStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.NextEpochStake
}

// GetOperationCap returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.OperationCap, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetOperationCap() RPC_VALIDATOR_FIELDSOperationCapMoveObject {
	return v.RPC_VALIDATOR_FIELDS.OperationCap
}

// GetPendingPoolTokenWithdraw returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingPoolTokenWithdraw, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingPoolTokenWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
}

// GetPendingStake returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingStake, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingStake() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingStake
}

// GetPendingTotalSuiWithdraw returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PendingTotalSuiWithdraw, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPendingTotalSuiWithdraw() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
}

// GetPoolTokenBalance returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.PoolTokenBalance, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetPoolTokenBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
}

// GetProjectUrl returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.ProjectUrl, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetProjectUrl() string {
	return v.RPC_VALIDATOR_FIELDS.ProjectUrl
}

// GetRewardsPool returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.RewardsPool, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetRewardsPool() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.RewardsPool
}

// GetStakingPool returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPool, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPool() RPC_VALIDATOR_FIELDSStakingPoolMoveObject {
	return v.RPC_VALIDATOR_FIELDS.StakingPool
}

// GetStakingPoolActivationEpoch returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolActivationEpoch, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolActivationEpoch() uint64 {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
}

// GetStakingPoolSuiBalance returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.StakingPoolSuiBalance, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetStakingPoolSuiBalance() sui.BigInt {
	return v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
}

// GetAddress returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Address, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetAddress() RPC_VALIDATOR_FIELDSAddress {
	return v.RPC_VALIDATOR_FIELDS.Address
}

// GetVotingPower returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.VotingPower, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetVotingPower() int {
	return v.RPC_VALIDATOR_FIELDS.VotingPower
}

func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator
		graphql.NoUnmarshalJSON
	}
	firstPass.PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_VALIDATOR_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	AtRisk uint64 `json:"atRisk"`

	CommissionRate int `json:"commissionRate"`

	ExchangeRatesSize uint64 `json:"exchangeRatesSize"`

	ExchangeRates RPC_VALIDATOR_FIELDSExchangeRatesMoveObject `json:"exchangeRates"`

	Description string `json:"description"`

	GasPrice sui.BigInt `json:"gasPrice"`

	ImageUrl string `json:"imageUrl"`

	Name string `json:"name"`

	Credentials RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials `json:"credentials"`

	NextEpochCommissionRate int `json:"nextEpochCommissionRate"`

	NextEpochGasPrice sui.BigInt `json:"nextEpochGasPrice"`

	NextEpochCredentials RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials `json:"nextEpochCredentials"`

	NextEpochStake sui.BigInt `json:"nextEpochStake"`

	OperationCap RPC_VALIDATOR_FIELDSOperationCapMoveObject `json:"operationCap"`

	PendingPoolTokenWithdraw sui.BigInt `json:"pendingPoolTokenWithdraw"`

	PendingStake sui.BigInt `json:"pendingStake"`

	PendingTotalSuiWithdraw sui.BigInt `json:"pendingTotalSuiWithdraw"`

	PoolTokenBalance sui.BigInt `json:"poolTokenBalance"`

	ProjectUrl string `json:"projectUrl"`

	RewardsPool sui.BigInt `json:"rewardsPool"`

	StakingPool RPC_VALIDATOR_FIELDSStakingPoolMoveObject `json:"stakingPool"`

	StakingPoolActivationEpoch uint64 `json:"stakingPoolActivationEpoch"`

	StakingPoolSuiBalance sui.BigInt `json:"stakingPoolSuiBalance"`

	Address RPC_VALIDATOR_FIELDSAddress `json:"address"`

	VotingPower int `json:"votingPower"`
}

func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) __premarshalJSON() (*__premarshalPaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator, error) {
	var retval __premarshalPaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator

	retval.AtRisk = v.RPC_VALIDATOR_FIELDS.AtRisk
	retval.CommissionRate = v.RPC_VALIDATOR_FIELDS.CommissionRate
	retval.ExchangeRatesSize = v.RPC_VALIDATOR_FIELDS.ExchangeRatesSize
	retval.ExchangeRates = v.RPC_VALIDATOR_FIELDS.ExchangeRates
	retval.Description = v.RPC_VALIDATOR_FIELDS.Description
	retval.GasPrice = v.RPC_VALIDATOR_FIELDS.GasPrice
	retval.ImageUrl = v.RPC_VALIDATOR_FIELDS.ImageUrl
	retval.Name = v.RPC_VALIDATOR_FIELDS.Name
	retval.Credentials = v.RPC_VALIDATOR_FIELDS.Credentials
	retval.NextEpochCommissionRate = v.RPC_VALIDATOR_FIELDS.NextEpochCommissionRate
	retval.NextEpochGasPrice = v.RPC_VALIDATOR_FIELDS.NextEpochGasPrice
	retval.NextEpochCredentials = v.RPC_VALIDATOR_FIELDS.NextEpochCredentials
	retval.NextEpochStake = v.RPC_VALIDATOR_FIELDS.NextEpochStake
	retval.OperationCap = v.RPC_VALIDATOR_FIELDS.OperationCap
	retval.PendingPoolTokenWithdraw = v.RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw
	retval.PendingStake = v.RPC_VALIDATOR_FIELDS.PendingStake
	retval.PendingTotalSuiWithdraw = v.RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw
	retval.PoolTokenBalance = v.RPC_VALIDATOR_FIELDS.PoolTokenBalance
	retval.ProjectUrl = v.RPC_VALIDATOR_FIELDS.ProjectUrl
	retval.RewardsPool = v.RPC_VALIDATOR_FIELDS.RewardsPool
	retval.StakingPool = v.RPC_VALIDATOR_FIELDS.StakingPool
	retval.StakingPoolActivationEpoch = v.RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch
	retval.StakingPoolSuiBalance = v.RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance
	retval.Address = v.RPC_VALIDATOR_FIELDS.Address
	retval.VotingPower = v.RPC_VALIDATOR_FIELDS.VotingPower
	return &retval, nil
}

// PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateEpochValidatorsResponse is returned by PaginateEpochValidators on success.
type PaginateEpochValidatorsResponse struct {
	// Fetch epoch information by ID (defaults to the latest epoch).
	Epoch PaginateEpochValidatorsEpoch `json:"epoch"`
}

// GetEpoch returns PaginateEpochValidatorsResponse.Epoch, and is useful for accessing the field via an interface.
func (v *PaginateEpochValidatorsResponse) GetEpoch() PaginateEpochValidatorsEpoch { return v.Epoch }

// PaginateMoveModuleListsObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type PaginateMoveModuleListsObject struct {
	// Attempts to convert the object into a MovePackage
	AsMovePackage PaginateMoveModuleListsObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMovePackage returns PaginateMoveModuleListsObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObject) GetAsMovePackage() PaginateMoveModuleListsObjectAsMovePackage {
	return v.AsMovePackage
}

// PaginateMoveModuleListsObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type PaginateMoveModuleListsObjectAsMovePackage struct {
	// A representation of the module called `name` in this package, including the
	// structs and functions it defines.
	Module PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule `json:"module"`
}

// GetModule returns PaginateMoveModuleListsObjectAsMovePackage.Module, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackage) GetModule() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule {
	return v.Module
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule struct {
	// Modules that this module considers friends (these modules can access `public(friend)`
	// functions from this module).
	Friends PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection `json:"friends"`
	// Iterate through the structs defined in this module.
	Structs PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection `json:"structs"`
	// Iterate through the enums defined in this module.
	Enums PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection `json:"enums"`
	// Iterate through the signatures of functions defined in this module.
	Functions PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection `json:"functions"`
}

// GetFriends returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule.Friends, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule) GetFriends() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection {
	return v.Friends
}

// GetStructs returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule.Structs, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule) GetStructs() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection {
	return v.Structs
}

// GetEnums returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule.Enums, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule) GetEnums() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection {
	return v.Enums
}

// GetFunctions returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule.Functions, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModule) GetFunctions() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection {
	return v.Functions
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection includes the requested fields of the GraphQL type MoveEnumConnection.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum `json:"nodes"`
}

// GetPageInfo returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection) GetPageInfo() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnection) GetNodes() []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum {
	return v.Nodes
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum includes the requested fields of the GraphQL type MoveEnum.
// The GraphQL type's documentation follows.
//
// Description of an enum type, defined in a Move module.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum struct {
	RPC_MOVE_ENUM_FIELDS `json:"-"`
}

// GetName returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum.Name, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) GetName() string {
	return v.RPC_MOVE_ENUM_FIELDS.Name
}

// GetAbilities returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum.Abilities, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) GetAbilities() []MoveAbility {
	return v.RPC_MOVE_ENUM_FIELDS.Abilities
}

// GetTypeParameters returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum.TypeParameters, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) GetTypeParameters() []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter {
	return v.RPC_MOVE_ENUM_FIELDS.TypeParameters
}

// GetVariants returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum.Variants, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) GetVariants() []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant {
	return v.RPC_MOVE_ENUM_FIELDS.Variants
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum
		graphql.NoUnmarshalJSON
	}
	firstPass.PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_ENUM_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum struct {
	Name string `json:"name"`

	Abilities []MoveAbility `json:"abilities"`

	TypeParameters []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`

	Variants []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant `json:"variants"`
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum) __premarshalJSON() (*__premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum, error) {
	var retval __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionNodesMoveEnum

	retval.Name = v.RPC_MOVE_ENUM_FIELDS.Name
	retval.Abilities = v.RPC_MOVE_ENUM_FIELDS.Abilities
	retval.TypeParameters = v.RPC_MOVE_ENUM_FIELDS.TypeParameters
	retval.Variants = v.RPC_MOVE_ENUM_FIELDS.Variants
	return &retval, nil
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleEnumsMoveEnumConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection includes the requested fields of the GraphQL type MoveModuleConnection.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule `json:"nodes"`
}

// GetPageInfo returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection) GetPageInfo() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnection) GetNodes() []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule {
	return v.Nodes
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule struct {
	// The module's (unqualified) name.
	Name string `json:"name"`
	// The package that this Move module was defined in
	Package PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage `json:"package"`
}

// GetName returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule.Name, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule) GetName() string {
	return v.Name
}

// GetPackage returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule.Package, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModule) GetPackage() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage {
	return v.Package
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage.Address, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage) GetAddress() sui.Address {
	return v.Address
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFriendsMoveModuleConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection includes the requested fields of the GraphQL type MoveFunctionConnection.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction `json:"nodes"`
}

// GetPageInfo returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection) GetPageInfo() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnection) GetNodes() []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction {
	return v.Nodes
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction includes the requested fields of the GraphQL type MoveFunction.
// The GraphQL type's documentation follows.
//
// Signature of a function, defined in a Move module.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction struct {
	RPC_MOVE_FUNCTION_FIELDS `json:"-"`
}

// GetName returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.Name, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetName() string {
	return v.RPC_MOVE_FUNCTION_FIELDS.Name
}

// GetVisibility returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.Visibility, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetVisibility() MoveVisibility {
	return v.RPC_MOVE_FUNCTION_FIELDS.Visibility
}

// GetIsEntry returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.IsEntry, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetIsEntry() bool {
	return v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
}

// GetParameters returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.Parameters, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetParameters() []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Parameters
}

// GetTypeParameters returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.TypeParameters, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetTypeParameters() []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter {
	return v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
}

// GetReturn returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction.Return, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) GetReturn() []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Return
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_FUNCTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction struct {
	Name string `json:"name"`

	Visibility MoveVisibility `json:"visibility"`

	IsEntry bool `json:"isEntry"`

	Parameters []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType `json:"parameters"`

	TypeParameters []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter `json:"typeParameters"`

	Return []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType `json:"return"`
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction) __premarshalJSON() (*__premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction, error) {
	var retval __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionNodesMoveFunction

	retval.Name = v.RPC_MOVE_FUNCTION_FIELDS.Name
	retval.Visibility = v.RPC_MOVE_FUNCTION_FIELDS.Visibility
	retval.IsEntry = v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
	retval.Parameters = v.RPC_MOVE_FUNCTION_FIELDS.Parameters
	retval.TypeParameters = v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
	retval.Return = v.RPC_MOVE_FUNCTION_FIELDS.Return
	return &retval, nil
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleFunctionsMoveFunctionConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection includes the requested fields of the GraphQL type MoveStructConnection.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection struct {
	// Information to aid in pagination.
	PageInfo PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct `json:"nodes"`
}

// GetPageInfo returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection) GetPageInfo() PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection.Nodes, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnection) GetNodes() []PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct {
	return v.Nodes
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct includes the requested fields of the GraphQL type MoveStruct.
// The GraphQL type's documentation follows.
//
// Description of a struct type, defined in a Move module.
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct struct {
	RPC_MOVE_STRUCT_FIELDS `json:"-"`
}

// GetName returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct.Name, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) GetName() string {
	return v.RPC_MOVE_STRUCT_FIELDS.Name
}

// GetAbilities returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct.Abilities, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) GetAbilities() []MoveAbility {
	return v.RPC_MOVE_STRUCT_FIELDS.Abilities
}

// GetFields returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct.Fields, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) GetFields() []RPC_MOVE_STRUCT_FIELDSFieldsMoveField {
	return v.RPC_MOVE_STRUCT_FIELDS.Fields
}

// GetTypeParameters returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct.TypeParameters, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) GetTypeParameters() []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter {
	return v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct
		graphql.NoUnmarshalJSON
	}
	firstPass.PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_STRUCT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct struct {
	Name string `json:"name"`

	Abilities []MoveAbility `json:"abilities"`

	Fields []RPC_MOVE_STRUCT_FIELDSFieldsMoveField `json:"fields"`

	TypeParameters []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct) __premarshalJSON() (*__premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct, error) {
	var retval __premarshalPaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionNodesMoveStruct

	retval.Name = v.RPC_MOVE_STRUCT_FIELDS.Name
	retval.Abilities = v.RPC_MOVE_STRUCT_FIELDS.Abilities
	retval.Fields = v.RPC_MOVE_STRUCT_FIELDS.Fields
	retval.TypeParameters = v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
	return &retval, nil
}

// PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsObjectAsMovePackageModuleMoveModuleStructsMoveStructConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// PaginateMoveModuleListsResponse is returned by PaginateMoveModuleLists on success.
type PaginateMoveModuleListsResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object PaginateMoveModuleListsObject `json:"object"`
}

// GetObject returns PaginateMoveModuleListsResponse.Object, and is useful for accessing the field via an interface.
func (v *PaginateMoveModuleListsResponse) GetObject() PaginateMoveModuleListsObject { return v.Object }

// PaginateTransactionBlockListsResponse is returned by PaginateTransactionBlockLists on success.
type PaginateTransactionBlockListsResponse struct {
	// Fetch a transaction block by its transaction digest.
	TransactionBlock PaginateTransactionBlockListsTransactionBlock `json:"transactionBlock"`
}

// GetTransactionBlock returns PaginateTransactionBlockListsResponse.TransactionBlock, and is useful for accessing the field via an interface.
func (v *PaginateTransactionBlockListsResponse) GetTransactionBlock() PaginateTransactionBlockListsTransactionBlock {
	return v.TransactionBlock
}

// PaginateTransactionBlockListsTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type PaginateTransactionBlockListsTransactionBlock struct {
	PAGINATE_TRANSACTION_LISTS `json:"-"`
}

// GetEffects returns PaginateTransactionBlockListsTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *PaginateTransactionBlockListsTransactionBlock) GetEffects() PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects {
	return v.PAGINATE_TRANSACTION_LISTS.Effects
}

func (v *PaginateTransactionBlockListsTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PaginateTransactionBlockListsTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.PaginateTransactionBlockListsTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PAGINATE_TRANSACTION_LISTS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPaginateTransactionBlockListsTransactionBlock struct {
	Effects PAGINATE_TRANSACTION_LISTSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *PaginateTransactionBlockListsTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PaginateTransactionBlockListsTransactionBlock) __premarshalJSON() (*__premarshalPaginateTransactionBlockListsTransactionBlock, error) {
	var retval __premarshalPaginateTransactionBlockListsTransactionBlock

	retval.Effects = v.PAGINATE_TRANSACTION_LISTS.Effects
	return &retval, nil
}

// QueryEventsEventsEventConnection includes the requested fields of the GraphQL type EventConnection.
type QueryEventsEventsEventConnection struct {
	// Information to aid in pagination.
	PageInfo QueryEventsEventsEventConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []QueryEventsEventsEventConnectionNodesEvent `json:"nodes"`
}

// GetPageInfo returns QueryEventsEventsEventConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnection) GetPageInfo() QueryEventsEventsEventConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns QueryEventsEventsEventConnection.Nodes, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnection) GetNodes() []QueryEventsEventsEventConnectionNodesEvent {
	return v.Nodes
}

// QueryEventsEventsEventConnectionNodesEvent includes the requested fields of the GraphQL type Event.
type QueryEventsEventsEventConnectionNodesEvent struct {
	RPC_EVENTS_FIELDS `json:"-"`
}

// GetSendingModule returns QueryEventsEventsEventConnectionNodesEvent.SendingModule, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionNodesEvent) GetSendingModule() RPC_EVENTS_FIELDSSendingModuleMoveModule {
	return v.RPC_EVENTS_FIELDS.SendingModule
}

// GetSender returns QueryEventsEventsEventConnectionNodesEvent.Sender, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionNodesEvent) GetSender() RPC_EVENTS_FIELDSSenderAddress {
	return v.RPC_EVENTS_FIELDS.Sender
}

// GetContents returns QueryEventsEventsEventConnectionNodesEvent.Contents, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionNodesEvent) GetContents() RPC_EVENTS_FIELDSContentsMoveValue {
	return v.RPC_EVENTS_FIELDS.Contents
}

// GetTimestamp returns QueryEventsEventsEventConnectionNodesEvent.Timestamp, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionNodesEvent) GetTimestamp() time.Time {
	return v.RPC_EVENTS_FIELDS.Timestamp
}

func (v *QueryEventsEventsEventConnectionNodesEvent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*QueryEventsEventsEventConnectionNodesEvent
		graphql.NoUnmarshalJSON
	}
	firstPass.QueryEventsEventsEventConnectionNodesEvent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_EVENTS_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalQueryEventsEventsEventConnectionNodesEvent struct {
	SendingModule RPC_EVENTS_FIELDSSendingModuleMoveModule `json:"sendingModule"`

	Sender RPC_EVENTS_FIELDSSenderAddress `json:"sender"`

	Contents RPC_EVENTS_FIELDSContentsMoveValue `json:"contents"`

	Timestamp time.Time `json:"timestamp"`
}

func (v *QueryEventsEventsEventConnectionNodesEvent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *QueryEventsEventsEventConnectionNodesEvent) __premarshalJSON() (*__premarshalQueryEventsEventsEventConnectionNodesEvent, error) {
	var retval __premarshalQueryEventsEventsEventConnectionNodesEvent

	retval.SendingModule = v.RPC_EVENTS_FIELDS.SendingModule
	retval.Sender = v.RPC_EVENTS_FIELDS.Sender
	retval.Contents = v.RPC_EVENTS_FIELDS.Contents
	retval.Timestamp = v.RPC_EVENTS_FIELDS.Timestamp
	return &retval, nil
}

// QueryEventsEventsEventConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type QueryEventsEventsEventConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
}

// GetHasNextPage returns QueryEventsEventsEventConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns QueryEventsEventsEventConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetEndCursor returns QueryEventsEventsEventConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetStartCursor returns QueryEventsEventsEventConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *QueryEventsEventsEventConnectionPageInfo) GetStartCursor() string { return v.StartCursor }

// QueryEventsResponse is returned by QueryEvents on success.
type QueryEventsResponse struct {
	// Query events that are emitted in the network.
	// We currently do not support filtering by emitting module and event type
	// at the same time so if both are provided in one filter, the query will error.
	Events QueryEventsEventsEventConnection `json:"events"`
}

// GetEvents returns QueryEventsResponse.Events, and is useful for accessing the field via an interface.
func (v *QueryEventsResponse) GetEvents() QueryEventsEventsEventConnection { return v.Events }

// QueryTransactionBlocksResponse is returned by QueryTransactionBlocks on success.
type QueryTransactionBlocksResponse struct {
	// The transaction blocks that exist in the network.
	//
	// `scanLimit` restricts the number of candidate transactions scanned when gathering a page of
	// results. It is required for queries that apply more than two complex filters (on function,
	// kind, sender, recipient, input object, changed object, or ids), and can be at most
	// `serviceConfig.maxScanLimit`.
	//
	// When the scan limit is reached the page will be returned even if it has fewer than `first`
	// results when paginating forward (`last` when paginating backwards). If there are more
	// transactions to scan, `pageInfo.hasNextPage` (or `pageInfo.hasPreviousPage`) will be set to
	// `true`, and `PageInfo.endCursor` (or `PageInfo.startCursor`) will be set to the last
	// transaction that was scanned as opposed to the last (or first) transaction in the page.
	//
	// Requesting the next (or previous) page after this cursor will resume the search, scanning
	// the next `scanLimit` many transactions in the direction of pagination, and so on until all
	// transactions in the scanning range have been visited.
	//
	// By default, the scanning range includes all transactions known to GraphQL, but it can be
	// restricted by the `after` and `before` cursors, and the `beforeCheckpoint`,
	// `afterCheckpoint` and `atCheckpoint` filters.
	TransactionBlocks QueryTransactionBlocksTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`
}

// GetTransactionBlocks returns QueryTransactionBlocksResponse.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksResponse) GetTransactionBlocks() QueryTransactionBlocksTransactionBlocksTransactionBlockConnection {
	return v.TransactionBlocks
}

// QueryTransactionBlocksTransactionBlocksTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type QueryTransactionBlocksTransactionBlocksTransactionBlockConnection struct {
	// Information to aid in pagination.
	PageInfo QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetPageInfo returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnection) GetPageInfo() QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnection) GetNodes() []QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	RPC_TRANSACTION_FIELDS `json:"-"`
}

// GetDigest returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetDigest() string {
	return v.RPC_TRANSACTION_FIELDS.Digest
}

// GetRawTransaction returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.RawTransaction, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetRawTransaction() sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.RawTransaction
}

// GetSender returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Sender, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetSender() RPC_TRANSACTION_FIELDSSenderAddress {
	return v.RPC_TRANSACTION_FIELDS.Sender
}

// GetSignatures returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Signatures, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetSignatures() []sui.Base64 {
	return v.RPC_TRANSACTION_FIELDS.Signatures
}

// GetEffects returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Effects, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.RPC_TRANSACTION_FIELDS.Effects
}

func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock
		graphql.NoUnmarshalJSON
	}
	firstPass.QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_TRANSACTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalQueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	Digest string `json:"digest"`

	RawTransaction sui.Base64 `json:"rawTransaction"`

	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`

	Signatures []sui.Base64 `json:"signatures"`

	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) __premarshalJSON() (*__premarshalQueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock, error) {
	var retval __premarshalQueryTransactionBlocksTransactionBlocksTransactionBlockConnectionNodesTransactionBlock

	retval.Digest = v.RPC_TRANSACTION_FIELDS.Digest
	retval.RawTransaction = v.RPC_TRANSACTION_FIELDS.RawTransaction
	retval.Sender = v.RPC_TRANSACTION_FIELDS.Sender
	retval.Signatures = v.RPC_TRANSACTION_FIELDS.Signatures
	retval.Effects = v.RPC_TRANSACTION_FIELDS.Effects
	return &retval, nil
}

// QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetHasPreviousPage returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetHasPreviousPage() bool {
	return v.HasPreviousPage
}

// GetStartCursor returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.StartCursor, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetStartCursor() string {
	return v.StartCursor
}

// GetEndCursor returns QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *QueryTransactionBlocksTransactionBlocksTransactionBlockConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_CREDENTIAL_FIELDS includes the GraphQL fields of ValidatorCredentials requested by the fragment RPC_CREDENTIAL_FIELDS.
// The GraphQL type's documentation follows.
//
// The credentials related fields associated with a validator.
type RPC_CREDENTIAL_FIELDS struct {
	NetAddress        string     `json:"netAddress"`
	NetworkPubKey     sui.Base64 `json:"networkPubKey"`
	P2PAddress        string     `json:"p2PAddress"`
	PrimaryAddress    string     `json:"primaryAddress"`
	WorkerPubKey      sui.Base64 `json:"workerPubKey"`
	WorkerAddress     string     `json:"workerAddress"`
	ProofOfPossession sui.Base64 `json:"proofOfPossession"`
	ProtocolPubKey    sui.Base64 `json:"protocolPubKey"`
}

// GetNetAddress returns RPC_CREDENTIAL_FIELDS.NetAddress, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetNetAddress() string { return v.NetAddress }

// GetNetworkPubKey returns RPC_CREDENTIAL_FIELDS.NetworkPubKey, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetNetworkPubKey() sui.Base64 { return v.NetworkPubKey }

// GetP2PAddress returns RPC_CREDENTIAL_FIELDS.P2PAddress, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetP2PAddress() string { return v.P2PAddress }

// GetPrimaryAddress returns RPC_CREDENTIAL_FIELDS.PrimaryAddress, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetPrimaryAddress() string { return v.PrimaryAddress }

// GetWorkerPubKey returns RPC_CREDENTIAL_FIELDS.WorkerPubKey, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetWorkerPubKey() sui.Base64 { return v.WorkerPubKey }

// GetWorkerAddress returns RPC_CREDENTIAL_FIELDS.WorkerAddress, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetWorkerAddress() string { return v.WorkerAddress }

// GetProofOfPossession returns RPC_CREDENTIAL_FIELDS.ProofOfPossession, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetProofOfPossession() sui.Base64 { return v.ProofOfPossession }

// GetProtocolPubKey returns RPC_CREDENTIAL_FIELDS.ProtocolPubKey, and is useful for accessing the field via an interface.
func (v *RPC_CREDENTIAL_FIELDS) GetProtocolPubKey() sui.Base64 { return v.ProtocolPubKey }

// RPC_Checkpoint_Fields includes the GraphQL fields of Checkpoint requested by the fragment RPC_Checkpoint_Fields.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type RPC_Checkpoint_Fields struct {
	// A 32-byte hash that uniquely identifies the checkpoint contents, encoded in Base58. This
	// hash can be used to verify checkpoint contents by checking signatures against the committee,
	// Hashing contents to match digest, and checking that the previous checkpoint digest matches.
	Digest string `json:"digest"`
	// The epoch this checkpoint is part of.
	Epoch RPC_Checkpoint_FieldsEpoch `json:"epoch"`
	// The computation cost, storage cost, storage rebate, and non-refundable storage fee
	// accumulated during this epoch, up to and including this checkpoint. These values increase
	// monotonically across checkpoints in the same epoch, and reset on epoch boundaries.
	RollingGasSummary RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary `json:"rollingGasSummary"`
	// The total number of transaction blocks in the network by the end of this checkpoint.
	NetworkTotalTransactions uint64 `json:"networkTotalTransactions"`
	// The digest of the checkpoint at the previous sequence number.
	PreviousCheckpointDigest string `json:"previousCheckpointDigest"`
	// This checkpoint's position in the total order of finalized checkpoints, agreed upon by
	// consensus.
	SequenceNumber uint64 `json:"sequenceNumber"`
	// The timestamp at which the checkpoint is agreed to have happened according to consensus.
	// Transactions that access time in this checkpoint will observe this timestamp.
	Timestamp time.Time `json:"timestamp"`
	// This is an aggregation of signatures from a quorum of validators for the checkpoint
	// proposal.
	ValidatorSignatures sui.Base64 `json:"validatorSignatures"`
	// Transactions in this checkpoint.
	//
	// `scanLimit` restricts the number of candidate transactions scanned when gathering a page of
	// results. It is required for queries that apply more than two complex filters (on function,
	// kind, sender, recipient, input object, changed object, or ids), and can be at most
	// `serviceConfig.maxScanLimit`.
	//
	// When the scan limit is reached the page will be returned even if it has fewer than `first`
	// results when paginating forward (`last` when paginating backwards). If there are more
	// transactions to scan, `pageInfo.hasNextPage` (or `pageInfo.hasPreviousPage`) will be set to
	// `true`, and `PageInfo.endCursor` (or `PageInfo.startCursor`) will be set to the last
	// transaction that was scanned as opposed to the last (or first) transaction in the page.
	//
	// Requesting the next (or previous) page after this cursor will resume the search, scanning
	// the next `scanLimit` many transactions in the direction of pagination, and so on until all
	// transactions in the scanning range have been visited.
	//
	// By default, the scanning range consists of all transactions in this checkpoint.
	TransactionBlocks RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection `json:"transactionBlocks"`
	// Transactions in this checkpoint.
	//
	// `scanLimit` restricts the number of candidate transactions scanned when gathering a page of
	// results. It is required for queries that apply more than two complex filters (on function,
	// kind, sender, recipient, input object, changed object, or ids), and can be at most
	// `serviceConfig.maxScanLimit`.
	//
	// When the scan limit is reached the page will be returned even if it has fewer than `first`
	// results when paginating forward (`last` when paginating backwards). If there are more
	// transactions to scan, `pageInfo.hasNextPage` (or `pageInfo.hasPreviousPage`) will be set to
	// `true`, and `PageInfo.endCursor` (or `PageInfo.startCursor`) will be set to the last
	// transaction that was scanned as opposed to the last (or first) transaction in the page.
	//
	// Requesting the next (or previous) page after this cursor will resume the search, scanning
	// the next `scanLimit` many transactions in the direction of pagination, and so on until all
	// transactions in the scanning range have been visited.
	//
	// By default, the scanning range consists of all transactions in this checkpoint.
	EndOfEpoch RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection `json:"endOfEpoch"`
}

// GetDigest returns RPC_Checkpoint_Fields.Digest, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetDigest() string { return v.Digest }

// GetEpoch returns RPC_Checkpoint_Fields.Epoch, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetEpoch() RPC_Checkpoint_FieldsEpoch { return v.Epoch }

// GetRollingGasSummary returns RPC_Checkpoint_Fields.RollingGasSummary, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetRollingGasSummary() RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary {
	return v.RollingGasSummary
}

// GetNetworkTotalTransactions returns RPC_Checkpoint_Fields.NetworkTotalTransactions, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetNetworkTotalTransactions() uint64 {
	return v.NetworkTotalTransactions
}

// GetPreviousCheckpointDigest returns RPC_Checkpoint_Fields.PreviousCheckpointDigest, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetPreviousCheckpointDigest() string {
	return v.PreviousCheckpointDigest
}

// GetSequenceNumber returns RPC_Checkpoint_Fields.SequenceNumber, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetSequenceNumber() uint64 { return v.SequenceNumber }

// GetTimestamp returns RPC_Checkpoint_Fields.Timestamp, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetTimestamp() time.Time { return v.Timestamp }

// GetValidatorSignatures returns RPC_Checkpoint_Fields.ValidatorSignatures, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetValidatorSignatures() sui.Base64 { return v.ValidatorSignatures }

// GetTransactionBlocks returns RPC_Checkpoint_Fields.TransactionBlocks, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetTransactionBlocks() RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection {
	return v.TransactionBlocks
}

// GetEndOfEpoch returns RPC_Checkpoint_Fields.EndOfEpoch, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_Fields) GetEndOfEpoch() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection {
	return v.EndOfEpoch
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection struct {
	// A list of nodes.
	Nodes []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetNodes returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnection) GetNodes() []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock struct {
	// The type of this transaction as well as the commands and/or parameters comprising the
	// transaction of this kind.
	Kind RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind `json:"-"`
}

// GetKind returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock.Kind, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock) GetKind() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind {
	return v.Kind
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock
		Kind json.RawMessage `json:"kind"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Kind
		src := firstPass.Kind
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock.Kind: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock struct {
	Kind json.RawMessage `json:"kind"`
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock) __premarshalJSON() (*__premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock, error) {
	var retval __premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock

	{

		dst := &retval.Kind
		src := v.Kind
		var err error
		*dst, err = __marshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlock.Kind: %w", err)
		}
	}
	return &retval, nil
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind includes the requested fields of the GraphQL interface TransactionBlockKind.
//
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind is implemented by the following types:
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction
// The GraphQL type's documentation follows.
//
// The kind of transaction block, either a programmable transaction or a system transaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind interface {
	implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind() {
}

func __unmarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind(b []byte, v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AuthenticatorStateUpdateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction)
		return json.Unmarshal(b, *v)
	case "ChangeEpochTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction)
		return json.Unmarshal(b, *v)
	case "ConsensusCommitPrologueTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction)
		return json.Unmarshal(b, *v)
	case "EndOfEpochTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction)
		return json.Unmarshal(b, *v)
	case "GenesisTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction)
		return json.Unmarshal(b, *v)
	case "ProgrammableTransactionBlock":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock)
		return json.Unmarshal(b, *v)
	case "RandomnessStateUpdateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing TransactionBlockKind.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind: "%v"`, tn.TypeName)
	}
}

func __marshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind(v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction:
		typename = "AuthenticatorStateUpdateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction:
		typename = "ChangeEpochTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction:
		typename = "ConsensusCommitPrologueTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction:
		typename = "EndOfEpochTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction:
		typename = "GenesisTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock:
		typename = "ProgrammableTransactionBlock"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction:
		typename = "RandomnessStateUpdateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKind: "%T"`, v)
	}
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction includes the requested fields of the GraphQL type AuthenticatorStateUpdateTransaction.
// The GraphQL type's documentation follows.
//
// System transaction for updating the on-chain state used by zkLogin.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindAuthenticatorStateUpdateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction includes the requested fields of the GraphQL type ChangeEpochTransaction.
// The GraphQL type's documentation follows.
//
// A system transaction that updates epoch information on-chain (increments the current epoch).
// Executed by the system once per epoch, without using gas. Epoch change transactions cannot be
// submitted by users, because validators will refuse to sign them.
//
// This transaction kind is deprecated in favour of `EndOfEpochTransaction`.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindChangeEpochTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction includes the requested fields of the GraphQL type ConsensusCommitPrologueTransaction.
// The GraphQL type's documentation follows.
//
// System transaction that runs at the beginning of a checkpoint, and is responsible for setting
// the current value of the clock, based on the timestamp from consensus.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindConsensusCommitPrologueTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction includes the requested fields of the GraphQL type EndOfEpochTransaction.
// The GraphQL type's documentation follows.
//
// System transaction that supersedes `ChangeEpochTransaction` as the new way to run transactions
// at the end of an epoch. Behaves similarly to `ChangeEpochTransaction` but can accommodate other
// optional transactions to run at the end of the epoch.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction struct {
	Typename string `json:"__typename"`
	// The list of system transactions that are allowed to run at the end of the epoch.
	Transactions RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection `json:"transactions"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction) GetTypename() string {
	return v.Typename
}

// GetTransactions returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction.Transactions, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransaction) GetTransactions() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection {
	return v.Transactions
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection includes the requested fields of the GraphQL type EndOfEpochTransactionKindConnection.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection struct {
	// A list of nodes.
	Nodes []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind `json:"-"`
}

// GetNodes returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection) GetNodes() []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind {
	return v.Nodes
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection) __premarshalJSON() (*__premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection, error) {
	var retval __premarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnection.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction includes the requested fields of the GraphQL type AuthenticatorStateCreateTransaction.
// The GraphQL type's documentation follows.
//
// System transaction for creating the on-chain state used by zkLogin.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction includes the requested fields of the GraphQL type AuthenticatorStateExpireTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction includes the requested fields of the GraphQL type BridgeCommitteeInitTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction includes the requested fields of the GraphQL type BridgeStateCreateTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction includes the requested fields of the GraphQL type ChangeEpochTransaction.
// The GraphQL type's documentation follows.
//
// A system transaction that updates epoch information on-chain (increments the current epoch).
// Executed by the system once per epoch, without using gas. Epoch change transactions cannot be
// submitted by users, because validators will refuse to sign them.
//
// This transaction kind is deprecated in favour of `EndOfEpochTransaction`.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction struct {
	Typename string `json:"__typename"`
	// The next (to become) epoch.
	Epoch RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch `json:"epoch"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction) GetTypename() string {
	return v.Typename
}

// GetEpoch returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction.Epoch, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction) GetEpoch() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch {
	return v.Epoch
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch struct {
	// Validator related properties, including the active validators.
	ValidatorSet RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet `json:"validatorSet"`
	// The epoch's corresponding protocol configuration, including the feature flags and the
	// configuration options.
	ProtocolConfigs RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs `json:"protocolConfigs"`
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
}

// GetValidatorSet returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch.ValidatorSet, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch) GetValidatorSet() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet {
	return v.ValidatorSet
}

// GetProtocolConfigs returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch.ProtocolConfigs, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch) GetProtocolConfigs() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs {
	return v.ProtocolConfigs
}

// GetEpochId returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpoch) GetEpochId() uint64 {
	return v.EpochId
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs includes the requested fields of the GraphQL type ProtocolConfigs.
// The GraphQL type's documentation follows.
//
// Constants that control how the chain operates.
//
// These can only change during protocol upgrades which happen on epoch boundaries.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs struct {
	// The protocol is not required to change on every epoch boundary, so the protocol version
	// tracks which change to the protocol these configs are from.
	ProtocolVersion uint64 `json:"protocolVersion"`
}

// GetProtocolVersion returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs.ProtocolVersion, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochProtocolConfigs) GetProtocolVersion() uint64 {
	return v.ProtocolVersion
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet includes the requested fields of the GraphQL type ValidatorSet.
// The GraphQL type's documentation follows.
//
// Representation of `0x3::validator_set::ValidatorSet`.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet struct {
	// The current set of active validators.
	ActiveValidators RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection `json:"activeValidators"`
}

// GetActiveValidators returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet.ActiveValidators, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSet) GetActiveValidators() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection {
	return v.ActiveValidators
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection includes the requested fields of the GraphQL type ValidatorConnection.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator `json:"nodes"`
}

// GetPageInfo returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection) GetPageInfo() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnection) GetNodes() []RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator {
	return v.Nodes
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator includes the requested fields of the GraphQL type Validator.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator struct {
	// Validator's set of credentials such as public keys, network addresses and others.
	Credentials RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials `json:"credentials"`
	// The voting power of this validator in basis points (e.g., 100 = 1% voting power).
	VotingPower int `json:"votingPower"`
}

// GetCredentials returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.Credentials, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetCredentials() RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials {
	return v.Credentials
}

// GetVotingPower returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator.VotingPower, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidator) GetVotingPower() int {
	return v.VotingPower
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials includes the requested fields of the GraphQL type ValidatorCredentials.
// The GraphQL type's documentation follows.
//
// The credentials related fields associated with a validator.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials struct {
	ProtocolPubKey sui.Base64 `json:"protocolPubKey"`
}

// GetProtocolPubKey returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials.ProtocolPubKey, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionNodesValidatorCredentials) GetProtocolPubKey() sui.Base64 {
	return v.ProtocolPubKey
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransactionEpochValidatorSetActiveValidatorsValidatorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction includes the requested fields of the GraphQL type CoinDenyListStateCreateTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind includes the requested fields of the GraphQL interface EndOfEpochTransactionKind.
//
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind is implemented by the following types:
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction
// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind interface {
	implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction) implementsGraphQLInterfaceRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind() {
}

func __unmarshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind(b []byte, v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AuthenticatorStateCreateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction)
		return json.Unmarshal(b, *v)
	case "AuthenticatorStateExpireTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction)
		return json.Unmarshal(b, *v)
	case "BridgeCommitteeInitTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction)
		return json.Unmarshal(b, *v)
	case "BridgeStateCreateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction)
		return json.Unmarshal(b, *v)
	case "ChangeEpochTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction)
		return json.Unmarshal(b, *v)
	case "CoinDenyListStateCreateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction)
		return json.Unmarshal(b, *v)
	case "RandomnessStateCreateTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction)
		return json.Unmarshal(b, *v)
	case "StoreExecutionTimeObservationsTransaction":
		*v = new(RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing EndOfEpochTransactionKind.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind: "%v"`, tn.TypeName)
	}
}

func __marshalRPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind(v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction:
		typename = "AuthenticatorStateCreateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateCreateTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction:
		typename = "AuthenticatorStateExpireTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesAuthenticatorStateExpireTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction:
		typename = "BridgeCommitteeInitTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeCommitteeInitTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction:
		typename = "BridgeStateCreateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesBridgeStateCreateTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction:
		typename = "ChangeEpochTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesChangeEpochTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction:
		typename = "CoinDenyListStateCreateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesCoinDenyListStateCreateTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction:
		typename = "RandomnessStateCreateTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction
		}{typename, v}
		return json.Marshal(result)
	case *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction:
		typename = "StoreExecutionTimeObservationsTransaction"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesEndOfEpochTransactionKind: "%T"`, v)
	}
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction includes the requested fields of the GraphQL type RandomnessStateCreateTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesRandomnessStateCreateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction includes the requested fields of the GraphQL type StoreExecutionTimeObservationsTransaction.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindEndOfEpochTransactionTransactionsEndOfEpochTransactionKindConnectionNodesStoreExecutionTimeObservationsTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction includes the requested fields of the GraphQL type GenesisTransaction.
// The GraphQL type's documentation follows.
//
// System transaction that initializes the network and writes the initial set of objects on-chain.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindGenesisTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock includes the requested fields of the GraphQL type ProgrammableTransactionBlock.
// The GraphQL type's documentation follows.
//
// A user transaction that allows the interleaving of native commands (like transfer, split coins,
// merge coins, etc) and move calls, executed atomically.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindProgrammableTransactionBlock) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction includes the requested fields of the GraphQL type RandomnessStateUpdateTransaction.
// The GraphQL type's documentation follows.
//
// System transaction to update the source of on-chain randomness.
type RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction.Typename, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEndOfEpochTransactionBlockConnectionNodesTransactionBlockKindRandomnessStateUpdateTransaction) GetTypename() string {
	return v.Typename
}

// RPC_Checkpoint_FieldsEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type RPC_Checkpoint_FieldsEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
}

// GetEpochId returns RPC_Checkpoint_FieldsEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsEpoch) GetEpochId() uint64 { return v.EpochId }

// RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary includes the requested fields of the GraphQL type GasCostSummary.
// The GraphQL type's documentation follows.
//
// Breakdown of gas costs in effects.
type RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary struct {
	// Gas paid for executing this transaction (in MIST).
	ComputationCost sui.BigInt `json:"computationCost"`
	// Gas paid for the data stored on-chain by this transaction (in MIST).
	StorageCost sui.BigInt `json:"storageCost"`
	// Part of storage cost that can be reclaimed by cleaning up data created by this transaction
	// (when objects are deleted or an object is modified, which is treated as a deletion followed
	// by a creation) (in MIST).
	StorageRebate sui.BigInt `json:"storageRebate"`
	// Part of storage cost that is not reclaimed when data created by this transaction is cleaned
	// up (in MIST).
	NonRefundableStorageFee sui.BigInt `json:"nonRefundableStorageFee"`
}

// GetComputationCost returns RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary.ComputationCost, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary) GetComputationCost() sui.BigInt {
	return v.ComputationCost
}

// GetStorageCost returns RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary.StorageCost, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary) GetStorageCost() sui.BigInt {
	return v.StorageCost
}

// GetStorageRebate returns RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary.StorageRebate, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary) GetStorageRebate() sui.BigInt {
	return v.StorageRebate
}

// GetNonRefundableStorageFee returns RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary.NonRefundableStorageFee, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsRollingGasSummaryGasCostSummary) GetNonRefundableStorageFee() sui.BigInt {
	return v.NonRefundableStorageFee
}

// RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection includes the requested fields of the GraphQL type TransactionBlockConnection.
type RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock `json:"nodes"`
}

// GetPageInfo returns RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection) GetPageInfo() RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnection) GetNodes() []RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock {
	return v.Nodes
}

// RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionNodesTransactionBlock) GetDigest() string {
	return v.Digest
}

// RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_Checkpoint_FieldsTransactionBlocksTransactionBlockConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_EVENTS_FIELDS includes the GraphQL fields of Event requested by the fragment RPC_EVENTS_FIELDS.
type RPC_EVENTS_FIELDS struct {
	// The Move module containing some function that when called by
	// a programmable transaction block (PTB) emitted this event.
	// For example, if a PTB invokes A::m1::foo, which internally
	// calls A::m2::emit_event to emit an event,
	// the sending module would be A::m1.
	SendingModule RPC_EVENTS_FIELDSSendingModuleMoveModule `json:"sendingModule"`
	// Address of the sender of the event
	Sender RPC_EVENTS_FIELDSSenderAddress `json:"sender"`
	// The event's contents as a Move value.
	Contents RPC_EVENTS_FIELDSContentsMoveValue `json:"contents"`
	// UTC timestamp in milliseconds since epoch (1/1/1970)
	Timestamp time.Time `json:"timestamp"`
}

// GetSendingModule returns RPC_EVENTS_FIELDS.SendingModule, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDS) GetSendingModule() RPC_EVENTS_FIELDSSendingModuleMoveModule {
	return v.SendingModule
}

// GetSender returns RPC_EVENTS_FIELDS.Sender, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDS) GetSender() RPC_EVENTS_FIELDSSenderAddress { return v.Sender }

// GetContents returns RPC_EVENTS_FIELDS.Contents, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDS) GetContents() RPC_EVENTS_FIELDSContentsMoveValue { return v.Contents }

// GetTimestamp returns RPC_EVENTS_FIELDS.Timestamp, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDS) GetTimestamp() time.Time { return v.Timestamp }

// RPC_EVENTS_FIELDSContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_EVENTS_FIELDSContentsMoveValue struct {
	// The value's Move type.
	Type RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType `json:"type"`
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
	// The BCS representation of this value, Base64 encoded.
	Bcs sui.Base64 `json:"bcs"`
}

// GetType returns RPC_EVENTS_FIELDSContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSContentsMoveValue) GetType() RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType {
	return v.Type
}

// GetJson returns RPC_EVENTS_FIELDSContentsMoveValue.Json, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSContentsMoveValue) GetJson() json.RawMessage { return v.Json }

// GetBcs returns RPC_EVENTS_FIELDSContentsMoveValue.Bcs, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSContentsMoveValue) GetBcs() sui.Base64 { return v.Bcs }

// RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSContentsMoveValueTypeMoveType) GetRepr() string { return v.Repr }

// RPC_EVENTS_FIELDSSenderAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type RPC_EVENTS_FIELDSSenderAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_EVENTS_FIELDSSenderAddress.Address, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSSenderAddress) GetAddress() sui.Address { return v.Address }

// RPC_EVENTS_FIELDSSendingModuleMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type RPC_EVENTS_FIELDSSendingModuleMoveModule struct {
	// The package that this Move module was defined in
	Package RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage `json:"package"`
	// The module's (unqualified) name.
	Name string `json:"name"`
}

// GetPackage returns RPC_EVENTS_FIELDSSendingModuleMoveModule.Package, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSSendingModuleMoveModule) GetPackage() RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage {
	return v.Package
}

// GetName returns RPC_EVENTS_FIELDSSendingModuleMoveModule.Name, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSSendingModuleMoveModule) GetName() string { return v.Name }

// RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage.Address, and is useful for accessing the field via an interface.
func (v *RPC_EVENTS_FIELDSSendingModuleMoveModulePackageMovePackage) GetAddress() sui.Address {
	return v.Address
}

// RPC_MOVE_ENUM_FIELDS includes the GraphQL fields of MoveEnum requested by the fragment RPC_MOVE_ENUM_FIELDS.
// The GraphQL type's documentation follows.
//
// Description of an enum type, defined in a Move module.
type RPC_MOVE_ENUM_FIELDS struct {
	// The enum's (unqualified) type name.
	Name string `json:"name"`
	// The enum's abilities.
	Abilities []MoveAbility `json:"abilities"`
	// Constraints on the enum's formal type parameters.  Move bytecode does not name type
	// parameters, so when they are referenced (e.g. in field types) they are identified by their
	// index in this list.
	TypeParameters []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`
	// The names and types of the enum's fields.  Field types reference type parameters, by their
	// index in the defining enum's `typeParameters` list.
	Variants []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant `json:"variants"`
}

// GetName returns RPC_MOVE_ENUM_FIELDS.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDS) GetName() string { return v.Name }

// GetAbilities returns RPC_MOVE_ENUM_FIELDS.Abilities, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDS) GetAbilities() []MoveAbility { return v.Abilities }

// GetTypeParameters returns RPC_MOVE_ENUM_FIELDS.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDS) GetTypeParameters() []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter {
	return v.TypeParameters
}

// GetVariants returns RPC_MOVE_ENUM_FIELDS.Variants, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDS) GetVariants() []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant {
	return v.Variants
}

// RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter includes the requested fields of the GraphQL type MoveStructTypeParameter.
type RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter struct {
	IsPhantom   bool          `json:"isPhantom"`
	Constraints []MoveAbility `json:"constraints"`
}

// GetIsPhantom returns RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter.IsPhantom, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter) GetIsPhantom() bool {
	return v.IsPhantom
}

// GetConstraints returns RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter.Constraints, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter) GetConstraints() []MoveAbility {
	return v.Constraints
}

// RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant includes the requested fields of the GraphQL type MoveEnumVariant.
type RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant struct {
	// The name of the variant
	Name string `json:"name"`
	// The names and types of the variant's fields.  Field types reference type parameters, by their
	// index in the defining enum's `typeParameters` list.
	Fields []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField `json:"fields"`
}

// GetName returns RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant) GetName() string { return v.Name }

// GetFields returns RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant.Fields, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant) GetFields() []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField {
	return v.Fields
}

// RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField includes the requested fields of the GraphQL type MoveField.
// The GraphQL type's documentation follows.
//
// Information for a particular field on a Move struct.
type RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField struct {
	Name string                                                                     `json:"name"`
	Type RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType `json:"type"`
}

// GetName returns RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField) GetName() string { return v.Name }

// GetType returns RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField.Type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveField) GetType() RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType {
	return v.Type
}

// RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType includes the requested fields of the GraphQL type OpenMoveType.
// The GraphQL type's documentation follows.
//
// Represents types that could contain references or free type parameters.  Such types can appear
// as function parameters, in fields of structs, or as actual type parameter.
type RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType struct {
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetSignature returns RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariantFieldsMoveFieldTypeOpenMoveType) GetSignature() string {
	return v.Signature
}

// RPC_MOVE_FUNCTION_FIELDS includes the GraphQL fields of MoveFunction requested by the fragment RPC_MOVE_FUNCTION_FIELDS.
// The GraphQL type's documentation follows.
//
// Signature of a function, defined in a Move module.
type RPC_MOVE_FUNCTION_FIELDS struct {
	// The function's (unqualified) name.
	Name string `json:"name"`
	// The function's visibility: `public`, `public(friend)`, or `private`.
	Visibility MoveVisibility `json:"visibility"`
	// Whether the function has the `entry` modifier or not.
	IsEntry bool `json:"isEntry"`
	// The function's parameter types.  These types can reference type parameters introduce by this
	// function (see `typeParameters`).
	Parameters []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType `json:"parameters"`
	// Constraints on the function's formal type parameters.  Move bytecode does not name type
	// parameters, so when they are referenced (e.g. in parameter and return types) they are
	// identified by their index in this list.
	TypeParameters []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter `json:"typeParameters"`
	// The function's return types.  There can be multiple because functions in Move can return
	// multiple values.  These types can reference type parameters introduced by this function (see
	// `typeParameters`).
	Return []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType `json:"return"`
}

// GetName returns RPC_MOVE_FUNCTION_FIELDS.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetName() string { return v.Name }

// GetVisibility returns RPC_MOVE_FUNCTION_FIELDS.Visibility, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetVisibility() MoveVisibility { return v.Visibility }

// GetIsEntry returns RPC_MOVE_FUNCTION_FIELDS.IsEntry, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetIsEntry() bool { return v.IsEntry }

// GetParameters returns RPC_MOVE_FUNCTION_FIELDS.Parameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetParameters() []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType {
	return v.Parameters
}

// GetTypeParameters returns RPC_MOVE_FUNCTION_FIELDS.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetTypeParameters() []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter {
	return v.TypeParameters
}

// GetReturn returns RPC_MOVE_FUNCTION_FIELDS.Return, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDS) GetReturn() []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType {
	return v.Return
}

// RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType includes the requested fields of the GraphQL type OpenMoveType.
// The GraphQL type's documentation follows.
//
// Represents types that could contain references or free type parameters.  Such types can appear
// as function parameters, in fields of structs, or as actual type parameter.
type RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType struct {
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetSignature returns RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType) GetSignature() string { return v.Signature }

// RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType includes the requested fields of the GraphQL type OpenMoveType.
// The GraphQL type's documentation follows.
//
// Represents types that could contain references or free type parameters.  Such types can appear
// as function parameters, in fields of structs, or as actual type parameter.
type RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetRepr returns RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType) GetRepr() string { return v.Repr }

// GetSignature returns RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType) GetSignature() string { return v.Signature }

// RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter includes the requested fields of the GraphQL type MoveFunctionTypeParameter.
type RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter struct {
	Constraints []MoveAbility `json:"constraints"`
}

// GetConstraints returns RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter.Constraints, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter) GetConstraints() []MoveAbility {
	return v.Constraints
}

// RPC_MOVE_MODULE_FIELDS includes the GraphQL fields of MoveModule requested by the fragment RPC_MOVE_MODULE_FIELDS.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type RPC_MOVE_MODULE_FIELDS struct {
	// The module's (unqualified) name.
	Name string `json:"name"`
	// Modules that this module considers friends (these modules can access `public(friend)`
	// functions from this module).
	Friends RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection `json:"friends"`
	// Iterate through the structs defined in this module.
	Structs RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection `json:"structs"`
	// Iterate through the enums defined in this module.
	Enums RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection `json:"enums"`
	// Format version of this module's bytecode.
	FileFormatVersion int `json:"fileFormatVersion"`
	// Iterate through the signatures of functions defined in this module.
	Functions RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection `json:"functions"`
}

// GetName returns RPC_MOVE_MODULE_FIELDS.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetName() string { return v.Name }

// GetFriends returns RPC_MOVE_MODULE_FIELDS.Friends, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetFriends() RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection {
	return v.Friends
}

// GetStructs returns RPC_MOVE_MODULE_FIELDS.Structs, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetStructs() RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection {
	return v.Structs
}

// GetEnums returns RPC_MOVE_MODULE_FIELDS.Enums, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetEnums() RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection {
	return v.Enums
}

// GetFileFormatVersion returns RPC_MOVE_MODULE_FIELDS.FileFormatVersion, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetFileFormatVersion() int { return v.FileFormatVersion }

// GetFunctions returns RPC_MOVE_MODULE_FIELDS.Functions, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDS) GetFunctions() RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection {
	return v.Functions
}

// RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection includes the requested fields of the GraphQL type MoveEnumConnection.
type RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum `json:"nodes"`
}

// GetPageInfo returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection) GetPageInfo() RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnection) GetNodes() []RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum {
	return v.Nodes
}

// RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum includes the requested fields of the GraphQL type MoveEnum.
// The GraphQL type's documentation follows.
//
// Description of an enum type, defined in a Move module.
type RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum struct {
	RPC_MOVE_ENUM_FIELDS `json:"-"`
}

// GetName returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) GetName() string {
	return v.RPC_MOVE_ENUM_FIELDS.Name
}

// GetAbilities returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum.Abilities, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) GetAbilities() []MoveAbility {
	return v.RPC_MOVE_ENUM_FIELDS.Abilities
}

// GetTypeParameters returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) GetTypeParameters() []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter {
	return v.RPC_MOVE_ENUM_FIELDS.TypeParameters
}

// GetVariants returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum.Variants, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) GetVariants() []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant {
	return v.RPC_MOVE_ENUM_FIELDS.Variants
}

func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_ENUM_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum struct {
	Name string `json:"name"`

	Abilities []MoveAbility `json:"abilities"`

	TypeParameters []RPC_MOVE_ENUM_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`

	Variants []RPC_MOVE_ENUM_FIELDSVariantsMoveEnumVariant `json:"variants"`
}

func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum) __premarshalJSON() (*__premarshalRPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum, error) {
	var retval __premarshalRPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionNodesMoveEnum

	retval.Name = v.RPC_MOVE_ENUM_FIELDS.Name
	retval.Abilities = v.RPC_MOVE_ENUM_FIELDS.Abilities
	retval.TypeParameters = v.RPC_MOVE_ENUM_FIELDS.TypeParameters
	retval.Variants = v.RPC_MOVE_ENUM_FIELDS.Variants
	return &retval, nil
}

// RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSEnumsMoveEnumConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection includes the requested fields of the GraphQL type MoveModuleConnection.
type RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule `json:"nodes"`
}

// GetPageInfo returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection) GetPageInfo() RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnection) GetNodes() []RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule {
	return v.Nodes
}

// RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule struct {
	// The module's (unqualified) name.
	Name string `json:"name"`
	// The package that this Move module was defined in
	Package RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage `json:"package"`
}

// GetName returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule) GetName() string {
	return v.Name
}

// GetPackage returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule.Package, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModule) GetPackage() RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage {
	return v.Package
}

// RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage.Address, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionNodesMoveModulePackageMovePackage) GetAddress() sui.Address {
	return v.Address
}

// RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFriendsMoveModuleConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection includes the requested fields of the GraphQL type MoveFunctionConnection.
type RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction `json:"nodes"`
}

// GetPageInfo returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection) GetPageInfo() RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnection) GetNodes() []RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction {
	return v.Nodes
}

// RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction includes the requested fields of the GraphQL type MoveFunction.
// The GraphQL type's documentation follows.
//
// Signature of a function, defined in a Move module.
type RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction struct {
	RPC_MOVE_FUNCTION_FIELDS `json:"-"`
}

// GetName returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetName() string {
	return v.RPC_MOVE_FUNCTION_FIELDS.Name
}

// GetVisibility returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.Visibility, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetVisibility() MoveVisibility {
	return v.RPC_MOVE_FUNCTION_FIELDS.Visibility
}

// GetIsEntry returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.IsEntry, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetIsEntry() bool {
	return v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
}

// GetParameters returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.Parameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetParameters() []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Parameters
}

// GetTypeParameters returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetTypeParameters() []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter {
	return v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
}

// GetReturn returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction.Return, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) GetReturn() []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType {
	return v.RPC_MOVE_FUNCTION_FIELDS.Return
}

func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_FUNCTION_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction struct {
	Name string `json:"name"`

	Visibility MoveVisibility `json:"visibility"`

	IsEntry bool `json:"isEntry"`

	Parameters []RPC_MOVE_FUNCTION_FIELDSParametersOpenMoveType `json:"parameters"`

	TypeParameters []RPC_MOVE_FUNCTION_FIELDSTypeParametersMoveFunctionTypeParameter `json:"typeParameters"`

	Return []RPC_MOVE_FUNCTION_FIELDSReturnOpenMoveType `json:"return"`
}

func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction) __premarshalJSON() (*__premarshalRPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction, error) {
	var retval __premarshalRPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionNodesMoveFunction

	retval.Name = v.RPC_MOVE_FUNCTION_FIELDS.Name
	retval.Visibility = v.RPC_MOVE_FUNCTION_FIELDS.Visibility
	retval.IsEntry = v.RPC_MOVE_FUNCTION_FIELDS.IsEntry
	retval.Parameters = v.RPC_MOVE_FUNCTION_FIELDS.Parameters
	retval.TypeParameters = v.RPC_MOVE_FUNCTION_FIELDS.TypeParameters
	retval.Return = v.RPC_MOVE_FUNCTION_FIELDS.Return
	return &retval, nil
}

// RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSFunctionsMoveFunctionConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection includes the requested fields of the GraphQL type MoveStructConnection.
type RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct `json:"nodes"`
}

// GetPageInfo returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection) GetPageInfo() RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnection) GetNodes() []RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct {
	return v.Nodes
}

// RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct includes the requested fields of the GraphQL type MoveStruct.
// The GraphQL type's documentation follows.
//
// Description of a struct type, defined in a Move module.
type RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct struct {
	RPC_MOVE_STRUCT_FIELDS `json:"-"`
}

// GetName returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) GetName() string {
	return v.RPC_MOVE_STRUCT_FIELDS.Name
}

// GetAbilities returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct.Abilities, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) GetAbilities() []MoveAbility {
	return v.RPC_MOVE_STRUCT_FIELDS.Abilities
}

// GetFields returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct.Fields, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) GetFields() []RPC_MOVE_STRUCT_FIELDSFieldsMoveField {
	return v.RPC_MOVE_STRUCT_FIELDS.Fields
}

// GetTypeParameters returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) GetTypeParameters() []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter {
	return v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
}

func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_MOVE_STRUCT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct struct {
	Name string `json:"name"`

	Abilities []MoveAbility `json:"abilities"`

	Fields []RPC_MOVE_STRUCT_FIELDSFieldsMoveField `json:"fields"`

	TypeParameters []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`
}

func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct) __premarshalJSON() (*__premarshalRPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct, error) {
	var retval __premarshalRPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionNodesMoveStruct

	retval.Name = v.RPC_MOVE_STRUCT_FIELDS.Name
	retval.Abilities = v.RPC_MOVE_STRUCT_FIELDS.Abilities
	retval.Fields = v.RPC_MOVE_STRUCT_FIELDS.Fields
	retval.TypeParameters = v.RPC_MOVE_STRUCT_FIELDS.TypeParameters
	return &retval, nil
}

// RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_MODULE_FIELDSStructsMoveStructConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_MOVE_OBJECT_FIELDS includes the GraphQL fields of MoveObject requested by the fragment RPC_MOVE_OBJECT_FIELDS.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_MOVE_OBJECT_FIELDS struct {
	ObjectId sui.Address `json:"objectId"`
	// The Base64-encoded BCS serialization of the object's content.
	Bcs sui.Base64 `json:"bcs"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents_type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue `json:"contents_type"`
	// Determines whether a transaction can transfer this object, using the TransferObjects
	// transaction command or `sui::transfer::public_transfer`, both of which require the object to
	// have the `key` and `store` abilities.
	HasPublicTransfer bool `json:"hasPublicTransfer"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents_content RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue `json:"contents_content"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_MOVE_OBJECT_FIELDSContentsMoveValue `json:"contents"`
	// The owner type of this object: Immutable, Shared, Parent, Address
	Owner RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner `json:"-"`
	// The transaction block that created this version of the object.
	PreviousTransactionBlock RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`
	// The amount of SUI we would rebate if this object gets deleted or mutated. This number is
	// recalculated based on the present storage gas price.
	StorageRebate sui.BigInt `json:"storageRebate"`
	// 32-byte hash that identifies the object's contents, encoded as a Base58 string.
	Digest  string `json:"digest"`
	Version uint64 `json:"version"`
	// The set of named templates defined on-chain for the type of this object, to be handled
	// off-chain. The server substitutes data from the object into these templates to generate a
	// display string per template.
	Display []RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

// GetObjectId returns RPC_MOVE_OBJECT_FIELDS.ObjectId, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetObjectId() sui.Address { return v.ObjectId }

// GetBcs returns RPC_MOVE_OBJECT_FIELDS.Bcs, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetBcs() sui.Base64 { return v.Bcs }

// GetContents_type returns RPC_MOVE_OBJECT_FIELDS.Contents_type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetContents_type() RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue {
	return v.Contents_type
}

// GetHasPublicTransfer returns RPC_MOVE_OBJECT_FIELDS.HasPublicTransfer, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetHasPublicTransfer() bool { return v.HasPublicTransfer }

// GetContents_content returns RPC_MOVE_OBJECT_FIELDS.Contents_content, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetContents_content() RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue {
	return v.Contents_content
}

// GetContents returns RPC_MOVE_OBJECT_FIELDS.Contents, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetContents() RPC_MOVE_OBJECT_FIELDSContentsMoveValue {
	return v.Contents
}

// GetOwner returns RPC_MOVE_OBJECT_FIELDS.Owner, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetOwner() RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner { return v.Owner }

// GetPreviousTransactionBlock returns RPC_MOVE_OBJECT_FIELDS.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetPreviousTransactionBlock() RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock {
	return v.PreviousTransactionBlock
}

// GetStorageRebate returns RPC_MOVE_OBJECT_FIELDS.StorageRebate, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetStorageRebate() sui.BigInt { return v.StorageRebate }

// GetDigest returns RPC_MOVE_OBJECT_FIELDS.Digest, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetDigest() string { return v.Digest }

// GetVersion returns RPC_MOVE_OBJECT_FIELDS.Version, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetVersion() uint64 { return v.Version }

// GetDisplay returns RPC_MOVE_OBJECT_FIELDS.Display, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDS) GetDisplay() []RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry {
	return v.Display
}

func (v *RPC_MOVE_OBJECT_FIELDS) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDS
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDS = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RPC_MOVE_OBJECT_FIELDS.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDS struct {
	ObjectId sui.Address `json:"objectId"`

	Bcs sui.Base64 `json:"bcs"`

	Contents_type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue `json:"contents_type"`

	HasPublicTransfer bool `json:"hasPublicTransfer"`

	Contents_content RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue `json:"contents_content"`

	Contents RPC_MOVE_OBJECT_FIELDSContentsMoveValue `json:"contents"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Version uint64 `json:"version"`

	Display []RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *RPC_MOVE_OBJECT_FIELDS) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDS) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDS, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDS

	retval.ObjectId = v.ObjectId
	retval.Bcs = v.Bcs
	retval.Contents_type = v.Contents_type
	retval.HasPublicTransfer = v.HasPublicTransfer
	retval.Contents_content = v.Contents_content
	retval.Contents = v.Contents
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RPC_MOVE_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.PreviousTransactionBlock
	retval.StorageRebate = v.StorageRebate
	retval.Digest = v.Digest
	retval.Version = v.Version
	retval.Display = v.Display
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_MOVE_OBJECT_FIELDSContentsMoveValue struct {
	// The BCS representation of this value, Base64 encoded.
	Bcs sui.Base64 `json:"bcs"`
	// The value's Move type.
	Type RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType `json:"type"`
}

// GetBcs returns RPC_MOVE_OBJECT_FIELDSContentsMoveValue.Bcs, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContentsMoveValue) GetBcs() sui.Base64 { return v.Bcs }

// GetType returns RPC_MOVE_OBJECT_FIELDSContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContentsMoveValue) GetType() RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContentsMoveValueTypeMoveType) GetRepr() string { return v.Repr }

// RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue struct {
	// Structured contents of a Move value.
	Data json.RawMessage `json:"data"`
	// The value's Move type.
	Type RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType `json:"type"`
}

// GetData returns RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue.Data, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue) GetData() json.RawMessage { return v.Data }

// GetType returns RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_contentMoveValue) GetType() RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType {
	return v.Type
}

// RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
	// Structured representation of the "shape" of values that match this type. May return no
	// layout if the type is invalid.
	Layout string `json:"layout"`
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetRepr returns RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType) GetRepr() string { return v.Repr }

// GetLayout returns RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType.Layout, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType) GetLayout() string {
	return v.Layout
}

// GetSignature returns RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_contentMoveValueTypeMoveType) GetSignature() string {
	return v.Signature
}

// RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue struct {
	// The value's Move type.
	Type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType `json:"type"`
}

// GetType returns RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_typeMoveValue) GetType() RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType {
	return v.Type
}

// RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSContents_typeMoveValueTypeMoveType) GetRepr() string { return v.Repr }

// RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry includes the requested fields of the GraphQL type DisplayEntry.
// The GraphQL type's documentation follows.
//
// The set of named templates defined on-chain for the type of this object,
// to be handled off-chain. The server substitutes data from the object
// into these templates to generate a display string per template.
type RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry struct {
	// The identifier for a particular template string of the Display object.
	Key string `json:"key"`
	// The template string for the key with placeholder values substituted.
	Value string `json:"value"`
	// An error string describing why the template could not be rendered.
	Error string `json:"error"`
}

// GetKey returns RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry.Key, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry) GetKey() string { return v.Key }

// GetValue returns RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry.Value, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry) GetValue() string { return v.Value }

// GetError returns RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry.Error, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSDisplayDisplayEntry) GetError() string { return v.Error }

// RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner includes the requested fields of the GraphQL type AddressOwner.
// The GraphQL type's documentation follows.
//
// An address-owned object is owned by a specific 32-byte address that is
// either an account address (derived from a particular signature scheme) or
// an object ID. An address-owned object is accessible only to its owner and no others.
type RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner struct {
	Typename                            string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSAddressOwner `json:"-"`
}

// GetTypename returns RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner.Typename, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) GetTypename() string { return v.Typename }

// GetOwner returns RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner.Owner, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) GetOwner() RPC_OBJECT_OWNER_FIELDSOwner {
	return v.RPC_OBJECT_OWNER_FIELDSAddressOwner.Owner
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSAddressOwner)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDSOwnerAddressOwner struct {
	Typename string `json:"__typename"`

	Owner RPC_OBJECT_OWNER_FIELDSOwner `json:"owner"`
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerAddressOwner, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDSOwnerAddressOwner

	retval.Typename = v.Typename
	retval.Owner = v.RPC_OBJECT_OWNER_FIELDSAddressOwner.Owner
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2 includes the requested fields of the GraphQL type ConsensusV2.
// The GraphQL type's documentation follows.
//
// A ConsensusV2 object is an object that is automatically versioned by the consensus protocol
// and allows different authentication modes based on the chosen authenticator.
// (Initially, only single-owner authentication is supported.)
type RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2 struct {
	Typename                           string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSConsensusV2 `json:"-"`
}

// GetTypename returns RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2.Typename, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2) GetTypename() string { return v.Typename }

func (v *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSConsensusV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDSOwnerConsensusV2 struct {
	Typename string `json:"__typename"`
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerConsensusV2, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDSOwnerConsensusV2

	retval.Typename = v.Typename
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSOwnerImmutable includes the requested fields of the GraphQL type Immutable.
// The GraphQL type's documentation follows.
//
// An immutable object is an object that can't be mutated, transferred, or deleted.
// Immutable objects have no owner, so anyone can use them.
type RPC_MOVE_OBJECT_FIELDSOwnerImmutable struct {
	Typename                         string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSImmutable `json:"-"`
}

// GetTypename returns RPC_MOVE_OBJECT_FIELDSOwnerImmutable.Typename, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerImmutable) GetTypename() string { return v.Typename }

func (v *RPC_MOVE_OBJECT_FIELDSOwnerImmutable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDSOwnerImmutable
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDSOwnerImmutable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSImmutable)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDSOwnerImmutable struct {
	Typename string `json:"__typename"`
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerImmutable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerImmutable) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerImmutable, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDSOwnerImmutable

	retval.Typename = v.Typename
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner includes the requested fields of the GraphQL interface ObjectOwner.
//
// RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner is implemented by the following types:
// RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner
// RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2
// RPC_MOVE_OBJECT_FIELDSOwnerImmutable
// RPC_MOVE_OBJECT_FIELDSOwnerParent
// RPC_MOVE_OBJECT_FIELDSOwnerShared
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner interface {
	implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	RPC_OBJECT_OWNER_FIELDS
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner) implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2) implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_MOVE_OBJECT_FIELDSOwnerImmutable) implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) implementsGraphQLInterfaceRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner() {
}

func __unmarshalRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner(b []byte, v *RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddressOwner":
		*v = new(RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner)
		return json.Unmarshal(b, *v)
	case "ConsensusV2":
		*v = new(RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2)
		return json.Unmarshal(b, *v)
	case "Immutable":
		*v = new(RPC_MOVE_OBJECT_FIELDSOwnerImmutable)
		return json.Unmarshal(b, *v)
	case "Parent":
		*v = new(RPC_MOVE_OBJECT_FIELDSOwnerParent)
		return json.Unmarshal(b, *v)
	case "Shared":
		*v = new(RPC_MOVE_OBJECT_FIELDSOwnerShared)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ObjectOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner: "%v"`, tn.TypeName)
	}
}

func __marshalRPC_MOVE_OBJECT_FIELDSOwnerObjectOwner(v *RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RPC_MOVE_OBJECT_FIELDSOwnerAddressOwner:
		typename = "AddressOwner"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerAddressOwner
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_MOVE_OBJECT_FIELDSOwnerConsensusV2:
		typename = "ConsensusV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerConsensusV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_MOVE_OBJECT_FIELDSOwnerImmutable:
		typename = "Immutable"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerImmutable
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_MOVE_OBJECT_FIELDSOwnerParent:
		typename = "Parent"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerParent
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_MOVE_OBJECT_FIELDSOwnerShared:
		typename = "Shared"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerShared
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RPC_MOVE_OBJECT_FIELDSOwnerObjectOwner: "%T"`, v)
	}
}

// RPC_MOVE_OBJECT_FIELDSOwnerParent includes the requested fields of the GraphQL type Parent.
// The GraphQL type's documentation follows.
//
// If the object's owner is a Parent, this object is part of a dynamic field (it is the value of
// the dynamic field, or the intermediate Field object itself), and it is owned by another object.
//
// Although its owner is guaranteed to be an object, it is exposed as an Owner, as the parent
// object could be wrapped and therefore not directly accessible.
type RPC_MOVE_OBJECT_FIELDSOwnerParent struct {
	Typename                      string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSParent `json:"-"`
}

// GetTypename returns RPC_MOVE_OBJECT_FIELDSOwnerParent.Typename, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) GetTypename() string { return v.Typename }

// GetParent returns RPC_MOVE_OBJECT_FIELDSOwnerParent.Parent, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) GetParent() RPC_OBJECT_OWNER_FIELDSParentOwner {
	return v.RPC_OBJECT_OWNER_FIELDSParent.Parent
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDSOwnerParent
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDSOwnerParent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSParent)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDSOwnerParent struct {
	Typename string `json:"__typename"`

	Parent RPC_OBJECT_OWNER_FIELDSParentOwner `json:"parent"`
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerParent) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerParent, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDSOwnerParent

	retval.Typename = v.Typename
	retval.Parent = v.RPC_OBJECT_OWNER_FIELDSParent.Parent
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSOwnerShared includes the requested fields of the GraphQL type Shared.
// The GraphQL type's documentation follows.
//
// A shared object is an object that is shared using the 0x2::transfer::share_object function.
// Unlike owned objects, once an object is shared, it stays mutable and is accessible by anyone.
type RPC_MOVE_OBJECT_FIELDSOwnerShared struct {
	Typename                      string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSShared `json:"-"`
}

// GetTypename returns RPC_MOVE_OBJECT_FIELDSOwnerShared.Typename, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) GetTypename() string { return v.Typename }

// GetInitialSharedVersion returns RPC_MOVE_OBJECT_FIELDSOwnerShared.InitialSharedVersion, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) GetInitialSharedVersion() uint64 {
	return v.RPC_OBJECT_OWNER_FIELDSShared.InitialSharedVersion
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_MOVE_OBJECT_FIELDSOwnerShared
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_MOVE_OBJECT_FIELDSOwnerShared = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSShared)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_MOVE_OBJECT_FIELDSOwnerShared struct {
	Typename string `json:"__typename"`

	InitialSharedVersion uint64 `json:"initialSharedVersion"`
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_MOVE_OBJECT_FIELDSOwnerShared) __premarshalJSON() (*__premarshalRPC_MOVE_OBJECT_FIELDSOwnerShared, error) {
	var retval __premarshalRPC_MOVE_OBJECT_FIELDSOwnerShared

	retval.Typename = v.Typename
	retval.InitialSharedVersion = v.RPC_OBJECT_OWNER_FIELDSShared.InitialSharedVersion
	return &retval, nil
}

// RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_OBJECT_FIELDSPreviousTransactionBlock) GetDigest() string { return v.Digest }

// RPC_MOVE_STRUCT_FIELDS includes the GraphQL fields of MoveStruct requested by the fragment RPC_MOVE_STRUCT_FIELDS.
// The GraphQL type's documentation follows.
//
// Description of a struct type, defined in a Move module.
type RPC_MOVE_STRUCT_FIELDS struct {
	// The struct's (unqualified) type name.
	Name string `json:"name"`
	// Abilities this struct has.
	Abilities []MoveAbility `json:"abilities"`
	// The names and types of the struct's fields.  Field types reference type parameters, by their
	// index in the defining struct's `typeParameters` list.
	Fields []RPC_MOVE_STRUCT_FIELDSFieldsMoveField `json:"fields"`
	// Constraints on the struct's formal type parameters.  Move bytecode does not name type
	// parameters, so when they are referenced (e.g. in field types) they are identified by their
	// index in this list.
	TypeParameters []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter `json:"typeParameters"`
}

// GetName returns RPC_MOVE_STRUCT_FIELDS.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDS) GetName() string { return v.Name }

// GetAbilities returns RPC_MOVE_STRUCT_FIELDS.Abilities, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDS) GetAbilities() []MoveAbility { return v.Abilities }

// GetFields returns RPC_MOVE_STRUCT_FIELDS.Fields, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDS) GetFields() []RPC_MOVE_STRUCT_FIELDSFieldsMoveField { return v.Fields }

// GetTypeParameters returns RPC_MOVE_STRUCT_FIELDS.TypeParameters, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDS) GetTypeParameters() []RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter {
	return v.TypeParameters
}

// RPC_MOVE_STRUCT_FIELDSFieldsMoveField includes the requested fields of the GraphQL type MoveField.
// The GraphQL type's documentation follows.
//
// Information for a particular field on a Move struct.
type RPC_MOVE_STRUCT_FIELDSFieldsMoveField struct {
	Name string                                                `json:"name"`
	Type RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType `json:"type"`
}

// GetName returns RPC_MOVE_STRUCT_FIELDSFieldsMoveField.Name, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDSFieldsMoveField) GetName() string { return v.Name }

// GetType returns RPC_MOVE_STRUCT_FIELDSFieldsMoveField.Type, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDSFieldsMoveField) GetType() RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType {
	return v.Type
}

// RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType includes the requested fields of the GraphQL type OpenMoveType.
// The GraphQL type's documentation follows.
//
// Represents types that could contain references or free type parameters.  Such types can appear
// as function parameters, in fields of structs, or as actual type parameter.
type RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType struct {
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetSignature returns RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDSFieldsMoveFieldTypeOpenMoveType) GetSignature() string {
	return v.Signature
}

// RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter includes the requested fields of the GraphQL type MoveStructTypeParameter.
type RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter struct {
	IsPhantom   bool          `json:"isPhantom"`
	Constraints []MoveAbility `json:"constraints"`
}

// GetIsPhantom returns RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter.IsPhantom, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter) GetIsPhantom() bool {
	return v.IsPhantom
}

// GetConstraints returns RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter.Constraints, and is useful for accessing the field via an interface.
func (v *RPC_MOVE_STRUCT_FIELDSTypeParametersMoveStructTypeParameter) GetConstraints() []MoveAbility {
	return v.Constraints
}

// RPC_OBJECT_FIELDS includes the GraphQL fields of Object requested by the fragment RPC_OBJECT_FIELDS.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type RPC_OBJECT_FIELDS struct {
	ObjectId sui.Address `json:"objectId"`
	Version  uint64      `json:"version"`
	// Attempts to convert the object into a MoveObject
	AsMoveObjectType RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject `json:"asMoveObjectType"`
	// Attempts to convert the object into a MoveObject
	AsMoveObjectContent RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject `json:"asMoveObjectContent"`
	// Attempts to convert the object into a MoveObject
	AsMoveObject RPC_OBJECT_FIELDSAsMoveObject `json:"asMoveObject"`
	// The owner type of this object: Immutable, Shared, Parent, Address
	// Immutable and Shared Objects do not have owners.
	Owner RPC_OBJECT_FIELDSOwnerObjectOwner `json:"-"`
	// The transaction block that created this version of the object.
	PreviousTransactionBlock RPC_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`
	// The amount of SUI we would rebate if this object gets deleted or mutated. This number is
	// recalculated based on the present storage gas price.
	StorageRebate sui.BigInt `json:"storageRebate"`
	// 32-byte hash that identifies the object's current contents, encoded as a Base58 string.
	Digest string `json:"digest"`
	// The set of named templates defined on-chain for the type of this object, to be handled
	// off-chain. The server substitutes data from the object into these templates to generate a
	// display string per template.
	Display []RPC_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

// GetObjectId returns RPC_OBJECT_FIELDS.ObjectId, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetObjectId() sui.Address { return v.ObjectId }

// GetVersion returns RPC_OBJECT_FIELDS.Version, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetVersion() uint64 { return v.Version }

// GetAsMoveObjectType returns RPC_OBJECT_FIELDS.AsMoveObjectType, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetAsMoveObjectType() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject {
	return v.AsMoveObjectType
}

// GetAsMoveObjectContent returns RPC_OBJECT_FIELDS.AsMoveObjectContent, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetAsMoveObjectContent() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject {
	return v.AsMoveObjectContent
}

// GetAsMoveObject returns RPC_OBJECT_FIELDS.AsMoveObject, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetAsMoveObject() RPC_OBJECT_FIELDSAsMoveObject { return v.AsMoveObject }

// GetOwner returns RPC_OBJECT_FIELDS.Owner, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetOwner() RPC_OBJECT_FIELDSOwnerObjectOwner { return v.Owner }

// GetPreviousTransactionBlock returns RPC_OBJECT_FIELDS.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetPreviousTransactionBlock() RPC_OBJECT_FIELDSPreviousTransactionBlock {
	return v.PreviousTransactionBlock
}

// GetStorageRebate returns RPC_OBJECT_FIELDS.StorageRebate, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetStorageRebate() sui.BigInt { return v.StorageRebate }

// GetDigest returns RPC_OBJECT_FIELDS.Digest, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetDigest() string { return v.Digest }

// GetDisplay returns RPC_OBJECT_FIELDS.Display, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDS) GetDisplay() []RPC_OBJECT_FIELDSDisplayDisplayEntry { return v.Display }

func (v *RPC_OBJECT_FIELDS) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDS
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDS = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalRPC_OBJECT_FIELDSOwnerObjectOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal RPC_OBJECT_FIELDS.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDS struct {
	ObjectId sui.Address `json:"objectId"`

	Version uint64 `json:"version"`

	AsMoveObjectType RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject `json:"asMoveObjectType"`

	AsMoveObjectContent RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject `json:"asMoveObjectContent"`

	AsMoveObject RPC_OBJECT_FIELDSAsMoveObject `json:"asMoveObject"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Display []RPC_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *RPC_OBJECT_FIELDS) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDS) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDS, error) {
	var retval __premarshalRPC_OBJECT_FIELDS

	retval.ObjectId = v.ObjectId
	retval.Version = v.Version
	retval.AsMoveObjectType = v.AsMoveObjectType
	retval.AsMoveObjectContent = v.AsMoveObjectContent
	retval.AsMoveObject = v.AsMoveObject
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalRPC_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal RPC_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.PreviousTransactionBlock
	retval.StorageRebate = v.StorageRebate
	retval.Digest = v.Digest
	retval.Display = v.Display
	return &retval, nil
}

// RPC_OBJECT_FIELDSAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_OBJECT_FIELDSAsMoveObject struct {
	// Determines whether a transaction can transfer this object, using the TransferObjects
	// transaction command or `sui::transfer::public_transfer`, both of which require the object to
	// have the `key` and `store` abilities.
	HasPublicTransfer bool `json:"hasPublicTransfer"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue `json:"contents"`
}

// GetHasPublicTransfer returns RPC_OBJECT_FIELDSAsMoveObject.HasPublicTransfer, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObject) GetHasPublicTransfer() bool { return v.HasPublicTransfer }

// GetContents returns RPC_OBJECT_FIELDSAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObject) GetContents() RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue {
	return v.Contents
}

// RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject struct {
	// Determines whether a transaction can transfer this object, using the TransferObjects
	// transaction command or `sui::transfer::public_transfer`, both of which require the object to
	// have the `key` and `store` abilities.
	HasPublicTransfer bool `json:"hasPublicTransfer"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue `json:"contents"`
}

// GetHasPublicTransfer returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject.HasPublicTransfer, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject) GetHasPublicTransfer() bool {
	return v.HasPublicTransfer
}

// GetContents returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject) GetContents() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue {
	return v.Contents
}

// RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue struct {
	// Structured contents of a Move value.
	Data json.RawMessage `json:"data"`
	// The value's Move type.
	Type RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetData returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue.Data, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue) GetData() json.RawMessage {
	return v.Data
}

// GetType returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValue) GetType() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
	// Structured representation of the "shape" of values that match this type. May return no
	// layout if the type is invalid.
	Layout string `json:"layout"`
	// Structured representation of the type signature.
	Signature string `json:"signature"`
}

// GetRepr returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// GetLayout returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType.Layout, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType) GetLayout() string {
	return v.Layout
}

// GetSignature returns RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType.Signature, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentMoveObjectContentsMoveValueTypeMoveType) GetSignature() string {
	return v.Signature
}

// RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue struct {
	// The BCS representation of this value, Base64 encoded.
	Bcs sui.Base64 `json:"bcs"`
	// The value's Move type.
	Type RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetBcs returns RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue.Bcs, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue) GetBcs() sui.Base64 { return v.Bcs }

// GetType returns RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValue) GetType() RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string { return v.Repr }

// RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue `json:"contents"`
}

// GetContents returns RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject) GetContents() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue {
	return v.Contents
}

// RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValue) GetType() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// RPC_OBJECT_FIELDSDisplayDisplayEntry includes the requested fields of the GraphQL type DisplayEntry.
// The GraphQL type's documentation follows.
//
// The set of named templates defined on-chain for the type of this object,
// to be handled off-chain. The server substitutes data from the object
// into these templates to generate a display string per template.
type RPC_OBJECT_FIELDSDisplayDisplayEntry struct {
	// The identifier for a particular template string of the Display object.
	Key string `json:"key"`
	// The template string for the key with placeholder values substituted.
	Value string `json:"value"`
	// An error string describing why the template could not be rendered.
	Error string `json:"error"`
}

// GetKey returns RPC_OBJECT_FIELDSDisplayDisplayEntry.Key, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSDisplayDisplayEntry) GetKey() string { return v.Key }

// GetValue returns RPC_OBJECT_FIELDSDisplayDisplayEntry.Value, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSDisplayDisplayEntry) GetValue() string { return v.Value }

// GetError returns RPC_OBJECT_FIELDSDisplayDisplayEntry.Error, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSDisplayDisplayEntry) GetError() string { return v.Error }

// RPC_OBJECT_FIELDSOwnerAddressOwner includes the requested fields of the GraphQL type AddressOwner.
// The GraphQL type's documentation follows.
//
// An address-owned object is owned by a specific 32-byte address that is
// either an account address (derived from a particular signature scheme) or
// an object ID. An address-owned object is accessible only to its owner and no others.
type RPC_OBJECT_FIELDSOwnerAddressOwner struct {
	Typename                            string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSAddressOwner `json:"-"`
}

// GetTypename returns RPC_OBJECT_FIELDSOwnerAddressOwner.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) GetTypename() string { return v.Typename }

// GetOwner returns RPC_OBJECT_FIELDSOwnerAddressOwner.Owner, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) GetOwner() RPC_OBJECT_OWNER_FIELDSOwner {
	return v.RPC_OBJECT_OWNER_FIELDSAddressOwner.Owner
}

func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDSOwnerAddressOwner
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDSOwnerAddressOwner = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSAddressOwner)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDSOwnerAddressOwner struct {
	Typename string `json:"__typename"`

	Owner RPC_OBJECT_OWNER_FIELDSOwner `json:"owner"`
}

func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDSOwnerAddressOwner, error) {
	var retval __premarshalRPC_OBJECT_FIELDSOwnerAddressOwner

	retval.Typename = v.Typename
	retval.Owner = v.RPC_OBJECT_OWNER_FIELDSAddressOwner.Owner
	return &retval, nil
}

// RPC_OBJECT_FIELDSOwnerConsensusV2 includes the requested fields of the GraphQL type ConsensusV2.
// The GraphQL type's documentation follows.
//
// A ConsensusV2 object is an object that is automatically versioned by the consensus protocol
// and allows different authentication modes based on the chosen authenticator.
// (Initially, only single-owner authentication is supported.)
type RPC_OBJECT_FIELDSOwnerConsensusV2 struct {
	Typename                           string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSConsensusV2 `json:"-"`
}

// GetTypename returns RPC_OBJECT_FIELDSOwnerConsensusV2.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerConsensusV2) GetTypename() string { return v.Typename }

func (v *RPC_OBJECT_FIELDSOwnerConsensusV2) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDSOwnerConsensusV2
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDSOwnerConsensusV2 = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSConsensusV2)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDSOwnerConsensusV2 struct {
	Typename string `json:"__typename"`
}

func (v *RPC_OBJECT_FIELDSOwnerConsensusV2) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDSOwnerConsensusV2) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDSOwnerConsensusV2, error) {
	var retval __premarshalRPC_OBJECT_FIELDSOwnerConsensusV2

	retval.Typename = v.Typename
	return &retval, nil
}

// RPC_OBJECT_FIELDSOwnerImmutable includes the requested fields of the GraphQL type Immutable.
// The GraphQL type's documentation follows.
//
// An immutable object is an object that can't be mutated, transferred, or deleted.
// Immutable objects have no owner, so anyone can use them.
type RPC_OBJECT_FIELDSOwnerImmutable struct {
	Typename                         string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSImmutable `json:"-"`
}

// GetTypename returns RPC_OBJECT_FIELDSOwnerImmutable.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerImmutable) GetTypename() string { return v.Typename }

func (v *RPC_OBJECT_FIELDSOwnerImmutable) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDSOwnerImmutable
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDSOwnerImmutable = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSImmutable)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDSOwnerImmutable struct {
	Typename string `json:"__typename"`
}

func (v *RPC_OBJECT_FIELDSOwnerImmutable) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDSOwnerImmutable) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDSOwnerImmutable, error) {
	var retval __premarshalRPC_OBJECT_FIELDSOwnerImmutable

	retval.Typename = v.Typename
	return &retval, nil
}

// RPC_OBJECT_FIELDSOwnerObjectOwner includes the requested fields of the GraphQL interface ObjectOwner.
//
// RPC_OBJECT_FIELDSOwnerObjectOwner is implemented by the following types:
// RPC_OBJECT_FIELDSOwnerAddressOwner
// RPC_OBJECT_FIELDSOwnerConsensusV2
// RPC_OBJECT_FIELDSOwnerImmutable
// RPC_OBJECT_FIELDSOwnerParent
// RPC_OBJECT_FIELDSOwnerShared
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_FIELDSOwnerObjectOwner interface {
	implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	RPC_OBJECT_OWNER_FIELDS
}

func (v *RPC_OBJECT_FIELDSOwnerAddressOwner) implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_OBJECT_FIELDSOwnerConsensusV2) implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_OBJECT_FIELDSOwnerImmutable) implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_OBJECT_FIELDSOwnerParent) implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner() {
}
func (v *RPC_OBJECT_FIELDSOwnerShared) implementsGraphQLInterfaceRPC_OBJECT_FIELDSOwnerObjectOwner() {
}

func __unmarshalRPC_OBJECT_FIELDSOwnerObjectOwner(b []byte, v *RPC_OBJECT_FIELDSOwnerObjectOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddressOwner":
		*v = new(RPC_OBJECT_FIELDSOwnerAddressOwner)
		return json.Unmarshal(b, *v)
	case "ConsensusV2":
		*v = new(RPC_OBJECT_FIELDSOwnerConsensusV2)
		return json.Unmarshal(b, *v)
	case "Immutable":
		*v = new(RPC_OBJECT_FIELDSOwnerImmutable)
		return json.Unmarshal(b, *v)
	case "Parent":
		*v = new(RPC_OBJECT_FIELDSOwnerParent)
		return json.Unmarshal(b, *v)
	case "Shared":
		*v = new(RPC_OBJECT_FIELDSOwnerShared)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ObjectOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RPC_OBJECT_FIELDSOwnerObjectOwner: "%v"`, tn.TypeName)
	}
}

func __marshalRPC_OBJECT_FIELDSOwnerObjectOwner(v *RPC_OBJECT_FIELDSOwnerObjectOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RPC_OBJECT_FIELDSOwnerAddressOwner:
		typename = "AddressOwner"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_OBJECT_FIELDSOwnerAddressOwner
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_OBJECT_FIELDSOwnerConsensusV2:
		typename = "ConsensusV2"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_OBJECT_FIELDSOwnerConsensusV2
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_OBJECT_FIELDSOwnerImmutable:
		typename = "Immutable"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_OBJECT_FIELDSOwnerImmutable
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_OBJECT_FIELDSOwnerParent:
		typename = "Parent"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_OBJECT_FIELDSOwnerParent
		}{typename, premarshaled}
		return json.Marshal(result)
	case *RPC_OBJECT_FIELDSOwnerShared:
		typename = "Shared"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalRPC_OBJECT_FIELDSOwnerShared
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RPC_OBJECT_FIELDSOwnerObjectOwner: "%T"`, v)
	}
}

// RPC_OBJECT_FIELDSOwnerParent includes the requested fields of the GraphQL type Parent.
// The GraphQL type's documentation follows.
//
// If the object's owner is a Parent, this object is part of a dynamic field (it is the value of
// the dynamic field, or the intermediate Field object itself), and it is owned by another object.
//
// Although its owner is guaranteed to be an object, it is exposed as an Owner, as the parent
// object could be wrapped and therefore not directly accessible.
type RPC_OBJECT_FIELDSOwnerParent struct {
	Typename                      string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSParent `json:"-"`
}

// GetTypename returns RPC_OBJECT_FIELDSOwnerParent.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerParent) GetTypename() string { return v.Typename }

// GetParent returns RPC_OBJECT_FIELDSOwnerParent.Parent, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerParent) GetParent() RPC_OBJECT_OWNER_FIELDSParentOwner {
	return v.RPC_OBJECT_OWNER_FIELDSParent.Parent
}

func (v *RPC_OBJECT_FIELDSOwnerParent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDSOwnerParent
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDSOwnerParent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSParent)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDSOwnerParent struct {
	Typename string `json:"__typename"`

	Parent RPC_OBJECT_OWNER_FIELDSParentOwner `json:"parent"`
}

func (v *RPC_OBJECT_FIELDSOwnerParent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDSOwnerParent) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDSOwnerParent, error) {
	var retval __premarshalRPC_OBJECT_FIELDSOwnerParent

	retval.Typename = v.Typename
	retval.Parent = v.RPC_OBJECT_OWNER_FIELDSParent.Parent
	return &retval, nil
}

// RPC_OBJECT_FIELDSOwnerShared includes the requested fields of the GraphQL type Shared.
// The GraphQL type's documentation follows.
//
// A shared object is an object that is shared using the 0x2::transfer::share_object function.
// Unlike owned objects, once an object is shared, it stays mutable and is accessible by anyone.
type RPC_OBJECT_FIELDSOwnerShared struct {
	Typename                      string `json:"__typename"`
	RPC_OBJECT_OWNER_FIELDSShared `json:"-"`
}

// GetTypename returns RPC_OBJECT_FIELDSOwnerShared.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerShared) GetTypename() string { return v.Typename }

// GetInitialSharedVersion returns RPC_OBJECT_FIELDSOwnerShared.InitialSharedVersion, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSOwnerShared) GetInitialSharedVersion() uint64 {
	return v.RPC_OBJECT_OWNER_FIELDSShared.InitialSharedVersion
}

func (v *RPC_OBJECT_FIELDSOwnerShared) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_OBJECT_FIELDSOwnerShared
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_OBJECT_FIELDSOwnerShared = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_OWNER_FIELDSShared)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_OBJECT_FIELDSOwnerShared struct {
	Typename string `json:"__typename"`

	InitialSharedVersion uint64 `json:"initialSharedVersion"`
}

func (v *RPC_OBJECT_FIELDSOwnerShared) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_OBJECT_FIELDSOwnerShared) __premarshalJSON() (*__premarshalRPC_OBJECT_FIELDSOwnerShared, error) {
	var retval __premarshalRPC_OBJECT_FIELDSOwnerShared

	retval.Typename = v.Typename
	retval.InitialSharedVersion = v.RPC_OBJECT_OWNER_FIELDSShared.InitialSharedVersion
	return &retval, nil
}

// RPC_OBJECT_FIELDSPreviousTransactionBlock includes the requested fields of the GraphQL type TransactionBlock.
type RPC_OBJECT_FIELDSPreviousTransactionBlock struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
}

// GetDigest returns RPC_OBJECT_FIELDSPreviousTransactionBlock.Digest, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_FIELDSPreviousTransactionBlock) GetDigest() string { return v.Digest }

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of ObjectOwner requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
//
// RPC_OBJECT_OWNER_FIELDS is implemented by the following types:
// RPC_OBJECT_OWNER_FIELDSAddressOwner
// RPC_OBJECT_OWNER_FIELDSConsensusV2
// RPC_OBJECT_OWNER_FIELDSImmutable
// RPC_OBJECT_OWNER_FIELDSParent
// RPC_OBJECT_OWNER_FIELDSShared
type RPC_OBJECT_OWNER_FIELDS interface {
	implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *RPC_OBJECT_OWNER_FIELDSAddressOwner) implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS() {}
func (v *RPC_OBJECT_OWNER_FIELDSConsensusV2) implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS()  {}
func (v *RPC_OBJECT_OWNER_FIELDSImmutable) implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS()    {}
func (v *RPC_OBJECT_OWNER_FIELDSParent) implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS()       {}
func (v *RPC_OBJECT_OWNER_FIELDSShared) implementsGraphQLInterfaceRPC_OBJECT_OWNER_FIELDS()       {}

func __unmarshalRPC_OBJECT_OWNER_FIELDS(b []byte, v *RPC_OBJECT_OWNER_FIELDS) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddressOwner":
		*v = new(RPC_OBJECT_OWNER_FIELDSAddressOwner)
		return json.Unmarshal(b, *v)
	case "ConsensusV2":
		*v = new(RPC_OBJECT_OWNER_FIELDSConsensusV2)
		return json.Unmarshal(b, *v)
	case "Immutable":
		*v = new(RPC_OBJECT_OWNER_FIELDSImmutable)
		return json.Unmarshal(b, *v)
	case "Parent":
		*v = new(RPC_OBJECT_OWNER_FIELDSParent)
		return json.Unmarshal(b, *v)
	case "Shared":
		*v = new(RPC_OBJECT_OWNER_FIELDSShared)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ObjectOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for RPC_OBJECT_OWNER_FIELDS: "%v"`, tn.TypeName)
	}
}

func __marshalRPC_OBJECT_OWNER_FIELDS(v *RPC_OBJECT_OWNER_FIELDS) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *RPC_OBJECT_OWNER_FIELDSAddressOwner:
		typename = "AddressOwner"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_OBJECT_OWNER_FIELDSAddressOwner
		}{typename, v}
		return json.Marshal(result)
	case *RPC_OBJECT_OWNER_FIELDSConsensusV2:
		typename = "ConsensusV2"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_OBJECT_OWNER_FIELDSConsensusV2
		}{typename, v}
		return json.Marshal(result)
	case *RPC_OBJECT_OWNER_FIELDSImmutable:
		typename = "Immutable"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_OBJECT_OWNER_FIELDSImmutable
		}{typename, v}
		return json.Marshal(result)
	case *RPC_OBJECT_OWNER_FIELDSParent:
		typename = "Parent"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_OBJECT_OWNER_FIELDSParent
		}{typename, v}
		return json.Marshal(result)
	case *RPC_OBJECT_OWNER_FIELDSShared:
		typename = "Shared"

		result := struct {
			TypeName string `json:"__typename"`
			*RPC_OBJECT_OWNER_FIELDSShared
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for RPC_OBJECT_OWNER_FIELDS: "%T"`, v)
	}
}

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of AddressOwner requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_OWNER_FIELDSAddressOwner struct {
	Typename string                       `json:"__typename"`
	Owner    RPC_OBJECT_OWNER_FIELDSOwner `json:"owner"`
}

// GetTypename returns RPC_OBJECT_OWNER_FIELDSAddressOwner.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSAddressOwner) GetTypename() string { return v.Typename }

// GetOwner returns RPC_OBJECT_OWNER_FIELDSAddressOwner.Owner, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSAddressOwner) GetOwner() RPC_OBJECT_OWNER_FIELDSOwner { return v.Owner }

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of ConsensusV2 requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_OWNER_FIELDSConsensusV2 struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_OBJECT_OWNER_FIELDSConsensusV2.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSConsensusV2) GetTypename() string { return v.Typename }

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of Immutable requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_OWNER_FIELDSImmutable struct {
	Typename string `json:"__typename"`
}

// GetTypename returns RPC_OBJECT_OWNER_FIELDSImmutable.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSImmutable) GetTypename() string { return v.Typename }

// RPC_OBJECT_OWNER_FIELDSOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type RPC_OBJECT_OWNER_FIELDSOwner struct {
	AsObject  RPC_OBJECT_OWNER_FIELDSOwnerAsObject  `json:"asObject"`
	AsAddress RPC_OBJECT_OWNER_FIELDSOwnerAsAddress `json:"asAddress"`
}

// GetAsObject returns RPC_OBJECT_OWNER_FIELDSOwner.AsObject, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSOwner) GetAsObject() RPC_OBJECT_OWNER_FIELDSOwnerAsObject {
	return v.AsObject
}

// GetAsAddress returns RPC_OBJECT_OWNER_FIELDSOwner.AsAddress, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSOwner) GetAsAddress() RPC_OBJECT_OWNER_FIELDSOwnerAsAddress {
	return v.AsAddress
}

// RPC_OBJECT_OWNER_FIELDSOwnerAsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type RPC_OBJECT_OWNER_FIELDSOwnerAsAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_OBJECT_OWNER_FIELDSOwnerAsAddress.Address, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSOwnerAsAddress) GetAddress() sui.Address { return v.Address }

// RPC_OBJECT_OWNER_FIELDSOwnerAsObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type RPC_OBJECT_OWNER_FIELDSOwnerAsObject struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_OBJECT_OWNER_FIELDSOwnerAsObject.Address, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSOwnerAsObject) GetAddress() sui.Address { return v.Address }

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of Parent requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_OWNER_FIELDSParent struct {
	Typename string                             `json:"__typename"`
	Parent   RPC_OBJECT_OWNER_FIELDSParentOwner `json:"parent"`
}

// GetTypename returns RPC_OBJECT_OWNER_FIELDSParent.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSParent) GetTypename() string { return v.Typename }

// GetParent returns RPC_OBJECT_OWNER_FIELDSParent.Parent, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSParent) GetParent() RPC_OBJECT_OWNER_FIELDSParentOwner {
	return v.Parent
}

// RPC_OBJECT_OWNER_FIELDSParentOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type RPC_OBJECT_OWNER_FIELDSParentOwner struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_OBJECT_OWNER_FIELDSParentOwner.Address, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSParentOwner) GetAddress() sui.Address { return v.Address }

// RPC_OBJECT_OWNER_FIELDS includes the GraphQL fields of Shared requested by the fragment RPC_OBJECT_OWNER_FIELDS.
// The GraphQL type's documentation follows.
//
// The object's owner type: Immutable, Shared, Parent, or Address.
type RPC_OBJECT_OWNER_FIELDSShared struct {
	Typename             string `json:"__typename"`
	InitialSharedVersion uint64 `json:"initialSharedVersion"`
}

// GetTypename returns RPC_OBJECT_OWNER_FIELDSShared.Typename, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSShared) GetTypename() string { return v.Typename }

// GetInitialSharedVersion returns RPC_OBJECT_OWNER_FIELDSShared.InitialSharedVersion, and is useful for accessing the field via an interface.
func (v *RPC_OBJECT_OWNER_FIELDSShared) GetInitialSharedVersion() uint64 {
	return v.InitialSharedVersion
}

// RPC_STAKE_FIELDS includes the GraphQL fields of StakedSui requested by the fragment RPC_STAKE_FIELDS.
// The GraphQL type's documentation follows.
//
// Represents a `0x3::staking_pool::StakedSui` Move object on-chain.
type RPC_STAKE_FIELDS struct {
	// The SUI that was initially staked.
	Principal sui.BigInt `json:"principal"`
	// The epoch at which this stake became active.
	ActivatedEpoch RPC_STAKE_FIELDSActivatedEpoch `json:"activatedEpoch"`
	// A stake can be pending, active, or unstaked
	StakeStatus StakeStatus `json:"stakeStatus"`
	// The epoch at which this object was requested to join a stake pool.
	RequestedEpoch RPC_STAKE_FIELDSRequestedEpoch `json:"requestedEpoch"`
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_STAKE_FIELDSContentsMoveValue `json:"contents"`
	Address  sui.Address                       `json:"address"`
	// The estimated reward for this stake object, calculated as:
	//
	// principal * (initial_stake_rate / current_stake_rate - 1.0)
	//
	// Or 0, if this value is negative, where:
	//
	// - `initial_stake_rate` is the stake rate at the epoch this stake was activated at.
	// - `current_stake_rate` is the stake rate in the current epoch.
	//
	// This value is only available if the stake is active.
	EstimatedReward sui.BigInt `json:"estimatedReward"`
}

// GetPrincipal returns RPC_STAKE_FIELDS.Principal, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetPrincipal() sui.BigInt { return v.Principal }

// GetActivatedEpoch returns RPC_STAKE_FIELDS.ActivatedEpoch, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetActivatedEpoch() RPC_STAKE_FIELDSActivatedEpoch {
	return v.ActivatedEpoch
}

// GetStakeStatus returns RPC_STAKE_FIELDS.StakeStatus, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetStakeStatus() StakeStatus { return v.StakeStatus }

// GetRequestedEpoch returns RPC_STAKE_FIELDS.RequestedEpoch, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetRequestedEpoch() RPC_STAKE_FIELDSRequestedEpoch {
	return v.RequestedEpoch
}

// GetContents returns RPC_STAKE_FIELDS.Contents, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetContents() RPC_STAKE_FIELDSContentsMoveValue { return v.Contents }

// GetAddress returns RPC_STAKE_FIELDS.Address, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetAddress() sui.Address { return v.Address }

// GetEstimatedReward returns RPC_STAKE_FIELDS.EstimatedReward, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDS) GetEstimatedReward() sui.BigInt { return v.EstimatedReward }

// RPC_STAKE_FIELDSActivatedEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type RPC_STAKE_FIELDSActivatedEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
	// The minimum gas price that a quorum of validators are guaranteed to sign a transaction for.
	ReferenceGasPrice sui.BigInt `json:"referenceGasPrice"`
}

// GetEpochId returns RPC_STAKE_FIELDSActivatedEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDSActivatedEpoch) GetEpochId() uint64 { return v.EpochId }

// GetReferenceGasPrice returns RPC_STAKE_FIELDSActivatedEpoch.ReferenceGasPrice, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDSActivatedEpoch) GetReferenceGasPrice() sui.BigInt {
	return v.ReferenceGasPrice
}

// RPC_STAKE_FIELDSContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_STAKE_FIELDSContentsMoveValue struct {
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
}

// GetJson returns RPC_STAKE_FIELDSContentsMoveValue.Json, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDSContentsMoveValue) GetJson() json.RawMessage { return v.Json }

// RPC_STAKE_FIELDSRequestedEpoch includes the requested fields of the GraphQL type Epoch.
// The GraphQL type's documentation follows.
//
// Operation of the Sui network is temporally partitioned into non-overlapping epochs,
// and the network aims to keep epochs roughly the same duration as each other.
// During a particular epoch the following data is fixed:
//
// - the protocol version
// - the reference gas price
// - the set of participating validators
type RPC_STAKE_FIELDSRequestedEpoch struct {
	// The epoch's id as a sequence number that starts at 0 and is incremented by one at every epoch change.
	EpochId uint64 `json:"epochId"`
}

// GetEpochId returns RPC_STAKE_FIELDSRequestedEpoch.EpochId, and is useful for accessing the field via an interface.
func (v *RPC_STAKE_FIELDSRequestedEpoch) GetEpochId() uint64 { return v.EpochId }

// RPC_TRANSACTION_FIELDS includes the GraphQL fields of TransactionBlock requested by the fragment RPC_TRANSACTION_FIELDS.
type RPC_TRANSACTION_FIELDS struct {
	// A 32-byte hash that uniquely identifies the transaction block contents, encoded in Base58.
	// This serves as a unique id for the block on chain.
	Digest string `json:"digest"`
	// Serialized form of this transaction's `TransactionData`, BCS serialized and Base64 encoded.
	RawTransaction sui.Base64 `json:"rawTransaction"`
	// The address corresponding to the public key that signed this transaction. System
	// transactions do not have senders.
	Sender RPC_TRANSACTION_FIELDSSenderAddress `json:"sender"`
	// A list of all signatures, Base64-encoded, from senders, and potentially the gas owner if
	// this is a sponsored transaction.
	Signatures []sui.Base64 `json:"signatures"`
	// The effects field captures the results to the chain of executing this transaction.
	Effects RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects `json:"effects"`
}

// GetDigest returns RPC_TRANSACTION_FIELDS.Digest, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDS) GetDigest() string { return v.Digest }

// GetRawTransaction returns RPC_TRANSACTION_FIELDS.RawTransaction, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDS) GetRawTransaction() sui.Base64 { return v.RawTransaction }

// GetSender returns RPC_TRANSACTION_FIELDS.Sender, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDS) GetSender() RPC_TRANSACTION_FIELDSSenderAddress { return v.Sender }

// GetSignatures returns RPC_TRANSACTION_FIELDS.Signatures, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDS) GetSignatures() []sui.Base64 { return v.Signatures }

// GetEffects returns RPC_TRANSACTION_FIELDS.Effects, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDS) GetEffects() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects {
	return v.Effects
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects includes the requested fields of the GraphQL type TransactionBlockEffects.
// The GraphQL type's documentation follows.
//
// The effects representing the result of executing a transaction block.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects struct {
	// Base64 encoded bcs serialization of the on-chain transaction effects.
	Bcs sui.Base64 `json:"bcs"`
	// Events emitted by this transaction block.
	Events RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection `json:"events"`
	// The checkpoint this transaction was finalized in.
	Checkpoint RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint `json:"checkpoint"`
	// Timestamp corresponding to the checkpoint this transaction was finalized in.
	Timestamp time.Time `json:"timestamp"`
	// The effect this transaction had on the balances (sum of coin values per coin type) of
	// addresses and objects.
	BalanceChanges RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection `json:"balanceChanges"`
	// The effect this transaction had on objects on-chain.
	ObjectChanges RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection `json:"objectChanges"`
}

// GetBcs returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.Bcs, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetBcs() sui.Base64 { return v.Bcs }

// GetEvents returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.Events, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetEvents() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection {
	return v.Events
}

// GetCheckpoint returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.Checkpoint, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetCheckpoint() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint {
	return v.Checkpoint
}

// GetTimestamp returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.Timestamp, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetBalanceChanges returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.BalanceChanges, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetBalanceChanges() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection {
	return v.BalanceChanges
}

// GetObjectChanges returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects.ObjectChanges, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffects) GetObjectChanges() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection {
	return v.ObjectChanges
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection includes the requested fields of the GraphQL type BalanceChangeConnection.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange `json:"nodes"`
}

// GetPageInfo returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection) GetPageInfo() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnection) GetNodes() []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange {
	return v.Nodes
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange includes the requested fields of the GraphQL type BalanceChange.
// The GraphQL type's documentation follows.
//
// Effects to the balance (sum of coin values per coin type) owned by an address or object.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange struct {
	// The inner type of the coin whose balance has changed (e.g. `0x2::sui::SUI`).
	CoinType RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType `json:"coinType"`
	// The address or object whose balance has changed.
	Owner RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner `json:"owner"`
	// The signed balance change.
	Amount sui.BigInt `json:"amount"`
}

// GetCoinType returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.CoinType, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetCoinType() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType {
	return v.CoinType
}

// GetOwner returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.Owner, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetOwner() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner {
	return v.Owner
}

// GetAmount returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange.Amount, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChange) GetAmount() sui.BigInt {
	return v.Amount
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeCoinTypeMoveType) GetRepr() string {
	return v.Repr
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner includes the requested fields of the GraphQL type Owner.
// The GraphQL type's documentation follows.
//
// An Owner is an entity that can own an object. Each Owner is identified by a SuiAddress which
// represents either an Address (corresponding to a public key of an account) or an Object, but
// never both (it is not known up-front whether a given Owner is an Address or an Object).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner struct {
	AsObject  RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject  `json:"asObject"`
	AsAddress RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress `json:"asAddress"`
}

// GetAsObject returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner.AsObject, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner) GetAsObject() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject {
	return v.AsObject
}

// GetAsAddress returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner.AsAddress, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwner) GetAsAddress() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress {
	return v.AsAddress
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress.Address, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsAddress) GetAddress() sui.Address {
	return v.Address
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject.Address, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionNodesBalanceChangeOwnerAsObject) GetAddress() sui.Address {
	return v.Address
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsBalanceChangesBalanceChangeConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint includes the requested fields of the GraphQL type Checkpoint.
// The GraphQL type's documentation follows.
//
// Checkpoints contain finalized transactions and are used for node synchronization
// and global transaction ordering.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint struct {
	// This checkpoint's position in the total order of finalized checkpoints, agreed upon by
	// consensus.
	SequenceNumber uint64 `json:"sequenceNumber"`
}

// GetSequenceNumber returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint.SequenceNumber, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsCheckpoint) GetSequenceNumber() uint64 {
	return v.SequenceNumber
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection includes the requested fields of the GraphQL type EventConnection.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent `json:"nodes"`
}

// GetPageInfo returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection) GetPageInfo() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnection) GetNodes() []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent {
	return v.Nodes
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent includes the requested fields of the GraphQL type Event.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent struct {
	RPC_EVENTS_FIELDS `json:"-"`
}

// GetSendingModule returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.SendingModule, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetSendingModule() RPC_EVENTS_FIELDSSendingModuleMoveModule {
	return v.RPC_EVENTS_FIELDS.SendingModule
}

// GetSender returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Sender, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetSender() RPC_EVENTS_FIELDSSenderAddress {
	return v.RPC_EVENTS_FIELDS.Sender
}

// GetContents returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Contents, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetContents() RPC_EVENTS_FIELDSContentsMoveValue {
	return v.RPC_EVENTS_FIELDS.Contents
}

// GetTimestamp returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent.Timestamp, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) GetTimestamp() time.Time {
	return v.RPC_EVENTS_FIELDS.Timestamp
}

func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_EVENTS_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent struct {
	SendingModule RPC_EVENTS_FIELDSSendingModuleMoveModule `json:"sendingModule"`

	Sender RPC_EVENTS_FIELDSSenderAddress `json:"sender"`

	Contents RPC_EVENTS_FIELDSContentsMoveValue `json:"contents"`

	Timestamp time.Time `json:"timestamp"`
}

func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent) __premarshalJSON() (*__premarshalRPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent, error) {
	var retval __premarshalRPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionNodesEvent

	retval.SendingModule = v.RPC_EVENTS_FIELDS.SendingModule
	retval.Sender = v.RPC_EVENTS_FIELDS.Sender
	retval.Contents = v.RPC_EVENTS_FIELDS.Contents
	retval.Timestamp = v.RPC_EVENTS_FIELDS.Timestamp
	return &retval, nil
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsEventsEventConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection includes the requested fields of the GraphQL type ObjectChangeConnection.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection struct {
	// Information to aid in pagination.
	PageInfo RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange `json:"nodes"`
}

// GetPageInfo returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection) GetPageInfo() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnection) GetNodes() []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange {
	return v.Nodes
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange includes the requested fields of the GraphQL type ObjectChange.
// The GraphQL type's documentation follows.
//
// Effect on an individual Object (keyed by its ID).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange struct {
	// The address of the object that has changed.
	Address sui.Address `json:"address"`
	// The contents of the object immediately before the transaction.
	InputState RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject `json:"inputState"`
	// The contents of the object immediately after the transaction.
	OutputState RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject `json:"outputState"`
}

// GetAddress returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.Address, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetAddress() sui.Address {
	return v.Address
}

// GetInputState returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.InputState, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetInputState() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject {
	return v.InputState
}

// GetOutputState returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange.OutputState, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChange) GetOutputState() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject {
	return v.OutputState
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject struct {
	Version uint64 `json:"version"`
	// Attempts to convert the object into a MoveObject
	AsMoveObject RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject `json:"asMoveObject"`
}

// GetVersion returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject.Version, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject) GetVersion() uint64 {
	return v.Version
}

// GetAsMoveObject returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObject) GetAsMoveObject() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject {
	return v.AsMoveObject
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue `json:"contents"`
}

// GetContents returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObject) GetContents() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue {
	return v.Contents
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValue) GetType() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeInputStateObjectAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject struct {
	// Attempts to convert the object into a MoveObject
	AsMoveObject RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject `json:"asMoveObject"`
	// Attempts to convert the object into a MovePackage
	AsMovePackage RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage `json:"asMovePackage"`
}

// GetAsMoveObject returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject) GetAsMoveObject() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject {
	return v.AsMoveObject
}

// GetAsMovePackage returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject.AsMovePackage, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObject) GetAsMovePackage() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage {
	return v.AsMovePackage
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue `json:"contents"`
}

// GetContents returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObject) GetContents() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue {
	return v.Contents
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue struct {
	// The value's Move type.
	Type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType `json:"type"`
}

// GetType returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue.Type, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValue) GetType() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType {
	return v.Type
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType includes the requested fields of the GraphQL type MoveType.
// The GraphQL type's documentation follows.
//
// Represents concrete types (no type parameters, no references).
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType struct {
	// Flat representation of the type signature, as a displayable string.
	Repr string `json:"repr"`
}

// GetRepr returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType.Repr, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMoveObjectContentsMoveValueTypeMoveType) GetRepr() string {
	return v.Repr
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage includes the requested fields of the GraphQL type MovePackage.
// The GraphQL type's documentation follows.
//
// A MovePackage is a kind of Move object that represents code that has been published on chain.
// It exposes information about its modules, type definitions, functions, and dependencies.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage struct {
	// Paginate through the MoveModules defined in this package.
	Modules RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection `json:"modules"`
}

// GetModules returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage.Modules, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackage) GetModules() RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection {
	return v.Modules
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection includes the requested fields of the GraphQL type MoveModuleConnection.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection struct {
	// A list of nodes.
	Nodes []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule `json:"nodes"`
}

// GetNodes returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection.Nodes, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnection) GetNodes() []RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule {
	return v.Nodes
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule includes the requested fields of the GraphQL type MoveModule.
// The GraphQL type's documentation follows.
//
// Represents a module in Move, a library that defines struct types
// and functions that operate on these types.
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule struct {
	// The module's (unqualified) name.
	Name string `json:"name"`
}

// GetName returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule.Name, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionNodesObjectChangeOutputStateObjectAsMovePackageModulesMoveModuleConnectionNodesMoveModule) GetName() string {
	return v.Name
}

// RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSEffectsTransactionBlockEffectsObjectChangesObjectChangeConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// RPC_TRANSACTION_FIELDSSenderAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type RPC_TRANSACTION_FIELDSSenderAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_TRANSACTION_FIELDSSenderAddress.Address, and is useful for accessing the field via an interface.
func (v *RPC_TRANSACTION_FIELDSSenderAddress) GetAddress() sui.Address { return v.Address }

// RPC_VALIDATOR_FIELDS includes the GraphQL fields of Validator requested by the fragment RPC_VALIDATOR_FIELDS.
type RPC_VALIDATOR_FIELDS struct {
	// The number of epochs for which this validator has been below the
	// low stake threshold.
	AtRisk uint64 `json:"atRisk"`
	// The fee charged by the validator for staking services.
	CommissionRate int `json:"commissionRate"`
	// Number of exchange rates in the table.
	ExchangeRatesSize uint64 `json:"exchangeRatesSize"`
	// The validator's current exchange object. The exchange rate is used to determine
	// the amount of SUI tokens that each past SUI staker can withdraw in the future.
	ExchangeRates RPC_VALIDATOR_FIELDSExchangeRatesMoveObject `json:"exchangeRates"`
	// Validator's description.
	Description string `json:"description"`
	// The reference gas price for this epoch.
	GasPrice sui.BigInt `json:"gasPrice"`
	// Validator's url containing their custom image.
	ImageUrl string `json:"imageUrl"`
	// Validator's name.
	Name string `json:"name"`
	// Validator's set of credentials such as public keys, network addresses and others.
	Credentials RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials `json:"credentials"`
	// The proposed next epoch fee for the validator's staking services.
	NextEpochCommissionRate int `json:"nextEpochCommissionRate"`
	// The validator's gas price quote for the next epoch.
	NextEpochGasPrice sui.BigInt `json:"nextEpochGasPrice"`
	// Validator's set of credentials for the next epoch.
	NextEpochCredentials RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials `json:"nextEpochCredentials"`
	// The total number of SUI tokens in this pool plus
	// the pending stake amount for this epoch.
	NextEpochStake sui.BigInt `json:"nextEpochStake"`
	// The validator's current valid `Cap` object. Validators can delegate
	// the operation ability to another address. The address holding this `Cap` object
	// can then update the reference gas price and tallying rule on behalf of the validator.
	OperationCap RPC_VALIDATOR_FIELDSOperationCapMoveObject `json:"operationCap"`
	// Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.
	PendingPoolTokenWithdraw sui.BigInt `json:"pendingPoolTokenWithdraw"`
	// Pending stake amount for this epoch.
	PendingStake sui.BigInt `json:"pendingStake"`
	// Pending stake withdrawn during the current epoch, emptied at epoch boundaries.
	PendingTotalSuiWithdraw sui.BigInt `json:"pendingTotalSuiWithdraw"`
	// Total number of pool tokens issued by the pool.
	PoolTokenBalance sui.BigInt `json:"poolTokenBalance"`
	// Validator's homepage URL.
	ProjectUrl string `json:"projectUrl"`
	// The epoch stake rewards will be added here at the end of each epoch.
	RewardsPool sui.BigInt `json:"rewardsPool"`
	// The validator's current staking pool object, used to track the amount of stake
	// and to compound staking rewards.
	StakingPool RPC_VALIDATOR_FIELDSStakingPoolMoveObject `json:"stakingPool"`
	// The epoch at which this pool became active.
	StakingPoolActivationEpoch uint64 `json:"stakingPoolActivationEpoch"`
	// The total number of SUI tokens in this pool.
	StakingPoolSuiBalance sui.BigInt `json:"stakingPoolSuiBalance"`
	// The validator's address.
	Address RPC_VALIDATOR_FIELDSAddress `json:"address"`
	// The voting power of this validator in basis points (e.g., 100 = 1% voting power).
	VotingPower int `json:"votingPower"`
}

// GetAtRisk returns RPC_VALIDATOR_FIELDS.AtRisk, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetAtRisk() uint64 { return v.AtRisk }

// GetCommissionRate returns RPC_VALIDATOR_FIELDS.CommissionRate, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetCommissionRate() int { return v.CommissionRate }

// GetExchangeRatesSize returns RPC_VALIDATOR_FIELDS.ExchangeRatesSize, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetExchangeRatesSize() uint64 { return v.ExchangeRatesSize }

// GetExchangeRates returns RPC_VALIDATOR_FIELDS.ExchangeRates, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetExchangeRates() RPC_VALIDATOR_FIELDSExchangeRatesMoveObject {
	return v.ExchangeRates
}

// GetDescription returns RPC_VALIDATOR_FIELDS.Description, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetDescription() string { return v.Description }

// GetGasPrice returns RPC_VALIDATOR_FIELDS.GasPrice, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetGasPrice() sui.BigInt { return v.GasPrice }

// GetImageUrl returns RPC_VALIDATOR_FIELDS.ImageUrl, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetImageUrl() string { return v.ImageUrl }

// GetName returns RPC_VALIDATOR_FIELDS.Name, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetName() string { return v.Name }

// GetCredentials returns RPC_VALIDATOR_FIELDS.Credentials, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetCredentials() RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials {
	return v.Credentials
}

// GetNextEpochCommissionRate returns RPC_VALIDATOR_FIELDS.NextEpochCommissionRate, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetNextEpochCommissionRate() int { return v.NextEpochCommissionRate }

// GetNextEpochGasPrice returns RPC_VALIDATOR_FIELDS.NextEpochGasPrice, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetNextEpochGasPrice() sui.BigInt { return v.NextEpochGasPrice }

// GetNextEpochCredentials returns RPC_VALIDATOR_FIELDS.NextEpochCredentials, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetNextEpochCredentials() RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials {
	return v.NextEpochCredentials
}

// GetNextEpochStake returns RPC_VALIDATOR_FIELDS.NextEpochStake, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetNextEpochStake() sui.BigInt { return v.NextEpochStake }

// GetOperationCap returns RPC_VALIDATOR_FIELDS.OperationCap, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetOperationCap() RPC_VALIDATOR_FIELDSOperationCapMoveObject {
	return v.OperationCap
}

// GetPendingPoolTokenWithdraw returns RPC_VALIDATOR_FIELDS.PendingPoolTokenWithdraw, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetPendingPoolTokenWithdraw() sui.BigInt {
	return v.PendingPoolTokenWithdraw
}

// GetPendingStake returns RPC_VALIDATOR_FIELDS.PendingStake, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetPendingStake() sui.BigInt { return v.PendingStake }

// GetPendingTotalSuiWithdraw returns RPC_VALIDATOR_FIELDS.PendingTotalSuiWithdraw, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetPendingTotalSuiWithdraw() sui.BigInt {
	return v.PendingTotalSuiWithdraw
}

// GetPoolTokenBalance returns RPC_VALIDATOR_FIELDS.PoolTokenBalance, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetPoolTokenBalance() sui.BigInt { return v.PoolTokenBalance }

// GetProjectUrl returns RPC_VALIDATOR_FIELDS.ProjectUrl, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetProjectUrl() string { return v.ProjectUrl }

// GetRewardsPool returns RPC_VALIDATOR_FIELDS.RewardsPool, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetRewardsPool() sui.BigInt { return v.RewardsPool }

// GetStakingPool returns RPC_VALIDATOR_FIELDS.StakingPool, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetStakingPool() RPC_VALIDATOR_FIELDSStakingPoolMoveObject {
	return v.StakingPool
}

// GetStakingPoolActivationEpoch returns RPC_VALIDATOR_FIELDS.StakingPoolActivationEpoch, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetStakingPoolActivationEpoch() uint64 {
	return v.StakingPoolActivationEpoch
}

// GetStakingPoolSuiBalance returns RPC_VALIDATOR_FIELDS.StakingPoolSuiBalance, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetStakingPoolSuiBalance() sui.BigInt { return v.StakingPoolSuiBalance }

// GetAddress returns RPC_VALIDATOR_FIELDS.Address, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetAddress() RPC_VALIDATOR_FIELDSAddress { return v.Address }

// GetVotingPower returns RPC_VALIDATOR_FIELDS.VotingPower, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDS) GetVotingPower() int { return v.VotingPower }

// RPC_VALIDATOR_FIELDSAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type RPC_VALIDATOR_FIELDSAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_VALIDATOR_FIELDSAddress.Address, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSAddress) GetAddress() sui.Address { return v.Address }

// RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials includes the requested fields of the GraphQL type ValidatorCredentials.
// The GraphQL type's documentation follows.
//
// The credentials related fields associated with a validator.
type RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials struct {
	RPC_CREDENTIAL_FIELDS `json:"-"`
}

// GetNetAddress returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.NetAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetNetAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.NetAddress
}

// GetNetworkPubKey returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.NetworkPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetNetworkPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.NetworkPubKey
}

// GetP2PAddress returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.P2PAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetP2PAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.P2PAddress
}

// GetPrimaryAddress returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.PrimaryAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetPrimaryAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.PrimaryAddress
}

// GetWorkerPubKey returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.WorkerPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetWorkerPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.WorkerPubKey
}

// GetWorkerAddress returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.WorkerAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetWorkerAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.WorkerAddress
}

// GetProofOfPossession returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.ProofOfPossession, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetProofOfPossession() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.ProofOfPossession
}

// GetProtocolPubKey returns RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials.ProtocolPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) GetProtocolPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.ProtocolPubKey
}

func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_CREDENTIAL_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_VALIDATOR_FIELDSCredentialsValidatorCredentials struct {
	NetAddress string `json:"netAddress"`

	NetworkPubKey sui.Base64 `json:"networkPubKey"`

	P2PAddress string `json:"p2PAddress"`

	PrimaryAddress string `json:"primaryAddress"`

	WorkerPubKey sui.Base64 `json:"workerPubKey"`

	WorkerAddress string `json:"workerAddress"`

	ProofOfPossession sui.Base64 `json:"proofOfPossession"`

	ProtocolPubKey sui.Base64 `json:"protocolPubKey"`
}

func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_VALIDATOR_FIELDSCredentialsValidatorCredentials) __premarshalJSON() (*__premarshalRPC_VALIDATOR_FIELDSCredentialsValidatorCredentials, error) {
	var retval __premarshalRPC_VALIDATOR_FIELDSCredentialsValidatorCredentials

	retval.NetAddress = v.RPC_CREDENTIAL_FIELDS.NetAddress
	retval.NetworkPubKey = v.RPC_CREDENTIAL_FIELDS.NetworkPubKey
	retval.P2PAddress = v.RPC_CREDENTIAL_FIELDS.P2PAddress
	retval.PrimaryAddress = v.RPC_CREDENTIAL_FIELDS.PrimaryAddress
	retval.WorkerPubKey = v.RPC_CREDENTIAL_FIELDS.WorkerPubKey
	retval.WorkerAddress = v.RPC_CREDENTIAL_FIELDS.WorkerAddress
	retval.ProofOfPossession = v.RPC_CREDENTIAL_FIELDS.ProofOfPossession
	retval.ProtocolPubKey = v.RPC_CREDENTIAL_FIELDS.ProtocolPubKey
	return &retval, nil
}

// RPC_VALIDATOR_FIELDSExchangeRatesMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_VALIDATOR_FIELDSExchangeRatesMoveObject struct {
	// Displays the contents of the Move object in a JSON string and through GraphQL types. Also
	// provides the flat representation of the type signature, and the BCS of the corresponding
	// data.
	Contents RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue `json:"contents"`
	Address  sui.Address                                                  `json:"address"`
}

// GetContents returns RPC_VALIDATOR_FIELDSExchangeRatesMoveObject.Contents, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSExchangeRatesMoveObject) GetContents() RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue {
	return v.Contents
}

// GetAddress returns RPC_VALIDATOR_FIELDSExchangeRatesMoveObject.Address, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSExchangeRatesMoveObject) GetAddress() sui.Address { return v.Address }

// RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue includes the requested fields of the GraphQL type MoveValue.
type RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue struct {
	// Representation of a Move value in JSON, where:
	//
	// - Addresses, IDs, and UIDs are represented in canonical form, as JSON strings.
	// - Bools are represented by JSON boolean literals.
	// - u8, u16, and u32 are represented as JSON numbers.
	// - u64, u128, and u256 are represented as JSON strings.
	// - Vectors are represented by JSON arrays.
	// - Structs are represented by JSON objects.
	// - Empty optional values are represented by `null`.
	//
	// This form is offered as a less verbose convenience in cases where the layout of the type is
	// known by the client.
	Json json.RawMessage `json:"json"`
}

// GetJson returns RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue.Json, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSExchangeRatesMoveObjectContentsMoveValue) GetJson() json.RawMessage {
	return v.Json
}

// RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials includes the requested fields of the GraphQL type ValidatorCredentials.
// The GraphQL type's documentation follows.
//
// The credentials related fields associated with a validator.
type RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials struct {
	RPC_CREDENTIAL_FIELDS `json:"-"`
}

// GetNetAddress returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.NetAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetNetAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.NetAddress
}

// GetNetworkPubKey returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.NetworkPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetNetworkPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.NetworkPubKey
}

// GetP2PAddress returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.P2PAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetP2PAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.P2PAddress
}

// GetPrimaryAddress returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.PrimaryAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetPrimaryAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.PrimaryAddress
}

// GetWorkerPubKey returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.WorkerPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetWorkerPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.WorkerPubKey
}

// GetWorkerAddress returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.WorkerAddress, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetWorkerAddress() string {
	return v.RPC_CREDENTIAL_FIELDS.WorkerAddress
}

// GetProofOfPossession returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.ProofOfPossession, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetProofOfPossession() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.ProofOfPossession
}

// GetProtocolPubKey returns RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials.ProtocolPubKey, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) GetProtocolPubKey() sui.Base64 {
	return v.RPC_CREDENTIAL_FIELDS.ProtocolPubKey
}

func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_CREDENTIAL_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials struct {
	NetAddress string `json:"netAddress"`

	NetworkPubKey sui.Base64 `json:"networkPubKey"`

	P2PAddress string `json:"p2PAddress"`

	PrimaryAddress string `json:"primaryAddress"`

	WorkerPubKey sui.Base64 `json:"workerPubKey"`

	WorkerAddress string `json:"workerAddress"`

	ProofOfPossession sui.Base64 `json:"proofOfPossession"`

	ProtocolPubKey sui.Base64 `json:"protocolPubKey"`
}

func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials) __premarshalJSON() (*__premarshalRPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials, error) {
	var retval __premarshalRPC_VALIDATOR_FIELDSNextEpochCredentialsValidatorCredentials

	retval.NetAddress = v.RPC_CREDENTIAL_FIELDS.NetAddress
	retval.NetworkPubKey = v.RPC_CREDENTIAL_FIELDS.NetworkPubKey
	retval.P2PAddress = v.RPC_CREDENTIAL_FIELDS.P2PAddress
	retval.PrimaryAddress = v.RPC_CREDENTIAL_FIELDS.PrimaryAddress
	retval.WorkerPubKey = v.RPC_CREDENTIAL_FIELDS.WorkerPubKey
	retval.WorkerAddress = v.RPC_CREDENTIAL_FIELDS.WorkerAddress
	retval.ProofOfPossession = v.RPC_CREDENTIAL_FIELDS.ProofOfPossession
	retval.ProtocolPubKey = v.RPC_CREDENTIAL_FIELDS.ProtocolPubKey
	return &retval, nil
}

// RPC_VALIDATOR_FIELDSOperationCapMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_VALIDATOR_FIELDSOperationCapMoveObject struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_VALIDATOR_FIELDSOperationCapMoveObject.Address, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSOperationCapMoveObject) GetAddress() sui.Address { return v.Address }

// RPC_VALIDATOR_FIELDSStakingPoolMoveObject includes the requested fields of the GraphQL type MoveObject.
// The GraphQL type's documentation follows.
//
// The representation of an object as a Move Object, which exposes additional information
// (content, module that governs it, version, is transferrable, etc.) about this object.
type RPC_VALIDATOR_FIELDSStakingPoolMoveObject struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns RPC_VALIDATOR_FIELDSStakingPoolMoveObject.Address, and is useful for accessing the field via an interface.
func (v *RPC_VALIDATOR_FIELDSStakingPoolMoveObject) GetAddress() sui.Address { return v.Address }

// ResolveNameServiceAddressResolveSuinsAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type ResolveNameServiceAddressResolveSuinsAddress struct {
	Address sui.Address `json:"address"`
}

// GetAddress returns ResolveNameServiceAddressResolveSuinsAddress.Address, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceAddressResolveSuinsAddress) GetAddress() sui.Address { return v.Address }

// ResolveNameServiceAddressResponse is returned by ResolveNameServiceAddress on success.
type ResolveNameServiceAddressResponse struct {
	// Resolves a SuiNS `domain` name to an address, if it has been bound.
	ResolveSuinsAddress ResolveNameServiceAddressResolveSuinsAddress `json:"resolveSuinsAddress"`
}

// GetResolveSuinsAddress returns ResolveNameServiceAddressResponse.ResolveSuinsAddress, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceAddressResponse) GetResolveSuinsAddress() ResolveNameServiceAddressResolveSuinsAddress {
	return v.ResolveSuinsAddress
}

// ResolveNameServiceNamesAddress includes the requested fields of the GraphQL type Address.
// The GraphQL type's documentation follows.
//
// The 32-byte address that is an account address (corresponding to a public key).
type ResolveNameServiceNamesAddress struct {
	// The SuinsRegistration NFTs owned by this address. These grant the owner the capability to
	// manage the associated domain.
	SuinsRegistrations ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection `json:"suinsRegistrations"`
}

// GetSuinsRegistrations returns ResolveNameServiceNamesAddress.SuinsRegistrations, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddress) GetSuinsRegistrations() ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection {
	return v.SuinsRegistrations
}

// ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection includes the requested fields of the GraphQL type SuinsRegistrationConnection.
type ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection struct {
	// Information to aid in pagination.
	PageInfo ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo `json:"pageInfo"`
	// A list of nodes.
	Nodes []ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration `json:"nodes"`
}

// GetPageInfo returns ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection) GetPageInfo() ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo {
	return v.PageInfo
}

// GetNodes returns ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection.Nodes, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnection) GetNodes() []ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration {
	return v.Nodes
}

// ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration includes the requested fields of the GraphQL type SuinsRegistration.
type ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration struct {
	// Domain name of the SuinsRegistration object
	Domain string `json:"domain"`
}

// GetDomain returns ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration.Domain, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionNodesSuinsRegistration) GetDomain() string {
	return v.Domain
}

// ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection
type ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetHasNextPage returns ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesAddressSuinsRegistrationsSuinsRegistrationConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// ResolveNameServiceNamesResponse is returned by ResolveNameServiceNames on success.
type ResolveNameServiceNamesResponse struct {
	// Look-up an Account by its SuiAddress.
	Address ResolveNameServiceNamesAddress `json:"address"`
}

// GetAddress returns ResolveNameServiceNamesResponse.Address, and is useful for accessing the field via an interface.
func (v *ResolveNameServiceNamesResponse) GetAddress() ResolveNameServiceNamesAddress {
	return v.Address
}

// The stake's possible status: active, pending, or unstaked.
type StakeStatus string

const (
	// The stake object is active in a staking pool and it is generating rewards.
	StakeStatusActive StakeStatus = "ACTIVE"
	// The stake awaits to join a staking pool in the next epoch.
	StakeStatusPending StakeStatus = "PENDING"
	// The stake is no longer active in any staking pool.
	StakeStatusUnstaked StakeStatus = "UNSTAKED"
)

var AllStakeStatus = []StakeStatus{
	StakeStatusActive,
	StakeStatusPending,
	StakeStatusUnstaked,
}

type TransactionBlockFilter struct {
	// Filter transactions by move function called. Calls can be filtered by the `package`,
	// `package::module`, or the `package::module::name` of their function.
	Function string `json:"function"`
	// An input filter selecting for either system or programmable transactions.
	Kind TransactionBlockKindInput `json:"kind"`
	// Limit to transactions that occured strictly after the given checkpoint.
	AfterCheckpoint uint64 `json:"afterCheckpoint"`
	// Limit to transactions in the given checkpoint.
	AtCheckpoint uint64 `json:"atCheckpoint"`
	// Limit to transaction that occured strictly before the given checkpoint.
	BeforeCheckpoint uint64 `json:"beforeCheckpoint"`
	// Limit to transactions that interacted with the given address. The address could be a
	// sender, sponsor, or recipient of the transaction.
	AffectedAddress sui.Address `json:"affectedAddress"`
	// Limit to transactions that were sent by the given address.
	SentAddress sui.Address `json:"sentAddress"`
	// Limit to transactions that accepted the given object as an input. NOTE: this input filter
	// has been deprecated in favor of `affectedObject` which offers an easier to under behavior.
	//
	// This filter will be removed with 1.36.0 (2024-10-14), or at least one release after
	// `affectedObject` is introduced, whichever is later.
	InputObject sui.Address `json:"inputObject"`
	// Limit to transactions that output a versioon of this object. NOTE: this input filter has
	// been deprecated in favor of `affectedObject` which offers an easier to understand behavor.
	//
	// This filter will be removed with 1.36.0 (2024-10-14), or at least one release after
	// `affectedObject` is introduced, whichever is later.
	ChangedObject sui.Address `json:"changedObject"`
	// Select transactions by their digest.
	TransactionIds []string `json:"transactionIds"`
}

// GetFunction returns TransactionBlockFilter.Function, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetFunction() string { return v.Function }

// GetKind returns TransactionBlockFilter.Kind, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetKind() TransactionBlockKindInput { return v.Kind }

// GetAfterCheckpoint returns TransactionBlockFilter.AfterCheckpoint, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetAfterCheckpoint() uint64 { return v.AfterCheckpoint }

// GetAtCheckpoint returns TransactionBlockFilter.AtCheckpoint, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetAtCheckpoint() uint64 { return v.AtCheckpoint }

// GetBeforeCheckpoint returns TransactionBlockFilter.BeforeCheckpoint, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetBeforeCheckpoint() uint64 { return v.BeforeCheckpoint }

// GetAffectedAddress returns TransactionBlockFilter.AffectedAddress, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetAffectedAddress() sui.Address { return v.AffectedAddress }

// GetSentAddress returns TransactionBlockFilter.SentAddress, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetSentAddress() sui.Address { return v.SentAddress }

// GetInputObject returns TransactionBlockFilter.InputObject, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetInputObject() sui.Address { return v.InputObject }

// GetChangedObject returns TransactionBlockFilter.ChangedObject, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetChangedObject() sui.Address { return v.ChangedObject }

// GetTransactionIds returns TransactionBlockFilter.TransactionIds, and is useful for accessing the field via an interface.
func (v *TransactionBlockFilter) GetTransactionIds() []string { return v.TransactionIds }

// An input filter selecting for either system or programmable transactions.
type TransactionBlockKindInput string

const (
	// A system transaction can be one of several types of transactions.
	// See [unions/transaction-block-kind] for more details.
	TransactionBlockKindInputSystemTx TransactionBlockKindInput = "SYSTEM_TX"
	// A user submitted transaction block.
	TransactionBlockKindInputProgrammableTx TransactionBlockKindInput = "PROGRAMMABLE_TX"
)

var AllTransactionBlockKindInput = []TransactionBlockKindInput{
	TransactionBlockKindInputSystemTx,
	TransactionBlockKindInputProgrammableTx,
}

// The optional extra data a user can provide to a transaction dry run.
// `sender` defaults to `0x0`. If gasObjects` is not present, or is an empty list,
// it is substituted with a mock Coin object, `gasPrice` defaults to the reference
// gas price, `gasBudget` defaults to the max gas budget and `gasSponsor` defaults
// to the sender.
type TransactionMetadata struct {
	Sender     sui.Address `json:"sender"`
	GasPrice   uint64      `json:"gasPrice"`
	GasObjects []ObjectRef `json:"gasObjects"`
	GasBudget  uint64      `json:"gasBudget"`
	GasSponsor sui.Address `json:"gasSponsor"`
}

// GetSender returns TransactionMetadata.Sender, and is useful for accessing the field via an interface.
func (v *TransactionMetadata) GetSender() sui.Address { return v.Sender }

// GetGasPrice returns TransactionMetadata.GasPrice, and is useful for accessing the field via an interface.
func (v *TransactionMetadata) GetGasPrice() uint64 { return v.GasPrice }

// GetGasObjects returns TransactionMetadata.GasObjects, and is useful for accessing the field via an interface.
func (v *TransactionMetadata) GetGasObjects() []ObjectRef { return v.GasObjects }

// GetGasBudget returns TransactionMetadata.GasBudget, and is useful for accessing the field via an interface.
func (v *TransactionMetadata) GetGasBudget() uint64 { return v.GasBudget }

// GetGasSponsor returns TransactionMetadata.GasSponsor, and is useful for accessing the field via an interface.
func (v *TransactionMetadata) GetGasSponsor() sui.Address { return v.GasSponsor }

// TryGetPastObjectCurrentObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type TryGetPastObjectCurrentObject struct {
	Address sui.Address `json:"address"`
	Version uint64      `json:"version"`
}

// GetAddress returns TryGetPastObjectCurrentObject.Address, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectCurrentObject) GetAddress() sui.Address { return v.Address }

// GetVersion returns TryGetPastObjectCurrentObject.Version, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectCurrentObject) GetVersion() uint64 { return v.Version }

// TryGetPastObjectObject includes the requested fields of the GraphQL type Object.
// The GraphQL type's documentation follows.
//
// An object in Sui is a package (set of Move bytecode modules) or object (typed data structure
// with fields) with additional metadata detailing its id, version, transaction digest, owner
// field indicating how this object can be accessed.
type TryGetPastObjectObject struct {
	RPC_OBJECT_FIELDS `json:"-"`
}

// GetObjectId returns TryGetPastObjectObject.ObjectId, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetObjectId() sui.Address { return v.RPC_OBJECT_FIELDS.ObjectId }

// GetVersion returns TryGetPastObjectObject.Version, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetVersion() uint64 { return v.RPC_OBJECT_FIELDS.Version }

// GetAsMoveObjectType returns TryGetPastObjectObject.AsMoveObjectType, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetAsMoveObjectType() RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectType
}

// GetAsMoveObjectContent returns TryGetPastObjectObject.AsMoveObjectContent, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetAsMoveObjectContent() RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObjectContent
}

// GetAsMoveObject returns TryGetPastObjectObject.AsMoveObject, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetAsMoveObject() RPC_OBJECT_FIELDSAsMoveObject {
	return v.RPC_OBJECT_FIELDS.AsMoveObject
}

// GetOwner returns TryGetPastObjectObject.Owner, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetOwner() RPC_OBJECT_FIELDSOwnerObjectOwner {
	return v.RPC_OBJECT_FIELDS.Owner
}

// GetPreviousTransactionBlock returns TryGetPastObjectObject.PreviousTransactionBlock, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetPreviousTransactionBlock() RPC_OBJECT_FIELDSPreviousTransactionBlock {
	return v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
}

// GetStorageRebate returns TryGetPastObjectObject.StorageRebate, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetStorageRebate() sui.BigInt {
	return v.RPC_OBJECT_FIELDS.StorageRebate
}

// GetDigest returns TryGetPastObjectObject.Digest, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetDigest() string { return v.RPC_OBJECT_FIELDS.Digest }

// GetDisplay returns TryGetPastObjectObject.Display, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectObject) GetDisplay() []RPC_OBJECT_FIELDSDisplayDisplayEntry {
	return v.RPC_OBJECT_FIELDS.Display
}

func (v *TryGetPastObjectObject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TryGetPastObjectObject
		graphql.NoUnmarshalJSON
	}
	firstPass.TryGetPastObjectObject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RPC_OBJECT_FIELDS)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTryGetPastObjectObject struct {
	ObjectId sui.Address `json:"objectId"`

	Version uint64 `json:"version"`

	AsMoveObjectType RPC_OBJECT_FIELDSAsMoveObjectTypeMoveObject `json:"asMoveObjectType"`

	AsMoveObjectContent RPC_OBJECT_FIELDSAsMoveObjectContentMoveObject `json:"asMoveObjectContent"`

	AsMoveObject RPC_OBJECT_FIELDSAsMoveObject `json:"asMoveObject"`

	Owner json.RawMessage `json:"owner"`

	PreviousTransactionBlock RPC_OBJECT_FIELDSPreviousTransactionBlock `json:"previousTransactionBlock"`

	StorageRebate sui.BigInt `json:"storageRebate"`

	Digest string `json:"digest"`

	Display []RPC_OBJECT_FIELDSDisplayDisplayEntry `json:"display"`
}

func (v *TryGetPastObjectObject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TryGetPastObjectObject) __premarshalJSON() (*__premarshalTryGetPastObjectObject, error) {
	var retval __premarshalTryGetPastObjectObject

	retval.ObjectId = v.RPC_OBJECT_FIELDS.ObjectId
	retval.Version = v.RPC_OBJECT_FIELDS.Version
	retval.AsMoveObjectType = v.RPC_OBJECT_FIELDS.AsMoveObjectType
	retval.AsMoveObjectContent = v.RPC_OBJECT_FIELDS.AsMoveObjectContent
	retval.AsMoveObject = v.RPC_OBJECT_FIELDS.AsMoveObject
	{

		dst := &retval.Owner
		src := v.RPC_OBJECT_FIELDS.Owner
		var err error
		*dst, err = __marshalRPC_OBJECT_FIELDSOwnerObjectOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal TryGetPastObjectObject.RPC_OBJECT_FIELDS.Owner: %w", err)
		}
	}
	retval.PreviousTransactionBlock = v.RPC_OBJECT_FIELDS.PreviousTransactionBlock
	retval.StorageRebate = v.RPC_OBJECT_FIELDS.StorageRebate
	retval.Digest = v.RPC_OBJECT_FIELDS.Digest
	retval.Display = v.RPC_OBJECT_FIELDS.Display
	return &retval, nil
}

// TryGetPastObjectResponse is returned by TryGetPastObject on success.
type TryGetPastObjectResponse struct {
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Current TryGetPastObjectCurrentObject `json:"current"`
	// The object corresponding to the given address at the (optionally) given version.
	// When no version is given, the latest version is returned.
	Object TryGetPastObjectObject `json:"object"`
}

// GetCurrent returns TryGetPastObjectResponse.Current, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectResponse) GetCurrent() TryGetPastObjectCurrentObject { return v.Current }

// GetObject returns TryGetPastObjectResponse.Object, and is useful for accessing the field via an interface.
func (v *TryGetPastObjectResponse) GetObject() TryGetPastObjectObject { return v.Object }

// __DevInspectTransactionBlockInput is used internally by genqlient
type __DevInspectTransactionBlockInput struct {
	TxBytes            string              `json:"txBytes"`
	TxMeta             TransactionMetadata `json:"txMeta"`
	ShowBalanceChanges *bool               `json:"showBalanceChanges"`
	ShowEffects        *bool               `json:"showEffects"`
	ShowRawEffects     *bool               `json:"showRawEffects"`
	ShowEvents         *bool               `json:"showEvents"`
	ShowInput          *bool               `json:"showInput"`
	ShowObjectChanges  *bool               `json:"showObjectChanges"`
	ShowRawInput       *bool               `json:"showRawInput"`
}

// GetTxBytes returns __DevInspectTransactionBlockInput.TxBytes, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetTxBytes() string { return v.TxBytes }

// GetTxMeta returns __DevInspectTransactionBlockInput.TxMeta, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetTxMeta() TransactionMetadata { return v.TxMeta }

// GetShowBalanceChanges returns __DevInspectTransactionBlockInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowBalanceChanges() *bool {
	return v.ShowBalanceChanges
}

// GetShowEffects returns __DevInspectTransactionBlockInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __DevInspectTransactionBlockInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __DevInspectTransactionBlockInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __DevInspectTransactionBlockInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __DevInspectTransactionBlockInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __DevInspectTransactionBlockInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__DevInspectTransactionBlockInput) GetShowRawInput() *bool { return v.ShowRawInput }

// __DryRunTransactionBlockInput is used internally by genqlient
type __DryRunTransactionBlockInput struct {
	TxBytes            string `json:"txBytes"`
	ShowBalanceChanges *bool  `json:"showBalanceChanges"`
	ShowEffects        *bool  `json:"showEffects"`
	ShowRawEffects     *bool  `json:"showRawEffects"`
	ShowEvents         *bool  `json:"showEvents"`
	ShowInput          *bool  `json:"showInput"`
	ShowObjectChanges  *bool  `json:"showObjectChanges"`
	ShowRawInput       *bool  `json:"showRawInput"`
}

// GetTxBytes returns __DryRunTransactionBlockInput.TxBytes, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetTxBytes() string { return v.TxBytes }

// GetShowBalanceChanges returns __DryRunTransactionBlockInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowBalanceChanges() *bool { return v.ShowBalanceChanges }

// GetShowEffects returns __DryRunTransactionBlockInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __DryRunTransactionBlockInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __DryRunTransactionBlockInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __DryRunTransactionBlockInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __DryRunTransactionBlockInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __DryRunTransactionBlockInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__DryRunTransactionBlockInput) GetShowRawInput() *bool { return v.ShowRawInput }

// __ExecuteTransactionBlockInput is used internally by genqlient
type __ExecuteTransactionBlockInput struct {
	TxBytes            string   `json:"txBytes"`
	Signatures         []string `json:"signatures"`
	ShowBalanceChanges *bool    `json:"showBalanceChanges"`
	ShowEffects        *bool    `json:"showEffects"`
	ShowRawEffects     *bool    `json:"showRawEffects"`
	ShowEvents         *bool    `json:"showEvents"`
	ShowInput          *bool    `json:"showInput"`
	ShowObjectChanges  *bool    `json:"showObjectChanges"`
	ShowRawInput       *bool    `json:"showRawInput"`
}

// GetTxBytes returns __ExecuteTransactionBlockInput.TxBytes, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetTxBytes() string { return v.TxBytes }

// GetSignatures returns __ExecuteTransactionBlockInput.Signatures, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetSignatures() []string { return v.Signatures }

// GetShowBalanceChanges returns __ExecuteTransactionBlockInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowBalanceChanges() *bool { return v.ShowBalanceChanges }

// GetShowEffects returns __ExecuteTransactionBlockInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __ExecuteTransactionBlockInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __ExecuteTransactionBlockInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __ExecuteTransactionBlockInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __ExecuteTransactionBlockInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __ExecuteTransactionBlockInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__ExecuteTransactionBlockInput) GetShowRawInput() *bool { return v.ShowRawInput }

// __GetAllBalancesInput is used internally by genqlient
type __GetAllBalancesInput struct {
	Owner  sui.Address `json:"owner"`
	Limit  *int        `json:"limit"`
	Cursor *string     `json:"cursor"`
}

// GetOwner returns __GetAllBalancesInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetAllBalancesInput) GetOwner() sui.Address { return v.Owner }

// GetLimit returns __GetAllBalancesInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetAllBalancesInput) GetLimit() *int { return v.Limit }

// GetCursor returns __GetAllBalancesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetAllBalancesInput) GetCursor() *string { return v.Cursor }

// __GetBalanceInput is used internally by genqlient
type __GetBalanceInput struct {
	Owner         sui.Address `json:"owner"`
	FetchCoinType *string     `json:"fetchCoinType"`
}

// GetOwner returns __GetBalanceInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetBalanceInput) GetOwner() sui.Address { return v.Owner }

// GetFetchCoinType returns __GetBalanceInput.FetchCoinType, and is useful for accessing the field via an interface.
func (v *__GetBalanceInput) GetFetchCoinType() *string { return v.FetchCoinType }

// __GetCheckpointInput is used internally by genqlient
type __GetCheckpointInput struct {
	Id *CheckpointId `json:"id"`
}

// GetId returns __GetCheckpointInput.Id, and is useful for accessing the field via an interface.
func (v *__GetCheckpointInput) GetId() *CheckpointId { return v.Id }

// __GetCheckpointsInput is used internally by genqlient
type __GetCheckpointsInput struct {
	First  *int    `json:"first"`
	Before *string `json:"before"`
	Last   *int    `json:"last"`
	After  *string `json:"after"`
}

// GetFirst returns __GetCheckpointsInput.First, and is useful for accessing the field via an interface.
func (v *__GetCheckpointsInput) GetFirst() *int { return v.First }

// GetBefore returns __GetCheckpointsInput.Before, and is useful for accessing the field via an interface.
func (v *__GetCheckpointsInput) GetBefore() *string { return v.Before }

// GetLast returns __GetCheckpointsInput.Last, and is useful for accessing the field via an interface.
func (v *__GetCheckpointsInput) GetLast() *int { return v.Last }

// GetAfter returns __GetCheckpointsInput.After, and is useful for accessing the field via an interface.
func (v *__GetCheckpointsInput) GetAfter() *string { return v.After }

// __GetCoinMetadataInput is used internally by genqlient
type __GetCoinMetadataInput struct {
	CoinType string `json:"coinType"`
}

// GetCoinType returns __GetCoinMetadataInput.CoinType, and is useful for accessing the field via an interface.
func (v *__GetCoinMetadataInput) GetCoinType() string { return v.CoinType }

// __GetCoinsInput is used internally by genqlient
type __GetCoinsInput struct {
	Owner         sui.Address `json:"owner"`
	First         *int        `json:"first"`
	Cursor        *string     `json:"cursor"`
	FetchCoinType *string     `json:"fetchCoinType"`
}

// GetOwner returns __GetCoinsInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetCoinsInput) GetOwner() sui.Address { return v.Owner }

// GetFirst returns __GetCoinsInput.First, and is useful for accessing the field via an interface.
func (v *__GetCoinsInput) GetFirst() *int { return v.First }

// GetCursor returns __GetCoinsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetCoinsInput) GetCursor() *string { return v.Cursor }

// GetFetchCoinType returns __GetCoinsInput.FetchCoinType, and is useful for accessing the field via an interface.
func (v *__GetCoinsInput) GetFetchCoinType() *string { return v.FetchCoinType }

// __GetCommitteeInfoInput is used internally by genqlient
type __GetCommitteeInfoInput struct {
	EpochId *uint64 `json:"epochId"`
	After   *string `json:"after"`
}

// GetEpochId returns __GetCommitteeInfoInput.EpochId, and is useful for accessing the field via an interface.
func (v *__GetCommitteeInfoInput) GetEpochId() *uint64 { return v.EpochId }

// GetAfter returns __GetCommitteeInfoInput.After, and is useful for accessing the field via an interface.
func (v *__GetCommitteeInfoInput) GetAfter() *string { return v.After }

// __GetDynamicFieldObjectInput is used internally by genqlient
type __GetDynamicFieldObjectInput struct {
	ParentId sui.Address      `json:"parentId"`
	Name     DynamicFieldName `json:"name"`
}

// GetParentId returns __GetDynamicFieldObjectInput.ParentId, and is useful for accessing the field via an interface.
func (v *__GetDynamicFieldObjectInput) GetParentId() sui.Address { return v.ParentId }

// GetName returns __GetDynamicFieldObjectInput.Name, and is useful for accessing the field via an interface.
func (v *__GetDynamicFieldObjectInput) GetName() DynamicFieldName { return v.Name }

// __GetDynamicFieldsInput is used internally by genqlient
type __GetDynamicFieldsInput struct {
	ParentId sui.Address `json:"parentId"`
	First    *int        `json:"first"`
	Cursor   *string     `json:"cursor"`
}

// GetParentId returns __GetDynamicFieldsInput.ParentId, and is useful for accessing the field via an interface.
func (v *__GetDynamicFieldsInput) GetParentId() sui.Address { return v.ParentId }

// GetFirst returns __GetDynamicFieldsInput.First, and is useful for accessing the field via an interface.
func (v *__GetDynamicFieldsInput) GetFirst() *int { return v.First }

// GetCursor returns __GetDynamicFieldsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetDynamicFieldsInput) GetCursor() *string { return v.Cursor }

// __GetMoveFunctionArgTypesInput is used internally by genqlient
type __GetMoveFunctionArgTypesInput struct {
	PackageId sui.Address `json:"packageId"`
	Module    string      `json:"module"`
	Function  string      `json:"function"`
}

// GetPackageId returns __GetMoveFunctionArgTypesInput.PackageId, and is useful for accessing the field via an interface.
func (v *__GetMoveFunctionArgTypesInput) GetPackageId() sui.Address { return v.PackageId }

// GetModule returns __GetMoveFunctionArgTypesInput.Module, and is useful for accessing the field via an interface.
func (v *__GetMoveFunctionArgTypesInput) GetModule() string { return v.Module }

// GetFunction returns __GetMoveFunctionArgTypesInput.Function, and is useful for accessing the field via an interface.
func (v *__GetMoveFunctionArgTypesInput) GetFunction() string { return v.Function }

// __GetNormalizedMoveFunctionInput is used internally by genqlient
type __GetNormalizedMoveFunctionInput struct {
	PackageId sui.Address `json:"packageId"`
	Module    string      `json:"module"`
	Function  string      `json:"function"`
}

// GetPackageId returns __GetNormalizedMoveFunctionInput.PackageId, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveFunctionInput) GetPackageId() sui.Address { return v.PackageId }

// GetModule returns __GetNormalizedMoveFunctionInput.Module, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveFunctionInput) GetModule() string { return v.Module }

// GetFunction returns __GetNormalizedMoveFunctionInput.Function, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveFunctionInput) GetFunction() string { return v.Function }

// __GetNormalizedMoveModuleInput is used internally by genqlient
type __GetNormalizedMoveModuleInput struct {
	PackageId sui.Address `json:"packageId"`
	Module    string      `json:"module"`
}

// GetPackageId returns __GetNormalizedMoveModuleInput.PackageId, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveModuleInput) GetPackageId() sui.Address { return v.PackageId }

// GetModule returns __GetNormalizedMoveModuleInput.Module, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveModuleInput) GetModule() string { return v.Module }

// __GetNormalizedMoveModulesByPackageInput is used internally by genqlient
type __GetNormalizedMoveModulesByPackageInput struct {
	PackageId sui.Address `json:"packageId"`
	Cursor    *string     `json:"cursor"`
}

// GetPackageId returns __GetNormalizedMoveModulesByPackageInput.PackageId, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveModulesByPackageInput) GetPackageId() sui.Address { return v.PackageId }

// GetCursor returns __GetNormalizedMoveModulesByPackageInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveModulesByPackageInput) GetCursor() *string { return v.Cursor }

// __GetNormalizedMoveStructInput is used internally by genqlient
type __GetNormalizedMoveStructInput struct {
	PackageId  sui.Address `json:"packageId"`
	Module     string      `json:"module"`
	MoveStruct string      `json:"moveStruct"`
}

// GetPackageId returns __GetNormalizedMoveStructInput.PackageId, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveStructInput) GetPackageId() sui.Address { return v.PackageId }

// GetModule returns __GetNormalizedMoveStructInput.Module, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveStructInput) GetModule() string { return v.Module }

// GetMoveStruct returns __GetNormalizedMoveStructInput.MoveStruct, and is useful for accessing the field via an interface.
func (v *__GetNormalizedMoveStructInput) GetMoveStruct() string { return v.MoveStruct }

// __GetObjectInput is used internally by genqlient
type __GetObjectInput struct {
	Id                      sui.Address `json:"id"`
	ShowBcs                 *bool       `json:"showBcs"`
	ShowOwner               *bool       `json:"showOwner"`
	ShowPreviousTransaction *bool       `json:"showPreviousTransaction"`
	ShowContent             *bool       `json:"showContent"`
	ShowDisplay             *bool       `json:"showDisplay"`
	ShowType                *bool       `json:"showType"`
	ShowStorageRebate       *bool       `json:"showStorageRebate"`
}

// GetId returns __GetObjectInput.Id, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetId() sui.Address { return v.Id }

// GetShowBcs returns __GetObjectInput.ShowBcs, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowBcs() *bool { return v.ShowBcs }

// GetShowOwner returns __GetObjectInput.ShowOwner, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowOwner() *bool { return v.ShowOwner }

// GetShowPreviousTransaction returns __GetObjectInput.ShowPreviousTransaction, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowPreviousTransaction() *bool { return v.ShowPreviousTransaction }

// GetShowContent returns __GetObjectInput.ShowContent, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowContent() *bool { return v.ShowContent }

// GetShowDisplay returns __GetObjectInput.ShowDisplay, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowDisplay() *bool { return v.ShowDisplay }

// GetShowType returns __GetObjectInput.ShowType, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowType() *bool { return v.ShowType }

// GetShowStorageRebate returns __GetObjectInput.ShowStorageRebate, and is useful for accessing the field via an interface.
func (v *__GetObjectInput) GetShowStorageRebate() *bool { return v.ShowStorageRebate }

// __GetOwnedObjectsInput is used internally by genqlient
type __GetOwnedObjectsInput struct {
	Owner                   sui.Address   `json:"owner"`
	Limit                   *int          `json:"limit"`
	Cursor                  *string       `json:"cursor"`
	ShowBcs                 *bool         `json:"showBcs"`
	ShowContent             *bool         `json:"showContent"`
	ShowDisplay             *bool         `json:"showDisplay"`
	ShowType                *bool         `json:"showType"`
	ShowOwner               *bool         `json:"showOwner"`
	ShowPreviousTransaction *bool         `json:"showPreviousTransaction"`
	ShowStorageRebate       *bool         `json:"showStorageRebate"`
	Filter                  *ObjectFilter `json:"filter"`
}

// GetOwner returns __GetOwnedObjectsInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetOwner() sui.Address { return v.Owner }

// GetLimit returns __GetOwnedObjectsInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetLimit() *int { return v.Limit }

// GetCursor returns __GetOwnedObjectsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetCursor() *string { return v.Cursor }

// GetShowBcs returns __GetOwnedObjectsInput.ShowBcs, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowBcs() *bool { return v.ShowBcs }

// GetShowContent returns __GetOwnedObjectsInput.ShowContent, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowContent() *bool { return v.ShowContent }

// GetShowDisplay returns __GetOwnedObjectsInput.ShowDisplay, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowDisplay() *bool { return v.ShowDisplay }

// GetShowType returns __GetOwnedObjectsInput.ShowType, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowType() *bool { return v.ShowType }

// GetShowOwner returns __GetOwnedObjectsInput.ShowOwner, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowOwner() *bool { return v.ShowOwner }

// GetShowPreviousTransaction returns __GetOwnedObjectsInput.ShowPreviousTransaction, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowPreviousTransaction() *bool { return v.ShowPreviousTransaction }

// GetShowStorageRebate returns __GetOwnedObjectsInput.ShowStorageRebate, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetShowStorageRebate() *bool { return v.ShowStorageRebate }

// GetFilter returns __GetOwnedObjectsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetOwnedObjectsInput) GetFilter() *ObjectFilter { return v.Filter }

// __GetProtocolConfigInput is used internally by genqlient
type __GetProtocolConfigInput struct {
	ProtocolVersion *uint64 `json:"protocolVersion"`
}

// GetProtocolVersion returns __GetProtocolConfigInput.ProtocolVersion, and is useful for accessing the field via an interface.
func (v *__GetProtocolConfigInput) GetProtocolVersion() *uint64 { return v.ProtocolVersion }

// __GetStakesByIdsInput is used internally by genqlient
type __GetStakesByIdsInput struct {
	Ids    []sui.Address `json:"ids"`
	Limit  *int          `json:"limit"`
	Cursor *string       `json:"cursor"`
}

// GetIds returns __GetStakesByIdsInput.Ids, and is useful for accessing the field via an interface.
func (v *__GetStakesByIdsInput) GetIds() []sui.Address { return v.Ids }

// GetLimit returns __GetStakesByIdsInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetStakesByIdsInput) GetLimit() *int { return v.Limit }

// GetCursor returns __GetStakesByIdsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetStakesByIdsInput) GetCursor() *string { return v.Cursor }

// __GetStakesInput is used internally by genqlient
type __GetStakesInput struct {
	Owner  sui.Address `json:"owner"`
	Limit  *int        `json:"limit"`
	Cursor *string     `json:"cursor"`
}

// GetOwner returns __GetStakesInput.Owner, and is useful for accessing the field via an interface.
func (v *__GetStakesInput) GetOwner() sui.Address { return v.Owner }

// GetLimit returns __GetStakesInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetStakesInput) GetLimit() *int { return v.Limit }

// GetCursor returns __GetStakesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__GetStakesInput) GetCursor() *string { return v.Cursor }

// __GetTotalSupplyInput is used internally by genqlient
type __GetTotalSupplyInput struct {
	CoinType string `json:"coinType"`
}

// GetCoinType returns __GetTotalSupplyInput.CoinType, and is useful for accessing the field via an interface.
func (v *__GetTotalSupplyInput) GetCoinType() string { return v.CoinType }

// __GetTransactionBlockInput is used internally by genqlient
type __GetTransactionBlockInput struct {
	Digest             string `json:"digest"`
	ShowBalanceChanges *bool  `json:"showBalanceChanges"`
	ShowEffects        *bool  `json:"showEffects"`
	ShowRawEffects     *bool  `json:"showRawEffects"`
	ShowEvents         *bool  `json:"showEvents"`
	ShowInput          *bool  `json:"showInput"`
	ShowObjectChanges  *bool  `json:"showObjectChanges"`
	ShowRawInput       *bool  `json:"showRawInput"`
}

// GetDigest returns __GetTransactionBlockInput.Digest, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetDigest() string { return v.Digest }

// GetShowBalanceChanges returns __GetTransactionBlockInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowBalanceChanges() *bool { return v.ShowBalanceChanges }

// GetShowEffects returns __GetTransactionBlockInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __GetTransactionBlockInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __GetTransactionBlockInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __GetTransactionBlockInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __GetTransactionBlockInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __GetTransactionBlockInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__GetTransactionBlockInput) GetShowRawInput() *bool { return v.ShowRawInput }

// __GetTypeLayoutInput is used internally by genqlient
type __GetTypeLayoutInput struct {
	TargetType string `json:"targetType"`
}

// GetTargetType returns __GetTypeLayoutInput.TargetType, and is useful for accessing the field via an interface.
func (v *__GetTypeLayoutInput) GetTargetType() string { return v.TargetType }

// __MultiGetObjectsInput is used internally by genqlient
type __MultiGetObjectsInput struct {
	Ids                     []sui.Address `json:"ids"`
	Limit                   *int          `json:"limit"`
	Cursor                  *string       `json:"cursor"`
	ShowBcs                 *bool         `json:"showBcs"`
	ShowContent             *bool         `json:"showContent"`
	ShowDisplay             *bool         `json:"showDisplay"`
	ShowType                *bool         `json:"showType"`
	ShowOwner               *bool         `json:"showOwner"`
	ShowPreviousTransaction *bool         `json:"showPreviousTransaction"`
	ShowStorageRebate       *bool         `json:"showStorageRebate"`
}

// GetIds returns __MultiGetObjectsInput.Ids, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetIds() []sui.Address { return v.Ids }

// GetLimit returns __MultiGetObjectsInput.Limit, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetLimit() *int { return v.Limit }

// GetCursor returns __MultiGetObjectsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetCursor() *string { return v.Cursor }

// GetShowBcs returns __MultiGetObjectsInput.ShowBcs, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowBcs() *bool { return v.ShowBcs }

// GetShowContent returns __MultiGetObjectsInput.ShowContent, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowContent() *bool { return v.ShowContent }

// GetShowDisplay returns __MultiGetObjectsInput.ShowDisplay, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowDisplay() *bool { return v.ShowDisplay }

// GetShowType returns __MultiGetObjectsInput.ShowType, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowType() *bool { return v.ShowType }

// GetShowOwner returns __MultiGetObjectsInput.ShowOwner, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowOwner() *bool { return v.ShowOwner }

// GetShowPreviousTransaction returns __MultiGetObjectsInput.ShowPreviousTransaction, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowPreviousTransaction() *bool { return v.ShowPreviousTransaction }

// GetShowStorageRebate returns __MultiGetObjectsInput.ShowStorageRebate, and is useful for accessing the field via an interface.
func (v *__MultiGetObjectsInput) GetShowStorageRebate() *bool { return v.ShowStorageRebate }

// __MultiGetTransactionBlocksInput is used internally by genqlient
type __MultiGetTransactionBlocksInput struct {
	Digests            []string `json:"digests"`
	Limit              *int     `json:"limit"`
	Cursor             *string  `json:"cursor"`
	ShowBalanceChanges *bool    `json:"showBalanceChanges"`
	ShowEffects        *bool    `json:"showEffects"`
	ShowRawEffects     *bool    `json:"showRawEffects"`
	ShowEvents         *bool    `json:"showEvents"`
	ShowInput          *bool    `json:"showInput"`
	ShowObjectChanges  *bool    `json:"showObjectChanges"`
	ShowRawInput       *bool    `json:"showRawInput"`
}

// GetDigests returns __MultiGetTransactionBlocksInput.Digests, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetDigests() []string { return v.Digests }

// GetLimit returns __MultiGetTransactionBlocksInput.Limit, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetLimit() *int { return v.Limit }

// GetCursor returns __MultiGetTransactionBlocksInput.Cursor, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetCursor() *string { return v.Cursor }

// GetShowBalanceChanges returns __MultiGetTransactionBlocksInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowBalanceChanges() *bool { return v.ShowBalanceChanges }

// GetShowEffects returns __MultiGetTransactionBlocksInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __MultiGetTransactionBlocksInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __MultiGetTransactionBlocksInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __MultiGetTransactionBlocksInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __MultiGetTransactionBlocksInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __MultiGetTransactionBlocksInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__MultiGetTransactionBlocksInput) GetShowRawInput() *bool { return v.ShowRawInput }

// __PaginateCheckpointTransactionBlocksInput is used internally by genqlient
type __PaginateCheckpointTransactionBlocksInput struct {
	Id    *CheckpointId `json:"id"`
	After *string       `json:"after"`
}

// GetId returns __PaginateCheckpointTransactionBlocksInput.Id, and is useful for accessing the field via an interface.
func (v *__PaginateCheckpointTransactionBlocksInput) GetId() *CheckpointId { return v.Id }

// GetAfter returns __PaginateCheckpointTransactionBlocksInput.After, and is useful for accessing the field via an interface.
func (v *__PaginateCheckpointTransactionBlocksInput) GetAfter() *string { return v.After }

// __PaginateEpochValidatorsInput is used internally by genqlient
type __PaginateEpochValidatorsInput struct {
	Id    uint64  `json:"id"`
	After *string `json:"after"`
}

// GetId returns __PaginateEpochValidatorsInput.Id, and is useful for accessing the field via an interface.
func (v *__PaginateEpochValidatorsInput) GetId() uint64 { return v.Id }

// GetAfter returns __PaginateEpochValidatorsInput.After, and is useful for accessing the field via an interface.
func (v *__PaginateEpochValidatorsInput) GetAfter() *string { return v.After }

// __PaginateMoveModuleListsInput is used internally by genqlient
type __PaginateMoveModuleListsInput struct {
	PackageId        sui.Address `json:"packageId"`
	Module           string      `json:"module"`
	HasMoreFriends   bool        `json:"hasMoreFriends"`
	HasMoreStructs   bool        `json:"hasMoreStructs"`
	HasMoreFunctions bool        `json:"hasMoreFunctions"`
	HasMoreEnums     bool        `json:"hasMoreEnums"`
	AfterFriends     *string     `json:"afterFriends"`
	AfterStructs     *string     `json:"afterStructs"`
	AfterFunctions   *string     `json:"afterFunctions"`
	AfterEnums       *string     `json:"afterEnums"`
}

// GetPackageId returns __PaginateMoveModuleListsInput.PackageId, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetPackageId() sui.Address { return v.PackageId }

// GetModule returns __PaginateMoveModuleListsInput.Module, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetModule() string { return v.Module }

// GetHasMoreFriends returns __PaginateMoveModuleListsInput.HasMoreFriends, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetHasMoreFriends() bool { return v.HasMoreFriends }

// GetHasMoreStructs returns __PaginateMoveModuleListsInput.HasMoreStructs, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetHasMoreStructs() bool { return v.HasMoreStructs }

// GetHasMoreFunctions returns __PaginateMoveModuleListsInput.HasMoreFunctions, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetHasMoreFunctions() bool { return v.HasMoreFunctions }

// GetHasMoreEnums returns __PaginateMoveModuleListsInput.HasMoreEnums, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetHasMoreEnums() bool { return v.HasMoreEnums }

// GetAfterFriends returns __PaginateMoveModuleListsInput.AfterFriends, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetAfterFriends() *string { return v.AfterFriends }

// GetAfterStructs returns __PaginateMoveModuleListsInput.AfterStructs, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetAfterStructs() *string { return v.AfterStructs }

// GetAfterFunctions returns __PaginateMoveModuleListsInput.AfterFunctions, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetAfterFunctions() *string { return v.AfterFunctions }

// GetAfterEnums returns __PaginateMoveModuleListsInput.AfterEnums, and is useful for accessing the field via an interface.
func (v *__PaginateMoveModuleListsInput) GetAfterEnums() *string { return v.AfterEnums }

// __PaginateTransactionBlockListsInput is used internally by genqlient
type __PaginateTransactionBlockListsInput struct {
	Digest                string `json:"digest"`
	HasMoreEvents         bool   `json:"hasMoreEvents"`
	HasMoreBalanceChanges bool   `json:"hasMoreBalanceChanges"`
	HasMoreObjectChanges  bool   `json:"hasMoreObjectChanges"`
	AfterEvents           string `json:"afterEvents"`
	AfterBalanceChanges   string `json:"afterBalanceChanges"`
	AfterObjectChanges    string `json:"afterObjectChanges"`
}

// GetDigest returns __PaginateTransactionBlockListsInput.Digest, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetDigest() string { return v.Digest }

// GetHasMoreEvents returns __PaginateTransactionBlockListsInput.HasMoreEvents, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetHasMoreEvents() bool { return v.HasMoreEvents }

// GetHasMoreBalanceChanges returns __PaginateTransactionBlockListsInput.HasMoreBalanceChanges, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetHasMoreBalanceChanges() bool {
	return v.HasMoreBalanceChanges
}

// GetHasMoreObjectChanges returns __PaginateTransactionBlockListsInput.HasMoreObjectChanges, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetHasMoreObjectChanges() bool {
	return v.HasMoreObjectChanges
}

// GetAfterEvents returns __PaginateTransactionBlockListsInput.AfterEvents, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetAfterEvents() string { return v.AfterEvents }

// GetAfterBalanceChanges returns __PaginateTransactionBlockListsInput.AfterBalanceChanges, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetAfterBalanceChanges() string {
	return v.AfterBalanceChanges
}

// GetAfterObjectChanges returns __PaginateTransactionBlockListsInput.AfterObjectChanges, and is useful for accessing the field via an interface.
func (v *__PaginateTransactionBlockListsInput) GetAfterObjectChanges() string {
	return v.AfterObjectChanges
}

// __QueryEventsInput is used internally by genqlient
type __QueryEventsInput struct {
	Filter EventFilter `json:"filter"`
	Before *string     `json:"before"`
	After  *string     `json:"after"`
	First  *int        `json:"first"`
	Last   *int        `json:"last"`
}

// GetFilter returns __QueryEventsInput.Filter, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetFilter() EventFilter { return v.Filter }

// GetBefore returns __QueryEventsInput.Before, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetBefore() *string { return v.Before }

// GetAfter returns __QueryEventsInput.After, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetAfter() *string { return v.After }

// GetFirst returns __QueryEventsInput.First, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetFirst() *int { return v.First }

// GetLast returns __QueryEventsInput.Last, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetLast() *int { return v.Last }

// __QueryTransactionBlocksInput is used internally by genqlient
type __QueryTransactionBlocksInput struct {
	First              *int                    `json:"first"`
	Last               *int                    `json:"last"`
	Before             *string                 `json:"before"`
	After              *string                 `json:"after"`
	ShowBalanceChanges *bool                   `json:"showBalanceChanges"`
	ShowEffects        *bool                   `json:"showEffects"`
	ShowRawEffects     *bool                   `json:"showRawEffects"`
	ShowEvents         *bool                   `json:"showEvents"`
	ShowInput          *bool                   `json:"showInput"`
	ShowObjectChanges  *bool                   `json:"showObjectChanges"`
	ShowRawInput       *bool                   `json:"showRawInput"`
	Filter             *TransactionBlockFilter `json:"filter"`
}

// GetFirst returns __QueryTransactionBlocksInput.First, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetFirst() *int { return v.First }

// GetLast returns __QueryTransactionBlocksInput.Last, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetLast() *int { return v.Last }

// GetBefore returns __QueryTransactionBlocksInput.Before, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetBefore() *string { return v.Before }

// GetAfter returns __QueryTransactionBlocksInput.After, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetAfter() *string { return v.After }

// GetShowBalanceChanges returns __QueryTransactionBlocksInput.ShowBalanceChanges, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowBalanceChanges() *bool { return v.ShowBalanceChanges }

// GetShowEffects returns __QueryTransactionBlocksInput.ShowEffects, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowEffects() *bool { return v.ShowEffects }

// GetShowRawEffects returns __QueryTransactionBlocksInput.ShowRawEffects, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowRawEffects() *bool { return v.ShowRawEffects }

// GetShowEvents returns __QueryTransactionBlocksInput.ShowEvents, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowEvents() *bool { return v.ShowEvents }

// GetShowInput returns __QueryTransactionBlocksInput.ShowInput, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowInput() *bool { return v.ShowInput }

// GetShowObjectChanges returns __QueryTransactionBlocksInput.ShowObjectChanges, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowObjectChanges() *bool { return v.ShowObjectChanges }

// GetShowRawInput returns __QueryTransactionBlocksInput.ShowRawInput, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetShowRawInput() *bool { return v.ShowRawInput }

// GetFilter returns __QueryTransactionBlocksInput.Filter, and is useful for accessing the field via an interface.
func (v *__QueryTransactionBlocksInput) GetFilter() *TransactionBlockFilter { return v.Filter }

// __ResolveNameServiceAddressInput is used internally by genqlient
type __ResolveNameServiceAddressInput struct {
	Domain *string `json:"domain"`
}

// GetDomain returns __ResolveNameServiceAddressInput.Domain, and is useful for accessing the field via an interface.
func (v *__ResolveNameServiceAddressInput) GetDomain() *string { return v.Domain }

// __ResolveNameServiceNamesInput is used internally by genqlient
type __ResolveNameServiceNamesInput struct {
	Address sui.Address `json:"address"`
	Limit   *int        `json:"limit"`
	Cursor  *string     `json:"cursor"`
}

// GetAddress returns __ResolveNameServiceNamesInput.Address, and is useful for accessing the field via an interface.
func (v *__ResolveNameServiceNamesInput) GetAddress() sui.Address { return v.Address }

// GetLimit returns __ResolveNameServiceNamesInput.Limit, and is useful for accessing the field via an interface.
func (v *__ResolveNameServiceNamesInput) GetLimit() *int { return v.Limit }

// GetCursor returns __ResolveNameServiceNamesInput.Cursor, and is useful for accessing the field via an interface.
func (v *__ResolveNameServiceNamesInput) GetCursor() *string { return v.Cursor }

// __TryGetPastObjectInput is used internally by genqlient
type __TryGetPastObjectInput struct {
	Id                      sui.Address `json:"id"`
	Version                 *uint64     `json:"version"`
	ShowBcs                 *bool       `json:"showBcs"`
	ShowOwner               *bool       `json:"showOwner"`
	ShowPreviousTransaction *bool       `json:"showPreviousTransaction"`
	ShowContent             *bool       `json:"showContent"`
	ShowDisplay             *bool       `json:"showDisplay"`
	ShowType                *bool       `json:"showType"`
	ShowStorageRebate       *bool       `json:"showStorageRebate"`
}

// GetId returns __TryGetPastObjectInput.Id, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetId() sui.Address { return v.Id }

// GetVersion returns __TryGetPastObjectInput.Version, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetVersion() *uint64 { return v.Version }

// GetShowBcs returns __TryGetPastObjectInput.ShowBcs, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowBcs() *bool { return v.ShowBcs }

// GetShowOwner returns __TryGetPastObjectInput.ShowOwner, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowOwner() *bool { return v.ShowOwner }

// GetShowPreviousTransaction returns __TryGetPastObjectInput.ShowPreviousTransaction, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowPreviousTransaction() *bool {
	return v.ShowPreviousTransaction
}

// GetShowContent returns __TryGetPastObjectInput.ShowContent, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowContent() *bool { return v.ShowContent }

// GetShowDisplay returns __TryGetPastObjectInput.ShowDisplay, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowDisplay() *bool { return v.ShowDisplay }

// GetShowType returns __TryGetPastObjectInput.ShowType, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowType() *bool { return v.ShowType }

// GetShowStorageRebate returns __TryGetPastObjectInput.ShowStorageRebate, and is useful for accessing the field via an interface.
func (v *__TryGetPastObjectInput) GetShowStorageRebate() *bool { return v.ShowStorageRebate }

// The query executed by DevInspectTransactionBlock.
const DevInspectTransactionBlock_Operation = `
query DevInspectTransactionBlock ($txBytes: String!, $txMeta: TransactionMetadata!, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false) {
	dryRunTransactionBlock(txBytes: $txBytes, txMeta: $txMeta) {
		error
		results {
			mutatedReferences {
				input {
					__typename
					... on Input {
						inputIndex: ix
					}
					... on Result {
						cmd
						resultIndex: ix
					}
				}
				type {
					repr
				}
				bcs
			}
			returnValues {
				type {
					repr
				}
				bcs
			}
		}
		transaction {
			... RPC_TRANSACTION_FIELDS
		}
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func DevInspectTransactionBlock(
	ctx_ context.Context,
	client_ graphql.Client,
	txBytes string,
	txMeta TransactionMetadata,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
) (data_ *DevInspectTransactionBlockResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DevInspectTransactionBlock",
		Query:  DevInspectTransactionBlock_Operation,
		Variables: &__DevInspectTransactionBlockInput{
			TxBytes:            txBytes,
			TxMeta:             txMeta,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
		},
	}

	data_ = &DevInspectTransactionBlockResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by DryRunTransactionBlock.
const DryRunTransactionBlock_Operation = `
query DryRunTransactionBlock ($txBytes: String!, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false) {
	dryRunTransactionBlock(txBytes: $txBytes) {
		error
		transaction {
			... RPC_TRANSACTION_FIELDS
		}
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func DryRunTransactionBlock(
	ctx_ context.Context,
	client_ graphql.Client,
	txBytes string,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
) (data_ *DryRunTransactionBlockResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "DryRunTransactionBlock",
		Query:  DryRunTransactionBlock_Operation,
		Variables: &__DryRunTransactionBlockInput{
			TxBytes:            txBytes,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
		},
	}

	data_ = &DryRunTransactionBlockResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by ExecuteTransactionBlock.
const ExecuteTransactionBlock_Operation = `
mutation ExecuteTransactionBlock ($txBytes: String!, $signatures: [String!]!, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false) {
	executeTransactionBlock(txBytes: $txBytes, signatures: $signatures) {
		errors
		effects {
			transactionBlock {
				... RPC_TRANSACTION_FIELDS
			}
		}
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func ExecuteTransactionBlock(
	ctx_ context.Context,
	client_ graphql.Client,
	txBytes string,
	signatures []string,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
) (data_ *ExecuteTransactionBlockResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ExecuteTransactionBlock",
		Query:  ExecuteTransactionBlock_Operation,
		Variables: &__ExecuteTransactionBlockInput{
			TxBytes:            txBytes,
			Signatures:         signatures,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
		},
	}

	data_ = &ExecuteTransactionBlockResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetAllBalances.
const GetAllBalances_Operation = `
query GetAllBalances ($owner: SuiAddress!, $limit: Int, $cursor: String) {
	address(address: $owner) {
		balances(first: $limit, after: $cursor) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				coinObjectCount
				totalBalance
			}
		}
	}
}
`

func GetAllBalances(
	ctx_ context.Context,
	client_ graphql.Client,
	owner sui.Address,
	limit *int,
	cursor *string,
) (data_ *GetAllBalancesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetAllBalances",
		Query:  GetAllBalances_Operation,
		Variables: &__GetAllBalancesInput{
			Owner:  owner,
			Limit:  limit,
			Cursor: cursor,
		},
	}

	data_ = &GetAllBalancesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetBalance.
const GetBalance_Operation = `
query GetBalance ($owner: SuiAddress!, $fetchCoinType: String = "0x2::sui::SUI") {
	address(address: $owner) {
		balance(type: $fetchCoinType) {
			coinType {
				repr
			}
			coinObjectCount
			totalBalance
		}
	}
}
`

func GetBalance(
	ctx_ context.Context,
	client_ graphql.Client,
	owner sui.Address,
	fetchCoinType *string,
) (data_ *GetBalanceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetBalance",
		Query:  GetBalance_Operation,
		Variables: &__GetBalanceInput{
			Owner:         owner,
			FetchCoinType: fetchCoinType,
		},
	}

	data_ = &GetBalanceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetChainIdentifier.
const GetChainIdentifier_Operation = `
query GetChainIdentifier {
	chainIdentifier
}
`

func GetChainIdentifier(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetChainIdentifierResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetChainIdentifier",
		Query:  GetChainIdentifier_Operation,
	}

	data_ = &GetChainIdentifierResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCheckpoint.
const GetCheckpoint_Operation = `
query GetCheckpoint ($id: CheckpointId) {
	checkpoint(id: $id) {
		... RPC_Checkpoint_Fields
	}
}
fragment RPC_Checkpoint_Fields on Checkpoint {
	digest
	epoch {
		epochId
	}
	rollingGasSummary {
		computationCost
		storageCost
		storageRebate
		nonRefundableStorageFee
	}
	networkTotalTransactions
	previousCheckpointDigest
	sequenceNumber
	timestamp
	validatorSignatures
	transactionBlocks {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			digest
		}
	}
	endOfEpoch: transactionBlocks(last: 1, filter: {kind:SYSTEM_TX}) {
		nodes {
			kind {
				__typename
				... on EndOfEpochTransaction {
					transactions(last: 1) {
						nodes {
							__typename
							... on ChangeEpochTransaction {
								epoch {
									validatorSet {
										activeValidators {
											pageInfo {
												hasNextPage
												endCursor
											}
											nodes {
												credentials {
													protocolPubKey
												}
												votingPower
											}
										}
									}
									protocolConfigs {
										protocolVersion
									}
									epochId
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func GetCheckpoint(
	ctx_ context.Context,
	client_ graphql.Client,
	id *CheckpointId,
) (data_ *GetCheckpointResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCheckpoint",
		Query:  GetCheckpoint_Operation,
		Variables: &__GetCheckpointInput{
			Id: id,
		},
	}

	data_ = &GetCheckpointResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCheckpoints.
const GetCheckpoints_Operation = `
query GetCheckpoints ($first: Int, $before: String, $last: Int, $after: String) {
	checkpoints(first: $first, after: $after, last: $last, before: $before) {
		pageInfo {
			startCursor
			endCursor
			hasNextPage
			hasPreviousPage
		}
		nodes {
			... RPC_Checkpoint_Fields
		}
	}
}
fragment RPC_Checkpoint_Fields on Checkpoint {
	digest
	epoch {
		epochId
	}
	rollingGasSummary {
		computationCost
		storageCost
		storageRebate
		nonRefundableStorageFee
	}
	networkTotalTransactions
	previousCheckpointDigest
	sequenceNumber
	timestamp
	validatorSignatures
	transactionBlocks {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			digest
		}
	}
	endOfEpoch: transactionBlocks(last: 1, filter: {kind:SYSTEM_TX}) {
		nodes {
			kind {
				__typename
				... on EndOfEpochTransaction {
					transactions(last: 1) {
						nodes {
							__typename
							... on ChangeEpochTransaction {
								epoch {
									validatorSet {
										activeValidators {
											pageInfo {
												hasNextPage
												endCursor
											}
											nodes {
												credentials {
													protocolPubKey
												}
												votingPower
											}
										}
									}
									protocolConfigs {
										protocolVersion
									}
									epochId
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func GetCheckpoints(
	ctx_ context.Context,
	client_ graphql.Client,
	first *int,
	before *string,
	last *int,
	after *string,
) (data_ *GetCheckpointsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCheckpoints",
		Query:  GetCheckpoints_Operation,
		Variables: &__GetCheckpointsInput{
			First:  first,
			Before: before,
			Last:   last,
			After:  after,
		},
	}

	data_ = &GetCheckpointsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCoinMetadata.
const GetCoinMetadata_Operation = `
query GetCoinMetadata ($coinType: String!) {
	coinMetadata(coinType: $coinType) {
		decimals
		name
		symbol
		description
		iconUrl
		address
	}
}
`

func GetCoinMetadata(
	ctx_ context.Context,
	client_ graphql.Client,
	coinType string,
) (data_ *GetCoinMetadataResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCoinMetadata",
		Query:  GetCoinMetadata_Operation,
		Variables: &__GetCoinMetadataInput{
			CoinType: coinType,
		},
	}

	data_ = &GetCoinMetadataResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCoins.
const GetCoins_Operation = `
query GetCoins ($owner: SuiAddress!, $first: Int, $cursor: String, $fetchCoinType: String = "0x2::sui::SUI") {
	address(address: $owner) {
		address
		coins(first: $first, after: $cursor, type: $fetchCoinType) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinBalance
				contents {
					type {
						repr
					}
				}
				address
				version
				digest
				previousTransactionBlock {
					digest
				}
			}
		}
	}
}
`

func GetCoins(
	ctx_ context.Context,
	client_ graphql.Client,
	owner sui.Address,
	first *int,
	cursor *string,
	fetchCoinType *string,
) (data_ *GetCoinsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCoins",
		Query:  GetCoins_Operation,
		Variables: &__GetCoinsInput{
			Owner:         owner,
			First:         first,
			Cursor:        cursor,
			FetchCoinType: fetchCoinType,
		},
	}

	data_ = &GetCoinsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCommitteeInfo.
const GetCommitteeInfo_Operation = `
query GetCommitteeInfo ($epochId: UInt53, $after: String) {
	epoch(id: $epochId) {
		epochId
		validatorSet {
			activeValidators(after: $after) {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					credentials {
						protocolPubKey
					}
					votingPower
				}
			}
		}
	}
}
`

func GetCommitteeInfo(
	ctx_ context.Context,
	client_ graphql.Client,
	epochId *uint64,
	after *string,
) (data_ *GetCommitteeInfoResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCommitteeInfo",
		Query:  GetCommitteeInfo_Operation,
		Variables: &__GetCommitteeInfoInput{
			EpochId: epochId,
			After:   after,
		},
	}

	data_ = &GetCommitteeInfoResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetCurrentEpoch.
const GetCurrentEpoch_Operation = `
query GetCurrentEpoch {
	epoch {
		epochId
		validatorSet {
			activeValidators {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					... RPC_VALIDATOR_FIELDS
				}
			}
		}
		totalTransactions
		firstCheckpoint: checkpoints(first: 1) {
			nodes {
				sequenceNumber
			}
		}
		startTimestamp
		endTimestamp
		referenceGasPrice
	}
}
fragment RPC_VALIDATOR_FIELDS on Validator {
	atRisk
	commissionRate
	exchangeRatesSize
	exchangeRates {
		contents {
			json
		}
		address
	}
	description
	gasPrice
	imageUrl
	name
	credentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochCommissionRate
	nextEpochGasPrice
	nextEpochCredentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochStake
	nextEpochCommissionRate
	operationCap {
		address
	}
	pendingPoolTokenWithdraw
	pendingStake
	pendingTotalSuiWithdraw
	poolTokenBalance
	projectUrl
	rewardsPool
	stakingPool {
		address
	}
	stakingPoolActivationEpoch
	stakingPoolSuiBalance
	address {
		address
	}
	votingPower
}
fragment RPC_CREDENTIAL_FIELDS on ValidatorCredentials {
	netAddress
	networkPubKey
	p2PAddress
	primaryAddress
	workerPubKey
	workerAddress
	proofOfPossession
	protocolPubKey
}
`

func GetCurrentEpoch(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetCurrentEpochResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetCurrentEpoch",
		Query:  GetCurrentEpoch_Operation,
	}

	data_ = &GetCurrentEpochResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetDynamicFieldObject.
const GetDynamicFieldObject_Operation = `
query GetDynamicFieldObject ($parentId: SuiAddress!, $name: DynamicFieldName!) {
	owner(address: $parentId) {
		dynamicObjectField(name: $name) {
			value {
				__typename
				... on MoveObject {
					owner {
						__typename
						... on Parent {
							parent {
								asObject {
									address
									digest
									version
									storageRebate
									owner {
										__typename
										... on Parent {
											parent {
												address
											}
										}
									}
									previousTransactionBlock {
										digest
									}
									asMoveObject {
										contents {
											data
											type {
												repr
												layout
											}
										}
										hasPublicTransfer
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
`

func GetDynamicFieldObject(
	ctx_ context.Context,
	client_ graphql.Client,
	parentId sui.Address,
	name DynamicFieldName,
) (data_ *GetDynamicFieldObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetDynamicFieldObject",
		Query:  GetDynamicFieldObject_Operation,
		Variables: &__GetDynamicFieldObjectInput{
			ParentId: parentId,
			Name:     name,
		},
	}

	data_ = &GetDynamicFieldObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetDynamicFields.
const GetDynamicFields_Operation = `
query GetDynamicFields ($parentId: SuiAddress!, $first: Int, $cursor: String) {
	owner(address: $parentId) {
		dynamicFields(first: $first, after: $cursor) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				name {
					bcs
					json
					type {
						layout
						repr
					}
				}
				value {
					__typename
					... on MoveValue {
						json
						type {
							repr
						}
					}
					... on MoveObject {
						contents {
							type {
								repr
							}
							json
						}
						address
						digest
						version
					}
				}
			}
		}
	}
}
`

func GetDynamicFields(
	ctx_ context.Context,
	client_ graphql.Client,
	parentId sui.Address,
	first *int,
	cursor *string,
) (data_ *GetDynamicFieldsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetDynamicFields",
		Query:  GetDynamicFields_Operation,
		Variables: &__GetDynamicFieldsInput{
			ParentId: parentId,
			First:    first,
			Cursor:   cursor,
		},
	}

	data_ = &GetDynamicFieldsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetLatestCheckpointSequenceNumber.
const GetLatestCheckpointSequenceNumber_Operation = `
query GetLatestCheckpointSequenceNumber {
	checkpoint {
		sequenceNumber
	}
}
`

func GetLatestCheckpointSequenceNumber(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetLatestCheckpointSequenceNumberResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetLatestCheckpointSequenceNumber",
		Query:  GetLatestCheckpointSequenceNumber_Operation,
	}

	data_ = &GetLatestCheckpointSequenceNumberResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetLatestSuiSystemState.
const GetLatestSuiSystemState_Operation = `
query GetLatestSuiSystemState {
	epoch {
		epochId
		startTimestamp
		endTimestamp
		referenceGasPrice
		safeMode {
			enabled
			gasSummary {
				computationCost
				nonRefundableStorageFee
				storageCost
				storageRebate
			}
		}
		systemStakeSubsidy {
			balance
			currentDistributionAmount
			decreaseRate
			distributionCounter
			periodLength
		}
		storageFund {
			nonRefundableBalance
			totalObjectStorageRebates
		}
		systemStateVersion
		systemParameters {
			minValidatorCount
			maxValidatorCount
			minValidatorJoiningStake
			durationMs
			validatorLowStakeThreshold
			validatorLowStakeGracePeriod
			validatorVeryLowStakeThreshold
			stakeSubsidyStartEpoch
		}
		protocolConfigs {
			protocolVersion
		}
		validatorSet {
			activeValidators {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					... RPC_VALIDATOR_FIELDS
				}
			}
			inactivePoolsSize
			pendingActiveValidatorsSize
			stakingPoolMappingsSize
			validatorCandidatesSize
			pendingRemovals
			totalStake
			stakingPoolMappingsId
			pendingActiveValidatorsId
			validatorCandidatesId
			inactivePoolsId
		}
	}
}
fragment RPC_VALIDATOR_FIELDS on Validator {
	atRisk
	commissionRate
	exchangeRatesSize
	exchangeRates {
		contents {
			json
		}
		address
	}
	description
	gasPrice
	imageUrl
	name
	credentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochCommissionRate
	nextEpochGasPrice
	nextEpochCredentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochStake
	nextEpochCommissionRate
	operationCap {
		address
	}
	pendingPoolTokenWithdraw
	pendingStake
	pendingTotalSuiWithdraw
	poolTokenBalance
	projectUrl
	rewardsPool
	stakingPool {
		address
	}
	stakingPoolActivationEpoch
	stakingPoolSuiBalance
	address {
		address
	}
	votingPower
}
fragment RPC_CREDENTIAL_FIELDS on ValidatorCredentials {
	netAddress
	networkPubKey
	p2PAddress
	primaryAddress
	workerPubKey
	workerAddress
	proofOfPossession
	protocolPubKey
}
`

func GetLatestSuiSystemState(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetLatestSuiSystemStateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetLatestSuiSystemState",
		Query:  GetLatestSuiSystemState_Operation,
	}

	data_ = &GetLatestSuiSystemStateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetMoveFunctionArgTypes.
const GetMoveFunctionArgTypes_Operation = `
query GetMoveFunctionArgTypes ($packageId: SuiAddress!, $module: String!, $function: String!) {
	object(address: $packageId) {
		asMovePackage {
			module(name: $module) {
				fileFormatVersion
				function(name: $function) {
					parameters {
						signature
					}
				}
			}
		}
	}
}
`

func GetMoveFunctionArgTypes(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	module string,
	function string,
) (data_ *GetMoveFunctionArgTypesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetMoveFunctionArgTypes",
		Query:  GetMoveFunctionArgTypes_Operation,
		Variables: &__GetMoveFunctionArgTypesInput{
			PackageId: packageId,
			Module:    module,
			Function:  function,
		},
	}

	data_ = &GetMoveFunctionArgTypesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetNormalizedMoveFunction.
const GetNormalizedMoveFunction_Operation = `
query GetNormalizedMoveFunction ($packageId: SuiAddress!, $module: String!, $function: String!) {
	object(address: $packageId) {
		address
		asMovePackage {
			module(name: $module) {
				fileFormatVersion
				function(name: $function) {
					... RPC_MOVE_FUNCTION_FIELDS
				}
			}
		}
	}
}
fragment RPC_MOVE_FUNCTION_FIELDS on MoveFunction {
	name
	visibility
	isEntry
	parameters {
		signature
	}
	typeParameters {
		constraints
	}
	return {
		repr
		signature
	}
}
`

func GetNormalizedMoveFunction(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	module string,
	function string,
) (data_ *GetNormalizedMoveFunctionResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetNormalizedMoveFunction",
		Query:  GetNormalizedMoveFunction_Operation,
		Variables: &__GetNormalizedMoveFunctionInput{
			PackageId: packageId,
			Module:    module,
			Function:  function,
		},
	}

	data_ = &GetNormalizedMoveFunctionResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetNormalizedMoveModule.
const GetNormalizedMoveModule_Operation = `
query GetNormalizedMoveModule ($packageId: SuiAddress!, $module: String!) {
	object(address: $packageId) {
		asMovePackage {
			module(name: $module) {
				... RPC_MOVE_MODULE_FIELDS
			}
		}
	}
}
fragment RPC_MOVE_MODULE_FIELDS on MoveModule {
	name
	friends {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			name
			package {
				address
			}
		}
	}
	structs {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_STRUCT_FIELDS
		}
	}
	enums {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_ENUM_FIELDS
		}
	}
	fileFormatVersion
	functions {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_FUNCTION_FIELDS
		}
	}
}
fragment RPC_MOVE_STRUCT_FIELDS on MoveStruct {
	name
	abilities
	fields {
		name
		type {
			signature
		}
	}
	typeParameters {
		isPhantom
		constraints
	}
}
fragment RPC_MOVE_ENUM_FIELDS on MoveEnum {
	name
	abilities
	typeParameters {
		isPhantom
		constraints
	}
	variants {
		name
		fields {
			name
			type {
				signature
			}
		}
	}
}
fragment RPC_MOVE_FUNCTION_FIELDS on MoveFunction {
	name
	visibility
	isEntry
	parameters {
		signature
	}
	typeParameters {
		constraints
	}
	return {
		repr
		signature
	}
}
`

func GetNormalizedMoveModule(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	module string,
) (data_ *GetNormalizedMoveModuleResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetNormalizedMoveModule",
		Query:  GetNormalizedMoveModule_Operation,
		Variables: &__GetNormalizedMoveModuleInput{
			PackageId: packageId,
			Module:    module,
		},
	}

	data_ = &GetNormalizedMoveModuleResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetNormalizedMoveModulesByPackage.
const GetNormalizedMoveModulesByPackage_Operation = `
query GetNormalizedMoveModulesByPackage ($packageId: SuiAddress!, $cursor: String) {
	object(address: $packageId) {
		asMovePackage {
			address
			modules(after: $cursor) {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					... RPC_MOVE_MODULE_FIELDS
				}
			}
		}
	}
}
fragment RPC_MOVE_MODULE_FIELDS on MoveModule {
	name
	friends {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			name
			package {
				address
			}
		}
	}
	structs {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_STRUCT_FIELDS
		}
	}
	enums {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_ENUM_FIELDS
		}
	}
	fileFormatVersion
	functions {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_MOVE_FUNCTION_FIELDS
		}
	}
}
fragment RPC_MOVE_STRUCT_FIELDS on MoveStruct {
	name
	abilities
	fields {
		name
		type {
			signature
		}
	}
	typeParameters {
		isPhantom
		constraints
	}
}
fragment RPC_MOVE_ENUM_FIELDS on MoveEnum {
	name
	abilities
	typeParameters {
		isPhantom
		constraints
	}
	variants {
		name
		fields {
			name
			type {
				signature
			}
		}
	}
}
fragment RPC_MOVE_FUNCTION_FIELDS on MoveFunction {
	name
	visibility
	isEntry
	parameters {
		signature
	}
	typeParameters {
		constraints
	}
	return {
		repr
		signature
	}
}
`

func GetNormalizedMoveModulesByPackage(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	cursor *string,
) (data_ *GetNormalizedMoveModulesByPackageResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetNormalizedMoveModulesByPackage",
		Query:  GetNormalizedMoveModulesByPackage_Operation,
		Variables: &__GetNormalizedMoveModulesByPackageInput{
			PackageId: packageId,
			Cursor:    cursor,
		},
	}

	data_ = &GetNormalizedMoveModulesByPackageResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetNormalizedMoveStruct.
const GetNormalizedMoveStruct_Operation = `
query GetNormalizedMoveStruct ($packageId: SuiAddress!, $module: String!, $moveStruct: String!) {
	object(address: $packageId) {
		asMovePackage {
			address
			module(name: $module) {
				fileFormatVersion
				struct(name: $moveStruct) {
					... RPC_MOVE_STRUCT_FIELDS
				}
			}
		}
	}
}
fragment RPC_MOVE_STRUCT_FIELDS on MoveStruct {
	name
	abilities
	fields {
		name
		type {
			signature
		}
	}
	typeParameters {
		isPhantom
		constraints
	}
}
`

func GetNormalizedMoveStruct(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	module string,
	moveStruct string,
) (data_ *GetNormalizedMoveStructResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetNormalizedMoveStruct",
		Query:  GetNormalizedMoveStruct_Operation,
		Variables: &__GetNormalizedMoveStructInput{
			PackageId:  packageId,
			Module:     module,
			MoveStruct: moveStruct,
		},
	}

	data_ = &GetNormalizedMoveStructResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetObject.
const GetObject_Operation = `
query GetObject ($id: SuiAddress!, $showBcs: Boolean = false, $showOwner: Boolean = false, $showPreviousTransaction: Boolean = false, $showContent: Boolean = false, $showDisplay: Boolean = false, $showType: Boolean = false, $showStorageRebate: Boolean = false) {
	object(address: $id) {
		... RPC_OBJECT_FIELDS
	}
}
fragment RPC_OBJECT_FIELDS on Object {
	objectId: address
	version
	asMoveObjectType: asMoveObject @include(if: $showType) {
		contents {
			type {
				repr
			}
		}
	}
	asMoveObjectContent: asMoveObject @include(if: $showContent) {
		hasPublicTransfer
		contents {
			data
			type {
				repr
				layout
				signature
			}
		}
	}
	asMoveObject @include(if: $showBcs) {
		hasPublicTransfer
		contents {
			bcs
			type {
				repr
			}
		}
	}
	owner @include(if: $showOwner) {
		__typename
		... RPC_OBJECT_OWNER_FIELDS
	}
	previousTransactionBlock @include(if: $showPreviousTransaction) {
		digest
	}
	storageRebate @include(if: $showStorageRebate)
	digest
	version
	display @include(if: $showDisplay) {
		key
		value
		error
	}
}
fragment RPC_OBJECT_OWNER_FIELDS on ObjectOwner {
	__typename
	... on AddressOwner {
		owner {
			asObject {
				address
			}
			asAddress {
				address
			}
		}
	}
	... on Parent {
		parent {
			address
		}
	}
	... on Shared {
		initialSharedVersion
	}
}
`

func GetObject(
	ctx_ context.Context,
	client_ graphql.Client,
	id sui.Address,
	showBcs *bool,
	showOwner *bool,
	showPreviousTransaction *bool,
	showContent *bool,
	showDisplay *bool,
	showType *bool,
	showStorageRebate *bool,
) (data_ *GetObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetObject",
		Query:  GetObject_Operation,
		Variables: &__GetObjectInput{
			Id:                      id,
			ShowBcs:                 showBcs,
			ShowOwner:               showOwner,
			ShowPreviousTransaction: showPreviousTransaction,
			ShowContent:             showContent,
			ShowDisplay:             showDisplay,
			ShowType:                showType,
			ShowStorageRebate:       showStorageRebate,
		},
	}

	data_ = &GetObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetOwnedObjects.
const GetOwnedObjects_Operation = `
query GetOwnedObjects ($owner: SuiAddress!, $limit: Int, $cursor: String, $showBcs: Boolean = false, $showContent: Boolean = false, $showDisplay: Boolean = false, $showType: Boolean = false, $showOwner: Boolean = false, $showPreviousTransaction: Boolean = false, $showStorageRebate: Boolean = false, $filter: ObjectFilter) {
	address(address: $owner) {
		objects(first: $limit, after: $cursor, filter: $filter) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_MOVE_OBJECT_FIELDS
			}
		}
	}
}
fragment RPC_MOVE_OBJECT_FIELDS on MoveObject {
	objectId: address
	bcs @include(if: $showBcs)
	contents_type: contents @include(if: $showType) {
		type {
			repr
		}
	}
	hasPublicTransfer @include(if: $showContent)
	contents_content: contents @include(if: $showContent) {
		data
		type {
			repr
			layout
			signature
		}
	}
	hasPublicTransfer @include(if: $showBcs)
	contents @include(if: $showBcs) {
		bcs
		type {
			repr
		}
	}
	owner @include(if: $showOwner) {
		__typename
		... RPC_OBJECT_OWNER_FIELDS
	}
	previousTransactionBlock @include(if: $showPreviousTransaction) {
		digest
	}
	storageRebate @include(if: $showStorageRebate)
	digest
	version
	display @include(if: $showDisplay) {
		key
		value
		error
	}
}
fragment RPC_OBJECT_OWNER_FIELDS on ObjectOwner {
	__typename
	... on AddressOwner {
		owner {
			asObject {
				address
			}
			asAddress {
				address
			}
		}
	}
	... on Parent {
		parent {
			address
		}
	}
	... on Shared {
		initialSharedVersion
	}
}
`

func GetOwnedObjects(
	ctx_ context.Context,
	client_ graphql.Client,
	owner sui.Address,
	limit *int,
	cursor *string,
	showBcs *bool,
	showContent *bool,
	showDisplay *bool,
	showType *bool,
	showOwner *bool,
	showPreviousTransaction *bool,
	showStorageRebate *bool,
	filter *ObjectFilter,
) (data_ *GetOwnedObjectsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetOwnedObjects",
		Query:  GetOwnedObjects_Operation,
		Variables: &__GetOwnedObjectsInput{
			Owner:                   owner,
			Limit:                   limit,
			Cursor:                  cursor,
			ShowBcs:                 showBcs,
			ShowContent:             showContent,
			ShowDisplay:             showDisplay,
			ShowType:                showType,
			ShowOwner:               showOwner,
			ShowPreviousTransaction: showPreviousTransaction,
			ShowStorageRebate:       showStorageRebate,
			Filter:                  filter,
		},
	}

	data_ = &GetOwnedObjectsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProtocolConfig.
const GetProtocolConfig_Operation = `
query GetProtocolConfig ($protocolVersion: UInt53) {
	protocolConfig(protocolVersion: $protocolVersion) {
		protocolVersion
		configs {
			key
			value
		}
		featureFlags {
			key
			value
		}
	}
}
`

func GetProtocolConfig(
	ctx_ context.Context,
	client_ graphql.Client,
	protocolVersion *uint64,
) (data_ *GetProtocolConfigResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProtocolConfig",
		Query:  GetProtocolConfig_Operation,
		Variables: &__GetProtocolConfigInput{
			ProtocolVersion: protocolVersion,
		},
	}

	data_ = &GetProtocolConfigResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetReferenceGasPrice.
const GetReferenceGasPrice_Operation = `
query GetReferenceGasPrice {
	epoch {
		referenceGasPrice
	}
}
`

func GetReferenceGasPrice(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetReferenceGasPriceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetReferenceGasPrice",
		Query:  GetReferenceGasPrice_Operation,
	}

	data_ = &GetReferenceGasPriceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetStakes.
const GetStakes_Operation = `
query GetStakes ($owner: SuiAddress!, $limit: Int, $cursor: String) {
	address(address: $owner) {
		stakedSuis(first: $limit, after: $cursor) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_STAKE_FIELDS
			}
		}
	}
}
fragment RPC_STAKE_FIELDS on StakedSui {
	principal
	activatedEpoch {
		epochId
		referenceGasPrice
	}
	stakeStatus
	requestedEpoch {
		epochId
	}
	contents {
		json
	}
	address
	estimatedReward
}
`

func GetStakes(
	ctx_ context.Context,
	client_ graphql.Client,
	owner sui.Address,
	limit *int,
	cursor *string,
) (data_ *GetStakesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetStakes",
		Query:  GetStakes_Operation,
		Variables: &__GetStakesInput{
			Owner:  owner,
			Limit:  limit,
			Cursor: cursor,
		},
	}

	data_ = &GetStakesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetStakesByIds.
const GetStakesByIds_Operation = `
query GetStakesByIds ($ids: [SuiAddress!]!, $limit: Int, $cursor: String) {
	objects(first: $limit, after: $cursor, filter: {objectIds:$ids}) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			asMoveObject {
				asStakedSui {
					... RPC_STAKE_FIELDS
				}
			}
		}
	}
}
fragment RPC_STAKE_FIELDS on StakedSui {
	principal
	activatedEpoch {
		epochId
		referenceGasPrice
	}
	stakeStatus
	requestedEpoch {
		epochId
	}
	contents {
		json
	}
	address
	estimatedReward
}
`

func GetStakesByIds(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []sui.Address,
	limit *int,
	cursor *string,
) (data_ *GetStakesByIdsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetStakesByIds",
		Query:  GetStakesByIds_Operation,
		Variables: &__GetStakesByIdsInput{
			Ids:    ids,
			Limit:  limit,
			Cursor: cursor,
		},
	}

	data_ = &GetStakesByIdsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTotalSupply.
const GetTotalSupply_Operation = `
query GetTotalSupply ($coinType: String!) {
	coinMetadata(coinType: $coinType) {
		supply
		decimals
	}
}
`

func GetTotalSupply(
	ctx_ context.Context,
	client_ graphql.Client,
	coinType string,
) (data_ *GetTotalSupplyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTotalSupply",
		Query:  GetTotalSupply_Operation,
		Variables: &__GetTotalSupplyInput{
			CoinType: coinType,
		},
	}

	data_ = &GetTotalSupplyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTotalTransactionBlocks.
const GetTotalTransactionBlocks_Operation = `
query GetTotalTransactionBlocks {
	checkpoint {
		networkTotalTransactions
	}
}
`

func GetTotalTransactionBlocks(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetTotalTransactionBlocksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTotalTransactionBlocks",
		Query:  GetTotalTransactionBlocks_Operation,
	}

	data_ = &GetTotalTransactionBlocksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTransactionBlock.
const GetTransactionBlock_Operation = `
query GetTransactionBlock ($digest: String!, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false) {
	transactionBlock(digest: $digest) {
		... RPC_TRANSACTION_FIELDS
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func GetTransactionBlock(
	ctx_ context.Context,
	client_ graphql.Client,
	digest string,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
) (data_ *GetTransactionBlockResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTransactionBlock",
		Query:  GetTransactionBlock_Operation,
		Variables: &__GetTransactionBlockInput{
			Digest:             digest,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
		},
	}

	data_ = &GetTransactionBlockResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetTypeLayout.
const GetTypeLayout_Operation = `
query GetTypeLayout ($targetType: String!) {
	type(type: $targetType) {
		layout
	}
}
`

func GetTypeLayout(
	ctx_ context.Context,
	client_ graphql.Client,
	targetType string,
) (data_ *GetTypeLayoutResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetTypeLayout",
		Query:  GetTypeLayout_Operation,
		Variables: &__GetTypeLayoutInput{
			TargetType: targetType,
		},
	}

	data_ = &GetTypeLayoutResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetValidatorsApy.
const GetValidatorsApy_Operation = `
query GetValidatorsApy {
	epoch {
		epochId
		validatorSet {
			activeValidators {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					address {
						address
					}
					apy
				}
			}
		}
	}
}
`

func GetValidatorsApy(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetValidatorsApyResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetValidatorsApy",
		Query:  GetValidatorsApy_Operation,
	}

	data_ = &GetValidatorsApyResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by MultiGetObjects.
const MultiGetObjects_Operation = `
query MultiGetObjects ($ids: [SuiAddress!]!, $limit: Int, $cursor: String, $showBcs: Boolean = false, $showContent: Boolean = false, $showDisplay: Boolean = false, $showType: Boolean = false, $showOwner: Boolean = false, $showPreviousTransaction: Boolean = false, $showStorageRebate: Boolean = false) {
	objects(first: $limit, after: $cursor, filter: {objectIds:$ids}) {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			... RPC_OBJECT_FIELDS
		}
	}
}
fragment RPC_OBJECT_FIELDS on Object {
	objectId: address
	version
	asMoveObjectType: asMoveObject @include(if: $showType) {
		contents {
			type {
				repr
			}
		}
	}
	asMoveObjectContent: asMoveObject @include(if: $showContent) {
		hasPublicTransfer
		contents {
			data
			type {
				repr
				layout
				signature
			}
		}
	}
	asMoveObject @include(if: $showBcs) {
		hasPublicTransfer
		contents {
			bcs
			type {
				repr
			}
		}
	}
	owner @include(if: $showOwner) {
		__typename
		... RPC_OBJECT_OWNER_FIELDS
	}
	previousTransactionBlock @include(if: $showPreviousTransaction) {
		digest
	}
	storageRebate @include(if: $showStorageRebate)
	digest
	version
	display @include(if: $showDisplay) {
		key
		value
		error
	}
}
fragment RPC_OBJECT_OWNER_FIELDS on ObjectOwner {
	__typename
	... on AddressOwner {
		owner {
			asObject {
				address
			}
			asAddress {
				address
			}
		}
	}
	... on Parent {
		parent {
			address
		}
	}
	... on Shared {
		initialSharedVersion
	}
}
`

func MultiGetObjects(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []sui.Address,
	limit *int,
	cursor *string,
	showBcs *bool,
	showContent *bool,
	showDisplay *bool,
	showType *bool,
	showOwner *bool,
	showPreviousTransaction *bool,
	showStorageRebate *bool,
) (data_ *MultiGetObjectsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "MultiGetObjects",
		Query:  MultiGetObjects_Operation,
		Variables: &__MultiGetObjectsInput{
			Ids:                     ids,
			Limit:                   limit,
			Cursor:                  cursor,
			ShowBcs:                 showBcs,
			ShowContent:             showContent,
			ShowDisplay:             showDisplay,
			ShowType:                showType,
			ShowOwner:               showOwner,
			ShowPreviousTransaction: showPreviousTransaction,
			ShowStorageRebate:       showStorageRebate,
		},
	}

	data_ = &MultiGetObjectsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by MultiGetTransactionBlocks.
const MultiGetTransactionBlocks_Operation = `
query MultiGetTransactionBlocks ($digests: [String!]!, $limit: Int, $cursor: String, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false) {
	transactionBlocks(first: $limit, after: $cursor, filter: {transactionIds:$digests}) {
		pageInfo {
			hasNextPage
			hasPreviousPage
			startCursor
			endCursor
		}
		nodes {
			... RPC_TRANSACTION_FIELDS
		}
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func MultiGetTransactionBlocks(
	ctx_ context.Context,
	client_ graphql.Client,
	digests []string,
	limit *int,
	cursor *string,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
) (data_ *MultiGetTransactionBlocksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "MultiGetTransactionBlocks",
		Query:  MultiGetTransactionBlocks_Operation,
		Variables: &__MultiGetTransactionBlocksInput{
			Digests:            digests,
			Limit:              limit,
			Cursor:             cursor,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
		},
	}

	data_ = &MultiGetTransactionBlocksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by PaginateCheckpointTransactionBlocks.
const PaginateCheckpointTransactionBlocks_Operation = `
query PaginateCheckpointTransactionBlocks ($id: CheckpointId, $after: String) {
	checkpoint(id: $id) {
		transactionBlocks(after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				digest
			}
		}
	}
}
`

func PaginateCheckpointTransactionBlocks(
	ctx_ context.Context,
	client_ graphql.Client,
	id *CheckpointId,
	after *string,
) (data_ *PaginateCheckpointTransactionBlocksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PaginateCheckpointTransactionBlocks",
		Query:  PaginateCheckpointTransactionBlocks_Operation,
		Variables: &__PaginateCheckpointTransactionBlocksInput{
			Id:    id,
			After: after,
		},
	}

	data_ = &PaginateCheckpointTransactionBlocksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by PaginateEpochValidators.
const PaginateEpochValidators_Operation = `
query PaginateEpochValidators ($id: UInt53!, $after: String) {
	epoch(id: $id) {
		validatorSet {
			activeValidators(after: $after) {
				pageInfo {
					hasNextPage
					endCursor
				}
				nodes {
					... RPC_VALIDATOR_FIELDS
				}
			}
		}
	}
}
fragment RPC_VALIDATOR_FIELDS on Validator {
	atRisk
	commissionRate
	exchangeRatesSize
	exchangeRates {
		contents {
			json
		}
		address
	}
	description
	gasPrice
	imageUrl
	name
	credentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochCommissionRate
	nextEpochGasPrice
	nextEpochCredentials {
		... RPC_CREDENTIAL_FIELDS
	}
	nextEpochStake
	nextEpochCommissionRate
	operationCap {
		address
	}
	pendingPoolTokenWithdraw
	pendingStake
	pendingTotalSuiWithdraw
	poolTokenBalance
	projectUrl
	rewardsPool
	stakingPool {
		address
	}
	stakingPoolActivationEpoch
	stakingPoolSuiBalance
	address {
		address
	}
	votingPower
}
fragment RPC_CREDENTIAL_FIELDS on ValidatorCredentials {
	netAddress
	networkPubKey
	p2PAddress
	primaryAddress
	workerPubKey
	workerAddress
	proofOfPossession
	protocolPubKey
}
`

func PaginateEpochValidators(
	ctx_ context.Context,
	client_ graphql.Client,
	id uint64,
	after *string,
) (data_ *PaginateEpochValidatorsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PaginateEpochValidators",
		Query:  PaginateEpochValidators_Operation,
		Variables: &__PaginateEpochValidatorsInput{
			Id:    id,
			After: after,
		},
	}

	data_ = &PaginateEpochValidatorsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by PaginateMoveModuleLists.
const PaginateMoveModuleLists_Operation = `
query PaginateMoveModuleLists ($packageId: SuiAddress!, $module: String!, $hasMoreFriends: Boolean!, $hasMoreStructs: Boolean!, $hasMoreFunctions: Boolean!, $hasMoreEnums: Boolean!, $afterFriends: String, $afterStructs: String, $afterFunctions: String, $afterEnums: String) {
	object(address: $packageId) {
		asMovePackage {
			module(name: $module) {
				friends(after: $afterFriends) @include(if: $hasMoreFriends) {
					pageInfo {
						hasNextPage
						endCursor
					}
					nodes {
						name
						package {
							address
						}
					}
				}
				structs(after: $afterStructs) @include(if: $hasMoreStructs) {
					pageInfo {
						hasNextPage
						endCursor
					}
					nodes {
						... RPC_MOVE_STRUCT_FIELDS
					}
				}
				enums(after: $afterEnums) @include(if: $hasMoreEnums) {
					pageInfo {
						hasNextPage
						endCursor
					}
					nodes {
						... RPC_MOVE_ENUM_FIELDS
					}
				}
				functions(after: $afterFunctions) @include(if: $hasMoreFunctions) {
					pageInfo {
						hasNextPage
						endCursor
					}
					nodes {
						... RPC_MOVE_FUNCTION_FIELDS
					}
				}
			}
		}
	}
}
fragment RPC_MOVE_STRUCT_FIELDS on MoveStruct {
	name
	abilities
	fields {
		name
		type {
			signature
		}
	}
	typeParameters {
		isPhantom
		constraints
	}
}
fragment RPC_MOVE_ENUM_FIELDS on MoveEnum {
	name
	abilities
	typeParameters {
		isPhantom
		constraints
	}
	variants {
		name
		fields {
			name
			type {
				signature
			}
		}
	}
}
fragment RPC_MOVE_FUNCTION_FIELDS on MoveFunction {
	name
	visibility
	isEntry
	parameters {
		signature
	}
	typeParameters {
		constraints
	}
	return {
		repr
		signature
	}
}
`

func PaginateMoveModuleLists(
	ctx_ context.Context,
	client_ graphql.Client,
	packageId sui.Address,
	module string,
	hasMoreFriends bool,
	hasMoreStructs bool,
	hasMoreFunctions bool,
	hasMoreEnums bool,
	afterFriends *string,
	afterStructs *string,
	afterFunctions *string,
	afterEnums *string,
) (data_ *PaginateMoveModuleListsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PaginateMoveModuleLists",
		Query:  PaginateMoveModuleLists_Operation,
		Variables: &__PaginateMoveModuleListsInput{
			PackageId:        packageId,
			Module:           module,
			HasMoreFriends:   hasMoreFriends,
			HasMoreStructs:   hasMoreStructs,
			HasMoreFunctions: hasMoreFunctions,
			HasMoreEnums:     hasMoreEnums,
			AfterFriends:     afterFriends,
			AfterStructs:     afterStructs,
			AfterFunctions:   afterFunctions,
			AfterEnums:       afterEnums,
		},
	}

	data_ = &PaginateMoveModuleListsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by PaginateTransactionBlockLists.
const PaginateTransactionBlockLists_Operation = `
query PaginateTransactionBlockLists ($digest: String!, $hasMoreEvents: Boolean!, $hasMoreBalanceChanges: Boolean!, $hasMoreObjectChanges: Boolean!, $afterEvents: String, $afterBalanceChanges: String, $afterObjectChanges: String) {
	transactionBlock(digest: $digest) {
		... PAGINATE_TRANSACTION_LISTS
	}
}
fragment PAGINATE_TRANSACTION_LISTS on TransactionBlock {
	effects {
		events(after: $afterEvents) @include(if: $hasMoreEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		balanceChanges(after: $afterBalanceChanges) @include(if: $hasMoreBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges(after: $afterObjectChanges) @include(if: $hasMoreObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func PaginateTransactionBlockLists(
	ctx_ context.Context,
	client_ graphql.Client,
	digest string,
	hasMoreEvents bool,
	hasMoreBalanceChanges bool,
	hasMoreObjectChanges bool,
	afterEvents string,
	afterBalanceChanges string,
	afterObjectChanges string,
) (data_ *PaginateTransactionBlockListsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "PaginateTransactionBlockLists",
		Query:  PaginateTransactionBlockLists_Operation,
		Variables: &__PaginateTransactionBlockListsInput{
			Digest:                digest,
			HasMoreEvents:         hasMoreEvents,
			HasMoreBalanceChanges: hasMoreBalanceChanges,
			HasMoreObjectChanges:  hasMoreObjectChanges,
			AfterEvents:           afterEvents,
			AfterBalanceChanges:   afterBalanceChanges,
			AfterObjectChanges:    afterObjectChanges,
		},
	}

	data_ = &PaginateTransactionBlockListsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by QueryEvents.
const QueryEvents_Operation = `
query QueryEvents ($filter: EventFilter!, $before: String, $after: String, $first: Int, $last: Int) {
	events(filter: $filter, first: $first, after: $after, last: $last, before: $before) {
		pageInfo {
			hasNextPage
			hasPreviousPage
			endCursor
			startCursor
		}
		nodes {
			... RPC_EVENTS_FIELDS
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func QueryEvents(
	ctx_ context.Context,
	client_ graphql.Client,
	filter EventFilter,
	before *string,
	after *string,
	first *int,
	last *int,
) (data_ *QueryEventsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "QueryEvents",
		Query:  QueryEvents_Operation,
		Variables: &__QueryEventsInput{
			Filter: filter,
			Before: before,
			After:  after,
			First:  first,
			Last:   last,
		},
	}

	data_ = &QueryEventsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by QueryTransactionBlocks.
const QueryTransactionBlocks_Operation = `
query QueryTransactionBlocks ($first: Int, $last: Int, $before: String, $after: String, $showBalanceChanges: Boolean = false, $showEffects: Boolean = false, $showRawEffects: Boolean = false, $showEvents: Boolean = false, $showInput: Boolean = false, $showObjectChanges: Boolean = false, $showRawInput: Boolean = false, $filter: TransactionBlockFilter) {
	transactionBlocks(first: $first, after: $after, last: $last, before: $before, filter: $filter) {
		pageInfo {
			hasNextPage
			hasPreviousPage
			startCursor
			endCursor
		}
		nodes {
			... RPC_TRANSACTION_FIELDS
		}
	}
}
fragment RPC_TRANSACTION_FIELDS on TransactionBlock {
	digest
	rawTransaction: bcs @include(if: $showInput)
	rawTransaction: bcs @include(if: $showRawInput)
	sender {
		address
	}
	signatures
	effects {
		bcs @include(if: $showEffects)
		bcs @include(if: $showObjectChanges)
		bcs @include(if: $showRawEffects)
		events @include(if: $showEvents) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				... RPC_EVENTS_FIELDS
			}
		}
		checkpoint {
			sequenceNumber
		}
		timestamp
		balanceChanges @include(if: $showBalanceChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				coinType {
					repr
				}
				owner {
					asObject {
						address
					}
					asAddress {
						address
					}
				}
				amount
			}
		}
		objectChanges @include(if: $showObjectChanges) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				address
				inputState {
					version
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
				}
				outputState {
					asMoveObject {
						contents {
							type {
								repr
							}
						}
					}
					asMovePackage {
						modules(first: 10) {
							nodes {
								name
							}
						}
					}
				}
			}
		}
	}
}
fragment RPC_EVENTS_FIELDS on Event {
	sendingModule {
		package {
			address
		}
		name
	}
	sender {
		address
	}
	contents {
		type {
			repr
		}
		json
		bcs
	}
	timestamp
}
`

func QueryTransactionBlocks(
	ctx_ context.Context,
	client_ graphql.Client,
	first *int,
	last *int,
	before *string,
	after *string,
	showBalanceChanges *bool,
	showEffects *bool,
	showRawEffects *bool,
	showEvents *bool,
	showInput *bool,
	showObjectChanges *bool,
	showRawInput *bool,
	filter *TransactionBlockFilter,
) (data_ *QueryTransactionBlocksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "QueryTransactionBlocks",
		Query:  QueryTransactionBlocks_Operation,
		Variables: &__QueryTransactionBlocksInput{
			First:              first,
			Last:               last,
			Before:             before,
			After:              after,
			ShowBalanceChanges: showBalanceChanges,
			ShowEffects:        showEffects,
			ShowRawEffects:     showRawEffects,
			ShowEvents:         showEvents,
			ShowInput:          showInput,
			ShowObjectChanges:  showObjectChanges,
			ShowRawInput:       showRawInput,
			Filter:             filter,
		},
	}

	data_ = &QueryTransactionBlocksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ResolveNameServiceAddress.
const ResolveNameServiceAddress_Operation = `
query ResolveNameServiceAddress ($domain: String!) {
	resolveSuinsAddress(domain: $domain) {
		address
	}
}
`

func ResolveNameServiceAddress(
	ctx_ context.Context,
	client_ graphql.Client,
	domain *string,
) (data_ *ResolveNameServiceAddressResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ResolveNameServiceAddress",
		Query:  ResolveNameServiceAddress_Operation,
		Variables: &__ResolveNameServiceAddressInput{
			Domain: domain,
		},
	}

	data_ = &ResolveNameServiceAddressResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ResolveNameServiceNames.
const ResolveNameServiceNames_Operation = `
query ResolveNameServiceNames ($address: SuiAddress!, $limit: Int, $cursor: String) {
	address(address: $address) {
		suinsRegistrations(first: $limit, after: $cursor) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				domain
			}
		}
	}
}
`

func ResolveNameServiceNames(
	ctx_ context.Context,
	client_ graphql.Client,
	address sui.Address,
	limit *int,
	cursor *string,
) (data_ *ResolveNameServiceNamesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ResolveNameServiceNames",
		Query:  ResolveNameServiceNames_Operation,
		Variables: &__ResolveNameServiceNamesInput{
			Address: address,
			Limit:   limit,
			Cursor:  cursor,
		},
	}

	data_ = &ResolveNameServiceNamesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by TryGetPastObject.
const TryGetPastObject_Operation = `
query TryGetPastObject ($id: SuiAddress!, $version: UInt53, $showBcs: Boolean = false, $showOwner: Boolean = false, $showPreviousTransaction: Boolean = false, $showContent: Boolean = false, $showDisplay: Boolean = false, $showType: Boolean = false, $showStorageRebate: Boolean = false) {
	current: object(address: $id) {
		address
		version
	}
	object(address: $id, version: $version) {
		... RPC_OBJECT_FIELDS
	}
}
fragment RPC_OBJECT_FIELDS on Object {
	objectId: address
	version
	asMoveObjectType: asMoveObject @include(if: $showType) {
		contents {
			type {
				repr
			}
		}
	}
	asMoveObjectContent: asMoveObject @include(if: $showContent) {
		hasPublicTransfer
		contents {
			data
			type {
				repr
				layout
				signature
			}
		}
	}
	asMoveObject @include(if: $showBcs) {
		hasPublicTransfer
		contents {
			bcs
			type {
				repr
			}
		}
	}
	owner @include(if: $showOwner) {
		__typename
		... RPC_OBJECT_OWNER_FIELDS
	}
	previousTransactionBlock @include(if: $showPreviousTransaction) {
		digest
	}
	storageRebate @include(if: $showStorageRebate)
	digest
	version
	display @include(if: $showDisplay) {
		key
		value
		error
	}
}
fragment RPC_OBJECT_OWNER_FIELDS on ObjectOwner {
	__typename
	... on AddressOwner {
		owner {
			asObject {
				address
			}
			asAddress {
				address
			}
		}
	}
	... on Parent {
		parent {
			address
		}
	}
	... on Shared {
		initialSharedVersion
	}
}
`

func TryGetPastObject(
	ctx_ context.Context,
	client_ graphql.Client,
	id sui.Address,
	version *uint64,
	showBcs *bool,
	showOwner *bool,
	showPreviousTransaction *bool,
	showContent *bool,
	showDisplay *bool,
	showType *bool,
	showStorageRebate *bool,
) (data_ *TryGetPastObjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "TryGetPastObject",
		Query:  TryGetPastObject_Operation,
		Variables: &__TryGetPastObjectInput{
			Id:                      id,
			Version:                 version,
			ShowBcs:                 showBcs,
			ShowOwner:               showOwner,
			ShowPreviousTransaction: showPreviousTransaction,
			ShowContent:             showContent,
			ShowDisplay:             showDisplay,
			ShowType:                showType,
			ShowStorageRebate:       showStorageRebate,
		},
	}

	data_ = &TryGetPastObjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
