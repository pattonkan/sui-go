# Copyright (c) Mysten Labs, Inc.
# SPDX-License-Identifier: Apache-2.0

query GetCheckpoint(
	# @genqlient(pointer: true)
	$id: CheckpointId,
) {
	checkpoint(id: $id) {
		...RPC_Checkpoint_Fields
	}
}

query GetCheckpoints(
	# @genqlient(pointer: true)
	$first: Int,
	# @genqlient(pointer: true)
	$before: String,
	# @genqlient(pointer: true)
	$last: Int,
	# @genqlient(pointer: true)
	$after: String,
) {
	checkpoints(first: $first, after: $after, last: $last, before: $before) {
		pageInfo {
			startCursor
			endCursor
			hasNextPage
			hasPreviousPage
		}
		nodes {
			...RPC_Checkpoint_Fields
		}
	}
}

query PaginateCheckpointTransactionBlocks(
	# @genqlient(pointer: true)
	$id: CheckpointId,
	# @genqlient(pointer: true)
	$after: String,
) {
	checkpoint(id: $id) {
		transactionBlocks(after: $after) {
			pageInfo {
				hasNextPage
				endCursor
			}
			nodes {
				digest
			}
		}
	}
}

fragment RPC_Checkpoint_Fields on Checkpoint {
	# checkpointCommitments
	digest
	epoch {
		epochId
	}

	rollingGasSummary {
		computationCost
		storageCost
		storageRebate
		nonRefundableStorageFee
	}
	networkTotalTransactions
	previousCheckpointDigest
	sequenceNumber
	timestamp
	validatorSignatures
	transactionBlocks {
		pageInfo {
			hasNextPage
			endCursor
		}
		nodes {
			digest
		}
	}
	endOfEpoch: transactionBlocks(last: 1, filter: { kind: SYSTEM_TX }) {
		nodes {
			kind {
				__typename
				... on EndOfEpochTransaction {
					transactions(last: 1) {
						nodes {
							__typename
							... on ChangeEpochTransaction {
								epoch {
									validatorSet {
										activeValidators {
											pageInfo {
												hasNextPage
												endCursor
											}
											nodes {
												credentials {
													protocolPubKey
												}
												votingPower
											}
										}
									}
									protocolConfigs {
										protocolVersion
									}
									epochId
								}
							}
						}
					}
				}
			}
		}
	}
}
